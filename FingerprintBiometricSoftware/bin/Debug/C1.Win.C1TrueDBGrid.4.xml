<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1TrueDBGrid.4</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1TrueDBGrid.C1ListBox">
            <summary>
            Represents a ListBox with checkable items and advanced auto-search.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1ItemCheckEventHandler">
            <summary>
            Internal delegate and parameters for C1ItemCheck event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColumnFilter">
            <summary>
            Represents a filter that contains a <see cref="P:C1.Win.C1TrueDBGrid.ColumnFilter.ValueFilter"/> and a
            <see cref="P:C1.Win.C1TrueDBGrid.ColumnFilter.ConditionFilter"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.IC1ColumnFilter">
            <summary>
            Interface implemented by column filter objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.IC1ColumnFilter.Reset">
            <summary>
            Resets the filter making it inactive.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.IC1ColumnFilter.Apply(System.Object)">
            <summary>
            Applies the filter to a value.
            </summary>
            <param name="value">Value to be filtered.</param>
            <returns>True if the <paramref name="value"/> satisfies the filter;
            False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.IC1ColumnFilter.GetEditor">
            <summary>
            Gets the editor used to modify the filter at run time.
            </summary>
            <returns>A <see cref="T:System.Windows.Forms.Control"/> to be used to modify the filter at 
            run time.</returns>
            <remarks>The control returned must implement the <see cref="T:C1.Win.C1TrueDBGrid.IC1ColumnFilterEditor"/>
            interface.</remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.IC1ColumnFilter.IsActive">
            <summary>
            Gets a value that determines whether the filter is active.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ColumnFilter.Reset">
            <summary>
            Resets the filter making it inactive.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ColumnFilter.Apply(System.Object)">
            <summary>
            Applies the filter to a value.
            </summary>
            <param name="value">Value to be filtered.</param>
            <returns>True if the <paramref name="value"/> satisfies the filter; False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ColumnFilter.GetEditor">
            <summary>
            Gets the editor used to modify the filter at run time.
            </summary>
            <returns>A <see cref="T:C1.Win.C1TrueDBGrid.IC1ColumnFilterEditor"/> that is used to edit the filter 
            at run time.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColumnFilter.ValueFilter">
            <summary>
            Gets the <see cref="P:C1.Win.C1TrueDBGrid.ColumnFilter.ValueFilter"/> contained in this <see cref="T:C1.Win.C1TrueDBGrid.ColumnFilter"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColumnFilter.ConditionFilter">
            <summary>
            Gets the <see cref="P:C1.Win.C1TrueDBGrid.ColumnFilter.ConditionFilter"/> contained in this <see cref="T:C1.Win.C1TrueDBGrid.ColumnFilter"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColumnFilter.IsActive">
            <summary>
            Gets or sets a value that determines whether the filter is active.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColumnFilterEditor">
            <summary>
            Represents a control used to edit a <see cref="T:C1.Win.C1TrueDBGrid.ColumnFilter"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.IC1ColumnFilterEditor">
            <summary>
            Interface implemented by column filter editor controls.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.IC1ColumnFilterEditor.Initialize(C1.Win.C1TrueDBGrid.IGridBase,System.Int32,C1.Win.C1TrueDBGrid.IC1ColumnFilter)">
            <summary>
            Initializes the editor with parameters from a filter to be edited.
            </summary>
            <param name="grid"><see cref="T:C1.Win.C1TrueDBGrid.IGridBase"/> that contains the column to be filtered.</param>
            <param name="columnIndex">Index of the column that contains the values to be filtered.</param>
            <param name="filter"><see cref="T:C1.Win.C1TrueDBGrid.IC1ColumnFilter"/> being edited.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.IC1ColumnFilterEditor.ApplyChanges">
            <summary>
            Applies changes to the filter being edited.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.IC1ColumnFilterEditor.KeepFormOpen">
            <summary>
            Gets a value that determines whether the containing form should remain 
            open even when it is deactivated.
            </summary>
            <remarks>
            This property allows custom editors to display modal dialogs.
            </remarks>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ColumnFilterEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ColumnFilterEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ColumnFilterEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ConditionFilter">
            <summary>
            Represents a filter based on one or two logical conditions.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ConditionFilter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1TrueDBGrid.ConditionFilter"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ConditionFilter.Clone">
            <summary>
            Creates a clone of this <see cref="T:C1.Win.C1TrueDBGrid.ConditionFilter"/>.
            </summary>
            <returns>A clone of this <see cref="T:C1.Win.C1TrueDBGrid.ConditionFilter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ConditionFilter.Reset">
            <summary>
            Resets the filter making it inactive.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ConditionFilter.Apply(System.Object)">
            <summary>
            Applies the filter to a value.
            </summary>
            <param name="value">Value to be filtered.</param>
            <returns>True if the <paramref name="value"/> satisfies the filter;
            False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ConditionFilter.GetEditor">
            <summary>
            Gets the editor used to modify the filter at run time.
            </summary>
            <returns>A <see cref="T:System.Windows.Forms.Control"/> that is used to modify the filter at run time.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ConditionFilter.Condition1">
            <summary>
            Gets the first filter condition.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ConditionFilter.Condition2">
            <summary>
            Gets the second filter condition.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ConditionFilter.AndConditions">
            <summary>
            Gets or sets whether the filter conditions should be combined
            with an 'And' or with an 'Or' operator.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ConditionFilter.IsActive">
            <summary>
            Gets or sets a value that determines whether the filter is active.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ConditionOperator">
            <summary>
            Represents operators used in filter conditions.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.None">
            <summary>
            Disables the operator.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.Equals">
            <summary>
            Return true if the value equals the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.NotEquals">
            <summary>
            Return true if the value does not equal the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.GreaterThan">
            <summary>
            Return true if the value is greater than the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.LessThan">
            <summary>
            Return true if the value is less than the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.GreaterThanOrEqualTo">
            <summary>
            Return true if the value is greater than or equal to the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.LessThanOrEqualTo">
            <summary>
            Return true if the value is less than or equal to the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.Contains">
            <summary>
            Return true if the string representation of the value contains the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.DoesNotContain">
            <summary>
            Return true if the string representation of the value does not contain the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.BeginsWith">
            <summary>
            Return true if the string representation of the value begins with the operator parameter.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionOperator.EndsWith">
            <summary>
            Return true if the string representation of the value ends with the operator parameter.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Condition">
            <summary>
            Represents a condition within a <see cref="T:C1.Win.C1TrueDBGrid.ConditionFilter"/>.
            </summary>
            <remarks>
            Each <see cref="T:C1.Win.C1TrueDBGrid.ConditionFilter"/> contains up to two conditions that
            can be combined with 'And' or 'Or' operators.
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Condition.Clear">
            <summary>
            Clears this condition by setting the <see cref="P:C1.Win.C1TrueDBGrid.Condition.Operator"/> to 'None' 
            and the <see cref="P:C1.Win.C1TrueDBGrid.Condition.Parameter"/> to null.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Condition.Apply(System.Object)">
            <summary>
            Applies the condition to a given value.
            </summary>
            <param name="value">Value to test.</param>
            <returns>True if the value satisfies the condition, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Condition.IsActive">
            <summary>
            Gets a value that indicates whether the condition is active.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Condition.Operator">
            <summary>
            Gets or sets the operator used by this condition.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Condition.Parameter">
            <summary>
            Gets or sets the parameter used by this condition.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ConditionFilterEditor">
            <summary>
            Represents a control used to edit a <see cref="T:C1.Win.C1TrueDBGrid.ConditionFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ConditionFilterEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ConditionFilterEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ConditionFilterEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FilterEditorForm">
            <summary>
            Represents a form that contains filter editor controls.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.FilterEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.FilterEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.FilterEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.AllowFiltering">
            <summary>
            Specifies the type of filter to be used for a <see cref="!:Column"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AllowFiltering.Default">
            <summary>
            Filter column using a <see cref="T:C1.Win.C1TrueDBGrid.ColumnFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AllowFiltering.ByValue">
            <summary>
            Filter column by values using a <see cref="T:C1.Win.C1TrueDBGrid.ValueFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AllowFiltering.ByCondition">
            <summary>
            Filter column by conditions using a <see cref="T:C1.Win.C1TrueDBGrid.ConditionFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AllowFiltering.Custom">
            <summary>
            Filter column using a filter specified by the caller.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AllowFiltering.None">
            <summary>
            Do not provide a filter for this column.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GridFilterHandler">
            <summary>
            GridFilterHandler
            Handles cell/range selection for the FlexGridBase class
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ValueFilter">
            <summary>
            Represents a filter based on a set of values.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueFilter.Reset">
            <summary>
            Resets the filter making it inactive.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueFilter.Apply(System.Object)">
            <summary>
            Applies the filter to a value.
            </summary>
            <param name="value">Value to be filtered.</param>
            <returns>True if the <paramref name="value"/> satisfies the filter; False otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueFilter.GetEditor">
            <summary>
            Gets the editor used to modify the filter at run time.
            </summary>
            <returns>A <see cref="T:C1.Win.C1TrueDBGrid.IC1ColumnFilterEditor"/> that is used to edit the filter at run time.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueFilter.ShowValues">
            <summary>
            Gets or sets an array with the values that should be included in the output.
            </summary>
            <remarks>
            Setting this property to null causes the filter to include all values in the output.
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueFilter.IsActive">
            <summary>
            Gets or sets a value that determines whether the filter is active.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ValueFilterEditor">
            <summary>
            Represents a control used to edit a <see cref="T:C1.Win.C1TrueDBGrid.ValueFilter"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ValueFilterEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueFilterEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueFilterEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ValueSet">
            <summary>
            Represents a collection of unique values of type <b>T</b>.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1TrueDBGrid.ValueSet"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.#ctor(System.Collections.Generic.IEqualityComparer{System.Object})">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1TrueDBGrid.ValueSet"/>.
            </summary>
            <param name="comparer">The comparer to use when comparing keys.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.Add(System.Object,System.Boolean)">
            <summary>
            Adds a value to the collection if not already present.
            </summary>
            <param name="value">Value to add to the collection.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="value">Value to look for.</param>
            <returns>True if the collection contains the value.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.Sort">
            <summary>
            Sorts the elements in the collection.
            </summary>
            <remarks>
            This method assumes the elements support the <see cref="T:System.IComparable"/> interface.
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.ToList">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from this collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> that contains the objects in this collection.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> that iterates though the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that iterates though the collection.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> that iterates though the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that iterates though the collection.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueSet.System#Collections#Generic#IComparer{System#Object}#Compare(System.Object,System.Object)">
            <summary>
            Compare two elements (for use in sorting; nulls appear last)
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueSet.Count">
            <summary>
            Gets the number of objects in the collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.BaseControls.MaskedTextBox">
            <summary>
            Summary description for MaskedTextBox.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.BaseControls.MaskedTextBox.IsValid">
            <summary>
            Returns true if the current control content is valid
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.BaseControls.MaskedTextBox.CharFromPos(System.Drawing.Point)">
            <summary>
            Returns the character nearest the given point.
            </summary>
            <param name="pt"></param>
            X,Y coordinate in client space
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.BaseControls.MaskedTextBox.Content">
            <summary>
            Content property:
            Gets the non-literal characters in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.BaseControls.MaskedTextBox.PlaceHolder">
            <summary>
            PlaceHolder property:
            Gets or sets the characters used to show spaces where user is supposed to type.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.BaseControls.MaskedTextBox.CurrentLine">
            <summary>
            CurrentLine property:
            Gets the number of the line where the cursor is.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.BaseControls.MaskedTextBox.LineCount">
            <summary>
            LineCount property:
            Gets the number of lines in the control.
            </summary>
        </member>
        <member name="T:C1.Util.Win32">
            <summary>
            Summary description for WinUser.
            </summary>
            CAUTION: Use this attribute with extreme care. Incorrect use can create security weaknesses.
            This attribute can be applied to methods that want to call into native code without incurring 
            the performance loss of a run-time security check in doing so. The assertion and subsequent 
            demands performed when calling unmanaged code is omitted at run time, resulting in substantial 
            performance savings. Only code that has been granted the UnmanagedCode permission can do this 
            (see SecurityPermissionFlag). Using this attribute in a class or module applies to 
            all contained methods.
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BaseGrid.Frame">
             <summary>
             Summary description for BaseGridFrame.
             </summary>
            
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BaseGrid.Frame.m_serializing">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.#ctor">
            <summary>
            Ctor for the split container class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBindingContextChanged(System.EventArgs)">
            <summary>
            Raised when the Binding Context changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.BeginInit">
            <summary>
            ISupportInitialize interface.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.EndInit">
            <summary>
            ISupportInitialize interface.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.InitLayout">
            <summary>
            Called after the control has been added to another container.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnVisibleChanged(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.initializeStyles">
            <summary>
            Initializes root and named styles.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnSizeChanged(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnResize(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBackColorChanged(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFontChanged(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnLeave(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnLostFocus(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnGotFocus(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnEnter(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.IsInputChar(System.Char)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.echoKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.saveImages">
            <summary>
            Helper method for serializing images.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.reinitViews">
            <summary>
            Recomputes the sizes of the splits based on the client size of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnCursorChanged(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnMouseLeave(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnClick(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnDoubleClick(System.EventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame._drawCaption(System.Windows.Forms.PaintEventArgs)">
            <summary>
            painting
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Inherited from Control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.setControlDirty">
             <summary>
             Style listeners
             </summary>
             <returns></returns>
            
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.CreateView">
            <summary>
            Creates the view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.CreateView(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            Creates the view.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.SetDataSource(System.Object,System.Windows.Forms.BindingMemberInfo,System.Boolean)">
            <summary>
            Called when the datasource changes.
            </summary>
            <param name="datasource">The new datasource.</param>
            <param name="newDisplayMember">The new datamember.</param>
            <param name="force">True to force a new binding.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.GetFirstVisibleRow">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.GetVisibleRowCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.ScrollToRow(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.DataSourceDisposed(System.Object,System.EventArgs)">
            <summary>
            notifications from the datasource
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <summary>
                Handle the Disposed event from the data source - typically used at design time
                so the we know that the data source has been removed from the design surface
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.CurrencyItemChanged(System.Object,System.Windows.Forms.ItemChangedEventArgs)">
             <summary>
                 Handle the Item Changed Event on the CurrencyManager
             </summary>
            
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.CurrentPositionChanged(System.Object,System.EventArgs)">
            <summary>
                Handle the Position Changed Event on the CurrencyManager
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.canCreateSplits">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.ShouldSerializeCaptionHeight">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.ShouldSerializeRowHeight">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.ShouldSerializeSplitDividerSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BaseGrid.Frame._ambientVisualStyleMonitor">
            <summary>
            Provides ambient behavior for the VisualStyle property.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.ResetVisualStyle">
            <summary>
            Resets <see cref="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.VisualStyle"/> to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.ShouldSerializeVisualStyle">
            <summary>
            Tests whether <see cref="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.VisualStyle"/> should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.VisualStyle"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:VisualStyleChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnAfterColUpdate(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised after the datasource has been updated for a column.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnAfterDelete(System.EventArgs)">
            <summary>
            Raised after a row has been deleted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnAfterInsert(System.EventArgs)">
            <summary>
            Raised after a row has been inserted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnAfterUpdate(System.EventArgs)">
            <summary>
            Raised after a row has been updated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBeforeColUpdate(C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs)">
            <summary>
            Raised before a column has been updated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBeforeDelete(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raised before a row is deleted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBeforeInsert(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raised before a row is inserted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBeforeUpdate(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raised before a row is updated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnColResize(C1.Win.C1TrueDBGrid.ColResizeEventArgs)">
            <summary>
            Raised when a column has been resized.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnHeadClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised when a column header has been clicked.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFootClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised when a column footer has been clicked.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnOwnerDrawCell(C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs)">
            <summary>
            Raised when a cell has to be rendered.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnOwnerDrawCellPrint(C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs)">
            <summary>
            Raised when a cell has to be printed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnOwnerDrawPageHeader(C1.Win.C1TrueDBGrid.OwnerDrawPageEventArgs)">
            <summary>
            Raised when Page header needs to be printed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnOwnerDrawPageFooter(C1.Win.C1TrueDBGrid.OwnerDrawPageEventArgs)">
            <summary>
            Raised when a Page footer needs to be printed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBeforeRowColChange(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raised before a row or column currency is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnRowColChange(C1.Win.C1TrueDBGrid.RowColChangeEventArgs)">
            <summary>
            Raised after a row or column currency has been changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnRowResize(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raised before a row is resized.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.On_Scroll(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raised when the grid scrolls.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnSelChange(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raised when a selection has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnSplitChange(System.EventArgs)">
            <summary>
            Raised when split currency has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnSplitRemoved(System.EventArgs)">
            <summary>
            Raised when a split has been removed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnChange(System.EventArgs)">
            <summary>
            Raised when the grids cell content has been modified.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnUnboundColumnFetch(C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs)">
            <summary>
            Raised to fetch data for an unbound column.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnUnboundColumnUpdated(C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs)">
            <summary>
            Raised when an unbound column has been updated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnAfterColEdit(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised after a column has been edited.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBeforeColEdit(C1.Win.C1TrueDBGrid.BeforeColEditEventArgs)">
            <summary>
            Raised before a column edit.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnColEdit(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised when a column has been edited.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFirstRowChange(C1.Win.C1TrueDBGrid.SplitEventArgs)">
            <summary>
            Raised when the top row has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnLeftColChange(C1.Win.C1TrueDBGrid.SplitEventArgs)">
            <summary>
            Raised when the left column has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFormatText(C1.Win.C1TrueDBGrid.FormatTextEventArgs)">
            <summary>
            Raised when a cell value needs custom formatting.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnButtonClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised when a button in a cell has been clicked.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnComboSelect(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised when a value in the combobox has been selected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnValueItemError(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised when a value item is selected that's not in the ValueItems collection.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFetchCellStyle(C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs)">
            <summary>
            Raised when a custom style is to be used for rendering a cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFetchGroupCellStyle(C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs)">
            <summary>
            Raised when a custom style is to be used for renderind a grouped cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFetchRowStyle(C1.Win.C1TrueDBGrid.FetchRowStyleEventArgs)">
            <summary>
            Raised when a custom style is to be used for a row.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.On_AddNew(System.EventArgs)">
            <summary>
            Raised when a new row is added.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnColMove(C1.Win.C1TrueDBGrid.ColMoveEventArgs)">
            <summary>
            Raised when a column is dragged.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFetchCellTips(C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs)">
            <summary>
            Raised when a cell tip is to be displayed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.On_Init(System.EventArgs)">
            <summary>
            Raised when the grid is initialized.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnDataSourceChanged(System.EventArgs)">
            <summary>
            Raised when the datasource is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnCollapse(C1.Win.C1TrueDBGrid.BandEventArgs)">
            <summary>
            Raised when a band is collasped in a hierarchical grid.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnExpand(C1.Win.C1TrueDBGrid.BandEventArgs)">
            <summary>
            Raised when a band is expanded in a hierarchical grid.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnGroupColMove(C1.Win.C1TrueDBGrid.GroupColMoveEventArgs)">
            <summary>
            Raised when a grouped column is moved.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnGroupHeadClick(C1.Win.C1TrueDBGrid.GroupColEventArgs)">
            <summary>
            Raised when a column header in the grouping area is clicked.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFetchScrollTips(C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs)">
            <summary>
            Raised when scroll tips are to be displayed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFilterChange(System.EventArgs)">
            <summary>
            Raised when a filter condition has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFilterButtonClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raised when a button in the filter bar is clicked.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBeforeOpen(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raised before a child grid is displayed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnBeforeClose(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Rasied before a child grid is closed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnSort(C1.Win.C1TrueDBGrid.FilterEventArgs)">
            <summary>
            Raised when the datasource is sorted by clicking the column header.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnFilter(C1.Win.C1TrueDBGrid.FilterEventArgs)">
            <summary>
            Raised when AllowFilter is false.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnAfterFilter(C1.Win.C1TrueDBGrid.FilterEventArgs)">
            <summary>
            Raised after the datasource has been filtered.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnAfterSort(C1.Win.C1TrueDBGrid.FilterEventArgs)">
            <summary>
            Raised after the datasource has been sorted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnError(C1.Win.C1TrueDBGrid.ErrorEventArgs)">
            <summary>
            Raised when the grid encounters an error through the UI.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnGroupText(C1.Win.C1TrueDBGrid.GroupTextEventArgs)">
            <summary>
            Raised when custom values are to be used for the group text.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnGroupAggregate(C1.Win.C1TrueDBGrid.GroupTextEventArgs)">
            <summary>
            Raised when custom aggregates are used for a grouped grid.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.OnGroupInterval(C1.Win.C1TrueDBGrid.GroupIntervalEventArgs)">
            <summary>
            Raised when custom group intervals are used for a grouped grid.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.SetDataBinding(System.Object,System.String,System.Boolean)">
            <summary>
            Binds the grid at runtime
            </summary>
            <param name="dataSource">Source of the data</param>
            <param name="dataMember">The table to bind to within the object returned by the DataSource property</param>
            <param name="holdFields">True to preserve design time layout</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.SetDataBinding(System.Object,System.String)">
            <summary>
            Binds the grid at runtime
            </summary>
            <param name="dataSource">Source of the data</param>
            <param name="dataMember">The table to bind to within the object returned by the DataSource property</param>
            <remarks>The call to SetDataBinding(object dataSource, string dataMember) assumes false for the holdFields arguments.</remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.SetDataBinding">
            <summary>
            Configures the grid for use without a datasource.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.AddRow(System.String)">
            <summary>
            Adds a row to an unbound grid.
            </summary>
            <param name="data">The data used to populate the new row.  Column data is delimited by ';' char.</param>
            <returns>The index of the row that was added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.AddRow(System.String,System.Char)">
            <summary>
            Adds a row to an unbound grid.
            </summary>
            <param name="data">The data used to populate the new row.</param>
            <param name="separator">Character used to separate the data fields.</param>
            <returns>The index of the row that was added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.AddRows(System.Int32)">
            <summary>
            Adds the number of given rows to an unbound grid.
            </summary>
            <param name="count">The number of rows to add.</param>
            <returns>The index of the first row that was added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.Delete(System.Int32)">
            <summary>
            Deletes the given row from an unbound grid.
            </summary>
            <param name="index">The index of the row to remove.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes a range of rows from an unbound grid.
            </summary>
            <param name="index">The starting index of the row to remove.</param>
            <param name="count">The number of rows to remove.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.Frame.NewRow">
            <summary>
            Creates a new System.Data.DataRow with the same schema as the unbound grid.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value></value>
            <returns>
            The default <see cref="T:System.Drawing.Size"/> of the control.
            </returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.CreateParams">
            <Summary>
                Allows us to set the borderstyle.
            </Summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.RowPosition">
            <summary>
            Gets the current position from the currency manager.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.BorderStyle">
            <summary>
            Gets or sets the border for the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.AllowInactiveStyle">
            <summary>
            Gets or sets a value indicating whether the InactiveStyle is applied to the grid when it loses focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.AllowSort">
            <summary>
            Gets or sets a value indicating the ability of the grid to automatically sort data when a column header is clicked.
            </summary>
            <remarks>
            <para>If True, and if the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataView" /> property is set to GroupBy, the grid will automatically filter column data upon grouping action.</para>
            <para>If False, the grid will fire the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Sort" /> event.</para>
            <para>If the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataView" /> property is set to Group By and the user attempts to drag a column header into the grouping area, the grid will automatically sort the column data.</para>
            <para>If False, the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Sort" /> event allows the application to sort the data.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.AllowFilter">
            <summary>
            Gets or sets a value indicating the ability of the grid to automatically filter data.
            </summary>
            <remarks>
            <para>If True, and if the Filter Bar is active, the grid will automatically filter data.</para>
            <para>If False, the grid will fire the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Filter" /> event.</para>
            <para>If the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterBar" /> property is true and the user attempts to filter column data, the grid will automatically filter the column data according to the value in the Filter Bar.</para>
            <para>If False, the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Filter" /> event allows the application to filter the data.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.Caption">
            <summary>
            Gets or sets the grid's caption.
            </summary>
            <remarks>
            <para>For a <see cref="T:C1.Win.C1TrueDBGrid.C1TrueDBGrid" /> control, this property determines the text displayed in the caption bar at the top of the grid.</para>
            <para>Setting the Caption property to an empty string for a <see cref="T:C1.Win.C1TrueDBGrid.C1TrueDBGrid" /> control hides its caption bar.</para>
            <para>For a <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn" /> object, this property determines the text displayed in the object's heading area.</para>
            <para>Setting the Caption property to an empty string for a <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn" /> object clears the text in the column's heading area but does not hide the heading. Column captions are only displayed if the grid's <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColumnHeaders" /> property is set to True.</para>
            <para>Setting the Caption property to an empty string for a <see cref="T:C1.Win.C1TrueDBGrid.Split"/> object hides the heading area, even if other splits have non-empty captions.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.CaptionHeight">
            <summary>
            Gets or sets the height of the grid's caption.
            </summary>
            <remarks>This property requires that the <see cref="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.Caption" /> property of the grid has a value.</remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.RowHeight">
            <summary>
            Gets or sets the height of grid rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.DataMember">
            <summary>
            Gets or sets the specific data member in a multimember data source that the grid binds to.
            </summary>
            <remarks>
            <para>This property returns or sets the name of the data member used to populate the grid. Typically, a data member represents a database table or query.</para>
            <para>A bound <see cref="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.DataSource" /> can expose multiple sets of data that consumers can bind to. Each set of data is called a data member, and is identified by a unique string.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.DataSource">
            <summary>
            Gets or sets the source containing a list of values used to populate the items within the control.
            </summary>
            <remarks>The DataSource property specifies the list of values used to bind a <see cref="T:C1.Win.C1TrueDBGrid.C1TrueDBGrid" /> or <see cref="T:C1.Win.C1TrueDBGrid.C1TrueDBDropdown" /> control.</remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.DoubleBuffer">
            <summary>
            Gets or sets a value indicating whether the control should use an off-screen buffer when painting to redue flicker.
            </summary>
            <remarks>
            <para>Setting this value to False may cause the grid to flicker when the control is painting.</para>
            <para>You may want to set DoubleBuffer to False to increase performance when deploying applications that run on terminal servers.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.FlatStyle">
            <summary>
            Gets or sets the general appearance of 3D elements for the entire grid.  
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.Rows">
            <summary>
            Gets the DataRowCollection for an unbound grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.ScrollTrack">
            <summary>
            Gets or sets a value that controls how the grid scrolls when the scroll thumb is moved.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.PropBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.Images">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.SplitDividerSize">
            <summary>
            
            </summary>
            <value>The size of the split divider.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.RowCount">
            <summary>
            Gets the number of rows in an unbound grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.UseColumnStyles">
            <summary>
            Gets or sets a value indicating whether Style information is applied from the datasource.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.BaseGrid.Frame.VisualStyleChanged">
            <summary>
            Occurs when visual style property has been changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.VisualStyle">
            <summary>
            Gets or sets a value that determines the overall appearance of the control.
            </summary>
            <remarks>
            <para>This property allows you to quickly customize the appearance of the grid so
            it matches the appearance of your application.</para>
            <para>The settings available include <b>System</b>, various Microsoft Office color 
            schemes, and <b>Custom</b>, which relies on the controls standard styles and appearance 
            properties.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.Renderer">
            <summary>
            Gets or sets the renderer used to render visual styles.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BaseGrid.View">
            <summary>
            Base class for splits.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BaseGrid.View.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BaseGrid.View.m_colSize">
            <summary>
            moving sizing info
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BaseGrid.View._internalTextEditor">
            <summary>
            editor
            </summary>
            
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.#ctor(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            creates a View from another view
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.Dispose">
            <summary>
            Releases the resources used by the view.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the view.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ToString">
            <summary>
            Returns the string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.GetCellStyle(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the style associated with a given cell.
            </summary>
            <param name="row">Row to fetch the style for.</param>
            <param name="col">Column to fetch the style for.</param>
            <param name="celltext">The text of the cell.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ShouldDrawLines(System.Int32,System.Int32)">
            <summary>
            Returns a value indicating whether a line should be rendered for a given row and column.
            </summary>
            <param name="row">The row index.</param>
            <param name="col">The column index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.needsVertSB">
            <summary>
            scrollbar helpers
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.OnScrollBarVisible(System.Object,System.Boolean)">
            <summary>
            Raised when the scrollbar visibility changes.
            </summary>
            <param name="sb">The scrollbar object.</param>
            <param name="visible">The new visible state.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.newLeft(System.Int32)">
            <summary>
            
            </summary>
            <param name="newleft"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ClipRowRect(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ClickButton(System.Drawing.Point)">
            <summary>
            mouse handlers
            </summary>
            <param name="p"></param>
            
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.BeginVerticalResizing(System.Drawing.Point)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.beginHorizontalResizing(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ThreadSafeAutoScroll">
            <summary>
            Scrolls the view either right or left during column move operations.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.AutoScroll(System.Object,System.Timers.ElapsedEventArgs)">
            <param name="myObject"></param>
            <param name="myEventArgs"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.InsertionPos(System.Int32,System.Drawing.Point)">
            <summary>
            returns true if we displaying the insertion point on the leftside of the rect
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.setAutoSizeRowHeight(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.AutoSizeRow(System.Int32)">
            <summary>
            autosizes the height of the given row
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.displayCollectionAdded(C1.Win.C1TrueDBGrid.C1DisplayColumnCollection)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.displayCollectionRemoved(C1.Win.C1TrueDBGrid.C1DisplayColumnCollection,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="idx"></param>
            <param name="val"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.displayCollectionRemoveComplete(C1.Win.C1TrueDBGrid.C1DisplayColumnCollection)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.displayCollectionCleared(C1.Win.C1TrueDBGrid.C1DisplayColumnCollection)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.displayCollectionClearedComplete(C1.Win.C1TrueDBGrid.C1DisplayColumnCollection)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ShouldExit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ExitEdit">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.RepositionEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.RowVisibilityChanged(C1.Win.C1TrueDBGrid.BaseGrid.ViewRow)">
            <summary>
            
            </summary>
            <param name="vr"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.AddRow(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.DeleteRows">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.MoveRow(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="oldrow"></param>
            <param name="newrow"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ClipDataRect(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.CheckMousePoint(System.Drawing.Point)">
            <summary>
            checks to see if the mouse is over a 3d element
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.OnHeadingStyleChanged(System.Object,C1.Win.C1TrueDBGrid.Styles.GridStyleEventArgs)">
            <summary>
            Style listeners
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.OnDisplayColumnChanged(C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum,C1.Win.C1TrueDBGrid.C1DisplayColumn)">
            <summary>
            Called when C1DisplayColumn properties have been changed.
            </summary>
            <param name="what"></param>
            <param name="dc"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.OnAddNewRow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.HasInternalCombo">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.HasCombo">
             <summary>
            
             </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.getDropDown">
             <summary>
            
             </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.CreateInternalDropdown">
            <summary>
            creates a datasource from the valueitems so for the internal combobox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.RemoveCol(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.AddCol(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ExpandGroupRow(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.CollapseGroupRow(System.Int32)">
            <summary>
            
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.UpdateGroupList(C1.Win.C1TrueDBGrid.C1DisplayColumnCollection)">
            <summary>
            
            </summary>
            <param name="groupings"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ClearGroupList">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.HasRowError(System.Int32)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.HasColError(System.Int32,C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.ComputeFixedArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.View.SetFlatMode(C1.Win.C1TrueDBGrid.FlatModeEnum)">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.View.ClientRect">
             <summary>
             potential properties
             </summary>
            
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.View.BorderSide">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.View.BorderStyle">
            <summary>
            Gets or sets the type of border rendered for a split.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.baseTypeConverter">
            <summary>
            Base class for typeconverter.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.baseTypeConverter.ObjFromString(System.String)">
            <summary>
            Returns an object from it's string representation.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.baseTypeConverter.StringFromObj(System.Object)">
            <summary>
            Returns a string representation from a given object.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.baseTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the source type is string.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.baseTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true of the type of string.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.baseTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overloaded. Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.baseTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overloaded. Converts the given value object to the specified type.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BitmapTypeConverter">
            <summary>
            Typeconverter for bitmaps.  Used for serialization.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BitmapTypeConverter.ObjFromString(System.String)">
            <summary>
            Override.  Returns the object given a string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BitmapTypeConverter.StringFromObj(System.Object)">
            <summary>
            Override.  Returns a string given an object.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GenericTypeConverter">
            <summary>
            Expandable object converter that doesn't handle strings.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GenericTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overloaded. Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GenericTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overloaded. Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.DataTypeConverter">
            <summary>
            GridDataTypeConverter
            Uses a drop-down list box to select values of type Type
            (e.g. Column.DataType property).
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColumnMergeTypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ColumnMergeTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.ColumnMergeTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ColumnMergeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="ctx">The CTX.</param>
            <param name="ci">The ci.</param>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BaseGrid.FlatModeHelper">
            <summary>
            Helper class to manage FlatMode = Popup.  Where 3D elements,
            col headings, buttons, record selectors are drawn flat except when
            the mouse is over them.  Then they take on a 3D appearance
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.RelationState">
            <summary>
            Defined the relationship of a column.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RelationState.None">
            <summary>
            Column is not related.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RelationState.Parent">
            <summary>
            Column is the parent.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RelationState.Child">
            <summary>
            Column is the child.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1DataColumn">
            <summary>
            Represents a column that defines binding information for the datasource.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of this object.
            </summary>
            <param name="caption">The column caption.</param>
            <param name="datatype">The data type.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.#ctor(System.String,System.String,System.Type)">
            <summary>
            Creates a new instance of this object.
            </summary>
            <param name="caption">The column caption.</param>
            <param name="datafield">The field from the data source.</param>
            <param name="datatype">The data type.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.ResetButtonPicture">
            <summary>
            Resets ButtonPicture to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.ResetFilterButtonPicture">
            <summary>
            Resets FilterButtonPicture to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.CellText(System.Int32)">
            <summary>
            Gets the display value for a cell in a given row.
            </summary>
            <param name="row">The row to fetch.</param>
            <returns>The display value.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.CellValue(System.Int32)">
            <summary>
            Gets the cell value for a given row.
            </summary>
            <param name="row">The row to fetch.</param>
            <returns>The underlying data from the data source.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.Refresh">
            <summary>
            Invalidate the current column in all visible rows.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.RefreshCell">
            <summary>
            Invalidates the current cell. 
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.RefreshCell(System.Int32)">
            <summary>
            Invalidates the cell at the given row.
            </summary>
            <param name="row">Row to invalidate.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.Refetch">
            <summary>
            Repopulate the entire grid from the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.RefetchCell">
            <summary>
            Repopulates the current cell from the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumn.RefetchCell(System.Int32)">
            <summary>
            Repopulates the specified data from the data source.
            </summary>
            <param name="row">The row to refetch.</param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.Level">
            <summary>
            Gets or sets the level of this column in a hierarchical data source.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.Relation">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.RelationState">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.Aggregate">
            <summary>
            Gets or sets the type of aggregate computed for a grouped row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.ButtonPicture">
            <summary>
            Gets or sets the image shown in a drop-down button in a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.buttonPicIdx">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.Caption">
            <summary>
            Gets or sets the text in the column header.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.DataChanged">
            <summary>
            Gets or sets a value indicating whether data in this column has been modified.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.DataField">
            <summary>
            Gets or sets the database field name for a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.DataType">
            <summary>
            Gets or sets the type of object stored for a column. 
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.DataTypeInternal">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.DataWidth">
            <summary>
            Gets or sets the maximum number of characters which may be entered for cells in this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.DefaultValue">
            <summary>
            Gets or sets the default value for a column when a new row is added by the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.EditMask">
            <summary>
            Gets or sets the edit mask for a column.
            </summary>
            <remarks>
                <para>The <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.EditMask"/> property allows an input mask to be specified for automatic input formatting and validation. The mask syntax is similar to the one used by Microsoft Access. Setting the input mask for a column will prevent the user from entering any information in the cell that is not in the format of the <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.EditMask"/> string.</para>
                <para>The <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.EditMask"/> must be a string composed of the following symbols:</para>
                <para><b>Wildcards</b></para>
                <list type="table">
                  <item><term>0</term><description>Digit.</description></item>
                  <item><term>9</term><description>Digit or space.</description></item>
                  <item><term>#</term><description>Digit or sign.</description></item>
                  <item><term>L</term><description>Letter.</description></item>
                  <item><term>?</term><description>Letter or space.</description></item>
                  <item><term>A</term><description>Letter or digit.</description></item>
                  <item><term>a</term><description>Letter, digit or space.</description></item>
                  <item><term>&amp;</term><description>Any character.</description></item>
                </list>
                <para><b>Localized characters</b></para>
                <list type="table">
                  <item><term>.</term><description>Localized decimal separator.</description></item>
                  <item><term>,</term><description>Localized thousand separator.</description></item>
                  <item><term>:</term><description>Localized time separator.</description></item>
                  <item><term>/</term><description>Localized date separator.</description></item>
                </list>
                <para><b>Command characters</b></para>
                <list type="table">
                  <item><term>\</term><description>Next character is taken as a literal.</description></item>
                  <item><term>&gt;</term><description>Translate letters to uppercase.</description></item>
                  <item><term>&lt;</term><description>Translate letters to lowercase.</description></item>
                </list>
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.EditMaskUpdate">
            <summary>
            Gets or sets a value indicating whether literal characters in the edit mask are stored to the underlying data source.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.Editor">
            <summary>
            Gets or sets the editor that is used to edit cell data.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.EnableDateTimeEditor">
            <summary>
            Gets or sets a value indicating whether a DateTime picker is used to edit this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterButtonPicture">
            <summary>
            Gets or sets the image shown as the column's filter button.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.filterButtonPicIdx">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterKeys">
            <summary>
            Gets or sets the key used to initiate the filtering operation as the user types in the filterbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FooterText">
            <summary>
            Gets or sets the text displayed in the column footer.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterEscape">
            <summary>
            Gets or sets the characters that should be ignored when applying the filter criteria to the datasource.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterOperator">
            <summary>
            Gets or sets the operator that is used for a filter expression.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterText">
            <summary>
            Gets or sets the data associated with the value of the filter for a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterWatermark">
            <summary>
            Specifies the text that is rendered in an empty cell in the Filterbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterDropdown">
            <summary>
            Gets or sets a value indicating whether a drop-down list is displayed in the filter cell that lists all the values of the field.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterDropdownText">
            <summary>
            Gets or sets the value indicating All when the FilterDropdown property is True.
            </summary>
            <value>The filter dropdown text.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterMultiSelect">
            <summary>
            Gets or sets a value indicating whether multiple values can be selected in the filter drop-down list.
            </summary>
            <remarks>If FilterMultiSelect is true then the user is able to enter several values using comma separator.</remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterSeparator">
            <summary>
            Gets or sets a character used to separate values in the filter drop-down list when multiple values are selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterApplyText">
            <summary>
            Gets or sets the text of Apply button in the filter drop-down list when the FilterMultiSelect property is True.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterCancelText">
            <summary>
            Gets or sets the text of Cancel button in the filter drop-down list when the FilterMultiSelect property is True.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterClearText">
            <summary>
            Gets or sets the text of Clear button in the filter drop-down list when the FilterMultiSelect property is True.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.ImeMode">
            <summary>
            Specifies the ImeMode used to edit this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.NumberFormat">
            <summary>
            Gets or sets the formatting string for a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.ValueItems">
            <summary>
            Gets the <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.ValueItems"/> object for this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.Text">
            <summary>
            Gets or sets the display value for the current cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.Value">
            <summary>
            Gets or sets the value of the current cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.Tag">
            <summary>
            Gets or sets a user defined objects associated with this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.DropDown">
            <summary>
            Gets or sets a user defined object associated with this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.SortDirection">
            <summary>
            Gets or sets the state of the sorting glyph in the column caption bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.GroupInfo">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.GroupInfo"/> associated with this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumn.DropDownCtl">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.DropDownTypeEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownTypeEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownTypeEditor.OnListBoxClick(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GridEditorDatePicker">
            <summary>
            Summary description for GridEditor.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Style">
            <summary>
            Represents an object used to render grid elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.Dispose">
            <summary>
            Called when the class is being disposed.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.Render(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Renders the given string using the style properties.
            </summary>
            <param name="g">Graphics object to render too.</param>
            <param name="r">Rectangle to render in.</param>
            <param name="s">String to render.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.Render(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,C1.Win.C1TrueDBGrid.Styles.DrawCellFlags)">
            <summary>
            Renders the given string using the style properties.
            </summary>
            <param name="g">Graphics object to render too.</param>
            <param name="r">Rectangle to render in.</param>
            <param name="s">String to render.</param>
            <param name="flags">The draw flags.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetBackColor">
            <summary>
            Reset BackColor to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetForeColor">
            <summary>
            Resets ForeColor to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetFont">
            <summary>
            Resets Font to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetHorizontalAlignment">
            <summary>
            Resets HorizontalAlignment to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetVerticalAlignment">
            <summary>
            Resets VerticalAlignment to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetBackgroundPictureDrawMode">
            <summary>
            Resets BackgroundPictureDrawMode to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetBackgroundImage">
            <summary>
            Resets the BackgroundImage to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetForeGroundPicturePosition">
            <summary>
            Resets ForGroundImagePosition to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetForegroundImage">
            <summary>
            Resets ForegroundImage to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetLocked">
            <summary>
            Resets Locked to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetWrapText">
            <summary>
            Resets WrapText to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.ResetTrimming">
            <summary>
            Resets Trimming to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Style.Reset">
            <summary>
            Resets all specialized attributes.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.Borders">
            <summary>
            Gets the <see cref="T:C1.Win.C1TrueDBGrid.GridBorders"/> associated with this Style.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.BackColor">
            <summary>
            Gets or sets the background color associated with a Style.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.BackColor2">
            <summary>
            Gets or sets the background color associated with a Style.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled when a linear gradient style is rendered.
            </summary>
            <value><c>true</c> if gamma correction is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.GradientMode">
            <summary>
            Gets or sets the direction of a linear gradient.
            </summary>
            <value>The gradient mode.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.Alpha">
            <summary>
            Gets or sets the alpha component when the style is rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.ForeColor">
            <summary>
            Gets or sets the foreground color associated with a Style.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.Font">
            <summary>
            Gets or sets the Font associated with a Style.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.VerticalAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.BackgroundPictureDrawMode">
            <summary>
            Gets or sets the rendering method for a <see cref="P:C1.Win.C1TrueDBGrid.Style.BackgroundImage"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.BackgroundImage">
            <summary>
            Gets or sets the background image associated with a Style.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.ForeGroundPicturePosition">
            <summary>
            Gets or sets the position that the ForGroupImage is rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.ForegroundImage">
            <summary>
            Gets or sets the foreground image associated with a style.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.Locked">
            <summary>
            Gets or sets a value indicating whether data entry is permitted for the assocated object.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.WrapText">
            <summary>
            Gets or sets a value indicating whether text is word-wrapped when it does not fit into a layout shape.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.Name">
            <summary>
            Gets or sets the name of the Style.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.Trimming">
            <summary>
            Gets or sets the trim characters for a string that does not completely fit into a layout shape.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.Padding">
            <summary>
            Gets or sets the spacing between cell content and its edges.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.me">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.backimgIdx">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Style.foreimgIdx">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GridBorders">
            <summary>
            Represents the border in a <see cref="T:C1.Win.C1TrueDBGrid.Style"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GridBorders.BorderType">
            <summary>
            Gets or sets the type of border.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GridBorders.Left">
            <summary>
            Gets or sets the width of the left border.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GridBorders.Right">
            <summary>
            Gets or sets the width of the right border.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GridBorders.Top">
            <summary>
            Gets or sets the width of the top border.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GridBorders.Bottom">
            <summary>
            Gets or sets the width of the bottom border.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GridBorders.Color">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1EmbeddedEditor">
            <summary>
            Summary description for GridEditorLateBind.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ValueItems">
            <summary>
            Represents an object that defines how cells are rendered.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItems.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.AnnotatePicture">
            <summary>
            Gets or sets a value indicating whether both Value and Display Value are rendenered when Display value is an image.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.CycleOnClick">
            <summary>
            Gets or sets a value indicating whether users can cycle through <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/> by clicking on a cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.DefaultItem">
            <summary>
            Gets or sets the index of the default <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/> or -1 for no default.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.MaxComboItems">
            <summary>
            Gets or sets the maximum number of visible rows in the combobox.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.Presentation">
            <summary>
            Gets or sets the method in which cells are rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.Translate">
            <summary>
            Gets or sets a value indicating whether data values are translated using matching <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.Validate">
            <summary>
            Gets or sets a value indicating whether values entered by the user must match on of the <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.Values">
            <summary>
            Gets the collection of Value/Display Value pairs.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItems.internalValues">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ValueItemCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.ValueItemCollection"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItemCollection.Add(C1.Win.C1TrueDBGrid.ValueItem)">
            <summary>
            Adds a <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/> to the end of the collection.
            </summary>
            <param name="vi">The ValueItem to add.</param>
            <returns>The index at which the ValueItem has been added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItemCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItemCollection.Insert(System.Int32,C1.Win.C1TrueDBGrid.ValueItem)">
            <summary>
            Inserts a <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the ValueItem should be inserted.</param>
            <param name="vi">The ValueItem to insert.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItemCollection.IndexOf(C1.Win.C1TrueDBGrid.ValueItem)">
            <summary>
            Gets the index of the specified <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/>.
            </summary>
            <param name="vi">The ValueItem to search.</param>
            <returns>The index of the ValueItem.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified <see cref="T:C1.Win.C1TrueDBGrid.ValueItem"/> from the collection at the specified index.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ValueItem">
            <summary>
            Represents an object that defines a value/display value pair.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItem.#ctor">
            <summary>
            Initializes a new instance of the ValueItem class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItem.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the ValueItem class.
            </summary>
            <param name="value">Underlying data value.</param>
            <param name="displayValue">Translated value.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.ValueItem.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItem.Value">
            <summary>
            Gets or sets the raw (untranslated) value of this item.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItem.DisplayValue">
            <summary>
            Gets or sets the display value of this item.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItem.ImgIdx">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ValueItem.dispVal">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1DisplayColumn">
            <summary>
            Represents the columns in a split.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.Dispose">
            <summary>
            Releases the resources used by the component.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the component.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.OnChanged(C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum)">
             <summary>
            
             </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.AddCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Controls the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> used to change the appearance for cells meeting the specified condition.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="style">
            <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> object that specifies appearance attributes.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)">
            <summary>
            Controls the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> used to change the appearance of cells according to their contents.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="style">
            <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> object that specifies appearance attributes.
            </param>
            <param name="regex">
            A regular expression string.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.ClearCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.AddCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.ClearRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.ClearRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,System.String)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="regex">
            A regular expression string.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumn.AutoSize">
            <summary>
            Adjusts the width of a column to accommodate the longest visible field within that column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.AutoDropDown">
            <summary>
            Gets or sets a value indicating whether the dropdown opens automatically when a key is typed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.AutoComplete">
            <summary>
            Gets or sets a value indicating whether the dropdown auto fills the edit portion with the matched entry.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.CellTop">
            <summary>
            Gets the vertical offset of the top of the cell for the current row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.DropDownList">
            <summary>
            Gets or sets a value indicating whether the dropdown acts like a dropdown list (text portion is not editable).
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.HeadingStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> that controls the appearance of the column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style">
            <summary>
            Gets or sets the root <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> for this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.FooterStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> object that controls the appearance of column footers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.EditorStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> used for the cell editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.GroupHeaderStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> used to render the cell in the grouped header row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.GroupFooterStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Style"/> used to render the cell in the grouped footer row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Visible">
            <summary>
            Gets or sets a value indicating the visibility of a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnDivider">
            <summary>
            Gets or sets the style of the border drawn between columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Width">
            <summary>
            Gets or sets the width of a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Height">
            <summary>
            Gets or sets the height of the column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.AllowFocus">
            <summary>
            Gets or sets a value indicating the ability of a column to receive focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Locked">
            <summary>
            Gets or sets a value indicating whether editing is permitted in a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Merge">
            <summary>
            Gets or sets a value indicating whether contiguous like-value cells of this column are merged into one large cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Frozen">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> is frozen.
            </summary>
            <value><c>true</c> if frozen; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.SubLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.AllowSizing">
            <summary>
            Gets or sets a value indicating whether column resizing is allowed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.ButtonText">
            <summary>
            Gets or sets a value indicating whether cells in this column look like buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.ButtonAlways">
            <summary>
            Gets or sets a value indicating whether buttons will be displayed when the cell does not contain focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Button">
            <summary>
            Gets or sets a value indicating whether a dropdown button will be displayed in this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.FilterButton">
            <summary>
            Gets or sets a value indicating whether a dropdown button will be displayed in this column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.MinWidth">
            <summary>
            Gets or sets the minimum width a column can be resized to when in <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SpringMode"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.HeaderDivider">
            <summary>
            Gets or sets a value indicating whether to display the column divider in the header area.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.FooterDivider">
            <summary>
            Gets or sets a value indicating whether to display the column divider in the footer area.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.FetchStyle">
            <summary>
            Gets or sets a value indicating whether the FetchCellStyle event will be raised for a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.ButtonHeader">
            <summary>
            Gets or sets a value indicating whether a column header will act like a button.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.ButtonFooter">
            <summary>
            Gets or sets a value indicating whether a column footer will act like a button.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.OwnerDraw">
            <summary>
            Gets or sets a value indicating whether cells in this column are drawn by the user in the OwnerDrawCell event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.DataColumn">
            <summary>
            Gets the associted <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> associated with this object.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.DCIdx">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.Name">
            <summary>
            Gets the caption of the associated <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum">
            <summary>
            Enumerates the type of changes made to a display column for event listeners
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.CaptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.FooterStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.ColumnStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.ColumnDivider">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.CaptionDivider">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.Merge">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.Appearance">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.FooterDivider">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.FetchStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.CellCondition">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.Frozen">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum.OwnerDraw">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.GridLinesTypeConverter">
            <summary>
            TypeConverter for the GridLines object.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.GridLinesTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.GridLinesTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.GridLinesTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.GridLinesTypeConverter.fromStr(System.String)">
            <summary>
            Froms the STR.
            </summary>
            <param name="str">The STR.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.GridLinesTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.GridLines">
            <summary>
            Represents the line used for row and column dividers.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.GridLines.#ctor">
            <summary>
            Creates a new instance of this object.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.GridLines.Color">
            <summary>
            Gets or sets the color of lines used for row and column dividers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.GridLines.Style">
            <summary>
            Gets or sets the style of lines used for row and column dividers.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.SplitDivider">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.SplitDivider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.Util.SplitDivider"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.SplitDivider.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.SplitDivider.Border3DStyle">
            <summary>
            Gets or sets the border3D style.
            </summary>
            <value>The border3D style.</value>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BaseGrid.ViewList">
            <summary>
            Class to manage all the views
            
            TODO:  mechanism for persistence
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.ViewList.resetColumnIndex">
            <summary>
            Sets the column index to the first visible column.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.ViewList.ResetCurrentColumn">
            <summary>
            Sets the column index to the first visible column.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.ViewList.InsertHorzView(System.Int32)">
            <summary>
            Inserts a new horizontal view
            
            </summary>
            <param name="idx">index of new view position</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.ViewList.ComputeViewSize(System.Drawing.Rectangle)">
            <summary>
            computes the size of all views based upong width and height of views
            </summary>
            <param name="frameRect">Area in which all the views live</param>
            
            TODO: add fixed view sizes, we now assume everything is scalable
            TODO: add different types of view divider widths
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.ViewList.ComputeViewSize(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Adjust the views width and heights
            </summary>
            <param name="oldRect">Old frames client area</param>
            <param name="newRect">New frames client area</param>
            
            TODO: fixed horizontal views need to be accounted for
            TODO: account for different view sizing borders
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.ViewList.getMinVertScrollGroupController(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            Returns the view that is in the scroll group that has the smallest
            number of visible lines
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BaseGrid.ViewRowList">
            <summary>
            Represents a collection of ViewRow objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.ViewRowList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1TrueDBGrid.BaseGrid.ViewRow"/> at the specified index.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BaseGrid.ViewRow">
            <summary>
            Represents a row in a split.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.BaseGrid.ViewRow.AutoSize">
            <summary>
            Adjust the size of the row to fully display cell data.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.ViewRow.Visible">
            <summary>
            Gets or sets the visiblity of a row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.ViewRow.RowType">
            <summary>
            Gets the type of row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.ViewRow.Height">
            <summary>
            Gets or sets the height of a row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BaseGrid.ViewRow.Width">
            <summary>
            Gets or sets the width of a row.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1TrueDBGrid">
            <summary>
            C1TrueDBGrid control object.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.#ctor">
            <summary>
            The C1TrueDBGrid control.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the control.
            </summary>
            <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject"/> for the control.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CreateView">
            <summary>
            Creates the view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CreateView(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            Creates the view.
            </summary>
            <param name="other">The other view.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.initializeStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowDividerChanged(System.Object,System.EventArgs)">
            <summary>
            notifications
            </summary>
            
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.canCreateSplits">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnImeModeChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GetVisibleRowCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ShouldSerializeRecordSelectorWidth">
            <summary>
            Shoulds the width of the record selector be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ShouldSerializeRowDivider">
            <summary>
            Should the row divider be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ShouldSerializeRowSubDividerColor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddRow(System.String)">
            <summary>
            Adds a row to an unbound grid.
            </summary>
            <param name="data">The data used to populate the new row.  Column data is delimited by ';' char.</param>
            <returns>The index of the row that was added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddRow(System.String,System.Char)">
            <summary>
            Adds a row to an unbound grid.
            </summary>
            <param name="data">The data used to populate the new row.</param>
            <param name="separator">Character used to separate the data fields.</param>
            <returns>The index of the row that was added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddRows(System.Int32)">
            <summary>
            Adds the number of given rows to an unbound grid.
            </summary>
            <param name="count">The number of rows to add.</param>
            <returns>The index of the first row that was added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SuspendBinding">
            <summary>
            Instructs the grid to temporarily ignore IBindingList.ListChange notifications from the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ResumeBinding">
            <summary>
            Resumes IBindingList.ListChange notifications from the data source to the grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Controls the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> used to change the appearance for cells meeting the specified condition.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="style">
            <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that specifies appearance attributes.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)">
            <summary>
            Controls the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> used to change the appearance of cells according to their contents.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="style">
            <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that specifies appearance attributes.
            </param>
            <param name="regex">
            A regular expression string.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowBookmark(System.Int32)">
            <summary>
            Returns the row index of the DataSource for a display row index.
            </summary>
            <param name="row">
            The row index of the grid.
            </param>
            <returns>
            The underlying row index of the DataSource.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ClearCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ClearRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ClearRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,System.String)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="regex">
            A regular expression string.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ClearFields">
            <summary>
            Restores the default grid layout.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColContaining(System.Int32)">
            <summary>
            Returns the column index for the column containing the specified X coordinate.
            </summary>
            <param name="x">
            The horizontal coordinate (X value) in pixels.
            </param>
            <returns>
            The index of the column in the <see cref="P:C1.Win.C1TrueDBGrid.Split.DisplayColumns"/> collection beneath the specified X coordinate. 
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowContaining(System.Int32)">
            <summary>
            Returns the zero-based index of the display row containing the Y specified coordinate.
            </summary>
            <param name="y">
            The vertical coordinate (Y value) in pixels.
            </param>
            <returns>
            The display row index beneath the specified Y coordinate.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowTop(System.Int32)">
            <summary>
            Returns the Y coordinate of the top of a visible row.
            </summary>
            <param name="row">
            The displayed row index.
            </param>
            <returns>
            The Y coordinate of the specified display row, based on the client coordinates of the grid.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ScrollGrid(System.Int32,System.Int32)">
            <summary>
            Scrolls the grid data area by the specified number of rows and columns.
            </summary>
            <param name="cols">
            Number of columns to scroll.
            </param>
            <param name="rows">
            Number of rows to scroll.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.HoldFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PointAt(System.Drawing.Point)">
            <summary>
            Returns one of the <see cref="T:C1.Win.C1TrueDBGrid.PointAtEnum"/> enumerations, which indicates the kind of grid element beneath the specified coordinate.
            </summary>
            <param name="p">
            The Point in client coordinates.
            </param>
            <returns>
            The <see cref="T:C1.Win.C1TrueDBGrid.PointAtEnum"/> enumerations under the given coordinate.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PointAt(System.Int32,System.Int32)">
            <summary>
            Returns one of the <see cref="T:C1.Win.C1TrueDBGrid.PointAtEnum"/> constants, which indicates the kind of grid element beneath the specified coordinate.
            </summary>
            <param name="x">
            The x-coordinate.
            </param>
            <param name="y">
            The y-coordinate.
            </param>
            <returns>
            The <see cref="T:C1.Win.C1TrueDBGrid.PointAtEnum"/> enumerations under the given coordinate.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Rebind(System.Boolean)">
            <summary>
            Reinitializes grid with data from its data source.
            </summary>
            <param name="holdFields">
            True to preserves current column layout.  False retrieves the schema from the datasource.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Rebind">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SplitContaining(System.Int32,System.Int32)">
            <summary>
            Returns the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SplitIndex"/> of the split containing the specified coordinate.
            </summary>
            <param name="x">
            The x-coordinate.
            </param>
            <param name="y">
            The y-coordinate.
            </param>
            <returns>
            The <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SplitIndex"/> beneath the specified coordinate pair.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.UpdateData">
            <summary>
            Updates any changes on the current row to the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MoveRelative(System.Int32)">
            <summary>
            Moves the current row positions of the grid by the given offset.
            </summary>
            <param name="offset">
            The number of records to move. A positive value indicates forward movement; a negative value indicates backward movement.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MoveRelative(System.Int32,System.Int32)">
            <summary>
            Moves the current row positions of the grid by the given offset from the given row.
            </summary>
            <param name="offset">
            The number of records to move. A positive value indicates forward movement; a negative value indicates backward movement.
            </param>
            <param name="row">
            The origin of the relative movement.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MoveLast">
            <summary>
            Positions to the last row of the datasource.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MoveFirst">
            <summary>
            Positions to the first row of the datasource.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MoveNext">
            <summary>
            Positions to the next row of the datasource.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MovePrevious">
            <summary>
            Positions to the previous row of the datasource.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Delete">
            <summary>
            Deletes the current row.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.LoadLayout(System.String)">
            <summary>
            Loads a saved layout from the given file.
            </summary>
            <param name="filename">
            The file containing a saved layout.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.LoadLayout(System.IO.Stream)">
            <summary>
            Loads a saved layout from the given stream.
            </summary>
            <param name="stream">
            The Stream containing a saved layout.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SaveLayout(System.String)">
            <summary>
            Saves the grid's layout.
            </summary>
            <param name="filename">
            File to contain the grid layout.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SaveLayout(System.IO.Stream)">
            <summary>
            Saves the grid's layout.
            </summary>
            <param name="stream">
            The Stream to contain the grid layout.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SaveLayout(System.String,System.Boolean)">
            <summary>
            Saves the grid's layout.
            </summary>
            <param name="filename">
            File to contain the grid layout.
            </param>
            <param name="withDefaultValues">
            Specifies whether default values are serialized.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SaveLayout(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the grid's layout.
            </summary>
            <param name="stream">
            The Stream to contain the grid layout.
            </param>
            <param name="withDefaultValues">
            Specifies whether default values are serialized.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CellContaining(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the cell position for a set of coordinates.
            </summary>
            <param name="x">
            The x-coordinate.
            </param>
            <param name="y">
            The y-coordinate.
            </param>
            <param name="row">
            The row under the coordinate pair.
            </param>
            <param name="col">
            The column index under the coordinate pair.
            </param>
            <returns>
            A value indicating whether a data cell is beneath the specified coordinate pair. 
            </returns>
            <remarks>
            <para>The CellContaining method combines the <see cref="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColContaining(System.Int32)"/> and <see cref="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowContaining(System.Int32)"/> methods into one call. If the coordinate pair specified by x and y points to a data cell, this method returns True, and the rowindex and colindex arguments receive zero-based indexes that identify the cell.</para>
            <para>This method is useful when working with mouse and drag events when trying to determine where the user clicked or dropped another control in terms of a grid cell.</para>
            <para>If the specified coordinate is outside of the grid's data area, this method returns False. Use the <see cref="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PointAt(System.Int32,System.Int32)"/> method to determine what kind of grid element, if any, is beneath the specified coordinate.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RefreshRow">
            <summary>
            Invalidates the current row.
            </summary>
            <remarks>
            The RefreshRow method causes a repaint of the entire row in the grid. Normally, the grid repaints automatically as needed. However, if handlers have been written for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawCell"/> event, use this method to force a row to be repainted and hence cause the appropriate events to fire.
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RefreshRow(System.Int32)">
            <summary>
            Invalidates the current row.
            </summary>
            <param name="row">
            The row to refresh.
            </param>
            <remarks>
            The RefreshRow method causes a repaint of the entire row in the grid. Normally, the grid repaints automatically as needed. However, if handlers have been written for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawCell"/> event, use this method to force a row to be repainted and hence cause the appropriate events to fire.
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RefreshCol">
            <summary>
            Invalidates the current column.
            </summary>
            <remarks>
            The RefreshCol method causes a repaint of the entire column in the grid. Normally, the grid repaints automatically as needed. However, if handlers have been written for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawCell"/> event, use this method to force a column to be repainted and hence cause the appropriate events to fire.
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RefreshCol(System.Int32)">
            <summary>
            Invalidates the specified column.
            </summary>
            <param name="col">
            The split column index to repaint.
            </param>
            <remarks>
            The RefreshCol method causes a repaint of the entire column in the grid. Normally, the grid repaints automatically as needed. However, if handlers have been written for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawCell"/> event, use this method to force a column to be repainted and hence cause the appropriate events to fire.
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RefetchRow">
            <summary>
            Retreives data from the datasource for the current row and refreshes the row.
            </summary>
            <remarks>
            <para>The RefetchRow method repopulates the specified row from a data source. It also repaints the row, firing all events necessary for redisplay.</para>
            <para>By default, the grid retrieves data automatically as needed. In some circumstances, the underlying datasource may change without the grid receiving notification that a change has occurred.  The RefetchRow method is provided for this purpose.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RefetchRow(System.Int32)">
            <summary>
            Retreives data from the datasource for the specified row and refreshes the row.
            </summary>
            <param name="row">
            The row to refetch.
            </param>
            <remarks>
            <para>The RefetchRow method repopulates the specified row from a data source. It also repaints the row, firing all events necessary for redisplay.</para>
            <para>By default, the grid retrieves data automatically as needed. In some circumstances, the underlying datasource may change without the grid receiving notification that a change has occurred.  The RefetchRow method is provided for this purpose.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExpandGroupRow(System.Int32)">
            <summary>
            Expands the given row in GroupBy DataView.
            </summary>
            <param name="row">
            The row to expand.
            </param>
            <remarks>
            <para>Expanding/collapsing a row in a GroupBy grid also expands/collapses the row in a split that shares the same vertical scroll group.</para>
            <para></para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExpandGroupRow(System.Int32,System.Boolean)">
            <summary>
            Expands the given row in GroupBy DataView and optionally exapands the subrows.
            </summary>
            <param name="row">The row to expand.</param>
            <param name="expandSubRows">True to expand subrows.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CollapseGroupRow(System.Int32)">
            <summary>
            Collapses a grouped row.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GetBand(System.Int32)">
            <summary>
            Obtains the band given a column index.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GetBandRow(System.Int32,System.Int32)">
            <summary>
            Obtains the underlying row object for the given band and row.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowExpanded(System.Int32)">
            <summary>
            Obtains the expanded state of a band for a hierarchical grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CollapseBand(System.Int32)">
            <summary>
            Collapses a gvien band in a hierarchical grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExpandBand(System.Int32)">
            <summary>
            Expand the given band in a hierarchical grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CollapseChild">
            <summary>
            Closes the Child Grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExpandChild">
            <summary>
            Displays the Child grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToHTML(System.String)">
            <summary>
            Exports the grid to an HTML file.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToPDF(System.String)">
            <summary>
            Exports the grid to a PDF file.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToRTF(System.String)">
            <summary>
            Exports the grid to an RTF file.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToExcel(System.String)">
            <summary>
            Exports the grid to a XLS file.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToExcel(System.String,System.Boolean)">
            <summary>
            Exports the grid to a XLS file.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportTo">
            <summary>
            Opens a dialog in which the user can select the export format.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportTo(System.String)">
            <summary>
            Exports the grid based upon the file extension.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToDelimitedFile(System.String,C1.Win.C1TrueDBGrid.RowSelectorEnum)">
            <summary>
            Exports the specified rows from the grid to the specified file as delimited text.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToDelimitedFile(System.String,C1.Win.C1TrueDBGrid.RowSelectorEnum,System.String)">
            <summary>
            Exports the specified rows from the grid to the specified file as delimited text.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToDelimitedFile(System.String,C1.Win.C1TrueDBGrid.RowSelectorEnum,System.String,System.String)">
            <summary>
            Exports the specified rows from the grid to the specified file as delimited text.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToDelimitedFile(System.String,C1.Win.C1TrueDBGrid.RowSelectorEnum,System.String,System.String,System.String)">
            <summary>
            Exports the specified rows from the grid to the specified file as delimited text.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToDelimitedFile(System.String,C1.Win.C1TrueDBGrid.RowSelectorEnum,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Exports the specified rows from the grid to the specified file as delimited text.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportToDelimitedFile(System.String,C1.Win.C1TrueDBGrid.RowSelectorEnum,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Exports the specified rows from the grid to the specified file as delimited text.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.InsertVerticalSplit(System.Int32)">
            <summary>
            Inserts vertical splits at the given position.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RemoveVerticalSplit(System.Int32)">
            <summary>
            Removes all vertical splits at the given index.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.reinitViews">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.InsertHorizontalSplit(System.Int32)">
            <summary>
            Inserts new horizontal splits at the given position.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RemoveHorizontalSplit(System.Int32)">
            <summary>
            Removes all the horizontal splits at the given index.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Refresh">
            <summary>
            Clears any cached styles and forces the grid to repaint.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SetActiveCell(System.Int32,System.Int32)">
            <summary>
            Sets the focus to the given cell.
            </summary>
            <param name="row">The zero based index of the row.</param>
            <param name="col">The zero based index of the column.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MultiLineExtendColumns">
            <summary>
            Extends the last column in each subrow so that all rows have the same width.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnAfterColUpdate(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the AfterColUpdate event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnAfterDelete(System.EventArgs)">
            <summary>
            Raises the AfterDelete event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnAfterInsert(System.EventArgs)">
            <summary>
            Raises the AfterInsert event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnAfterUpdate(System.EventArgs)">
            <summary>
            Raises the AfterUpdate event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnBeforeColUpdate(C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs)">
            <summary>
            Raises the BeforeColUpdate event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnBeforeDelete(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the BeforeDelete event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnBeforeInsert(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the BeforeInsert event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnBeforeUpdate(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the BeforeUpdate event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnColResize(C1.Win.C1TrueDBGrid.ColResizeEventArgs)">
            <summary>
            Raises the ColResize event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnHeadClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the HeadClick event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFootClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the FootClick event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnOwnerDrawCell(C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs)">
            <summary>
            Raises the OwnerDrawCell event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnOwnerDrawCellPrint(C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs)">
            <summary>
            Raises the OwnerDrawCellPrint event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnOwnerDrawPageHeader(C1.Win.C1TrueDBGrid.OwnerDrawPageEventArgs)">
            <summary>
            Raises the OwnerDrawPageHeader event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnOwnerDrawPageFooter(C1.Win.C1TrueDBGrid.OwnerDrawPageEventArgs)">
            <summary>
            Raises the OwnerDrawPageFooter event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnBeforeRowColChange(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the BeforeRowColChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnRowColChange(C1.Win.C1TrueDBGrid.RowColChangeEventArgs)">
            <summary>
            Raises the RowColChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnRowResize(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the RowResize event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.On_Scroll(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the Scroll event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnSelChange(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the SelChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.hasOnSelChangeEvent">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnSplitChange(System.EventArgs)">
            <summary>
            Raises the SplitChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnSplitRemoved(System.EventArgs)">
            <summary>
            Raises tje SplitRemoved event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnChange(System.EventArgs)">
            <summary>
            Raises the Change event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnUnboundColumnFetch(C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs)">
            <summary>
            Raises the UnboundColumnFetch event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnUnboundColumnUpdated(C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs)">
            <summary>
            Raises the UnboundColumnUpdated event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnAfterColEdit(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the AfterColEdit event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnBeforeColEdit(C1.Win.C1TrueDBGrid.BeforeColEditEventArgs)">
            <summary>
            Raises the BeforeColEdit event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnColEdit(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the ColEdit event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFirstRowChange(C1.Win.C1TrueDBGrid.SplitEventArgs)">
            <summary>
            Raises the FirstRowChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnLeftColChange(C1.Win.C1TrueDBGrid.SplitEventArgs)">
            <summary>
            Raises the LeftColChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFormatText(C1.Win.C1TrueDBGrid.FormatTextEventArgs)">
            <summary>
            Raises the FromatText event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnButtonClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the ButtonClick event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnComboSelect(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the ComboSelect event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnValueItemError(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the ValueItemError event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFetchCellStyle(C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs)">
            <summary>
            Raises the FetchCellStyle event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFetchGroupCellStyle(C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs)">
            <summary>
            Raises the FetchGroupCellStyle event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFetchRowStyle(C1.Win.C1TrueDBGrid.FetchRowStyleEventArgs)">
            <summary>
            Raises the FetchRowStyle event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.On_AddNew(System.EventArgs)">
            <summary>
            Raises the OnAddNew event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnColMove(C1.Win.C1TrueDBGrid.ColMoveEventArgs)">
            <summary>
            Raises the ColMove event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFetchCellTips(C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs)">
            <summary>
            Raises the FetchCellTips event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.On_Init(System.EventArgs)">
            <summary>
            Raises the OnInit event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnDataSourceChanged(System.EventArgs)">
            <summary>
            Raises the DataSourceChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnCollapse(C1.Win.C1TrueDBGrid.BandEventArgs)">
            <summary>
            Raises the Collapse event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnExpand(C1.Win.C1TrueDBGrid.BandEventArgs)">
            <summary>
            Raises the Expand event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnGroupColMove(C1.Win.C1TrueDBGrid.GroupColMoveEventArgs)">
            <summary>
            Raises the GroupColMove event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnGroupText(C1.Win.C1TrueDBGrid.GroupTextEventArgs)">
            <summary>
            Raises the GroupText event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnGroupAggregate(C1.Win.C1TrueDBGrid.GroupTextEventArgs)">
            <summary>
            Raises the GroupAggregate event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnGroupHeadClick(C1.Win.C1TrueDBGrid.GroupColEventArgs)">
            <summary>
            Raises the GroupHeadClick event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnGroupInterval(C1.Win.C1TrueDBGrid.GroupIntervalEventArgs)">
            <summary>
            Raises the GroupInterval event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFetchScrollTips(C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs)">
            <summary>
            Raises the FetchScrollTips event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFilterChange(System.EventArgs)">
            <summary>
            Raises the FilterChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFilterButtonClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Raises the FilterButtonClick event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnBeforeOpen(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the BeforeOpen event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnBeforeClose(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Raises the BeforeClose event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnSort(C1.Win.C1TrueDBGrid.FilterEventArgs)">
            <summary>
            Raises the Sort event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnFilter(C1.Win.C1TrueDBGrid.FilterEventArgs)">
            <summary>
            Raises the Filter event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnAfterFilter(C1.Win.C1TrueDBGrid.FilterEventArgs)">
            <summary>
            Raises the AfterFilter event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnAfterSort(C1.Win.C1TrueDBGrid.FilterEventArgs)">
            <summary>
            Raises the AfterSort event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnError(C1.Win.C1TrueDBGrid.ErrorEventArgs)">
            <summary>
            Raises the Error event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.C1PrintableGetTree">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Item(System.Int32)">
            <summary>
            Gets the row object associated with the given row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the cell value at the given row and column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Item(System.Int32,System.String)">
            <summary>
            Gets or sets the cell value at the given row and column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AddNewMode">
            <summary>
            Gets a value that describes the current AddNew state.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowDelete">
            <summary>
            Gets or sets a value indicating the ability to delete records from the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowAddNew">
            <summary>
            Gets or sets a value indicating the ability to add new rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowArrows">
            <summary>
            Gets or sets a value indicating whether arrow keys can be used to navigate around the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowColMove">
            <summary>
            Gets or sets a value indicating the ability to move columns in the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowColSelect">
            <summary>
            Gets or sets a value indicating the ability to select columns in the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowDrag">
            <summary>
            Gets or sets a value indicating the ability to drag from the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowRowSelect">
            <summary>
            Gets or sets a value indicating the ability to select rows in the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowUpdate">
            <summary>
            Gets or sets a value indicating the ability of a user to modify data.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowUpdateOnBlur">
            <summary>
            Gets or sets a value indicating how the grid updates modifed data when the grid loses focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Bands">
            <summary>
            Gets the number of levels within a hierarchical grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Bookmark">
            <summary>
            Gets or sets the current row position of the underlying CurrencyManager.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CellTips">
            <summary>
            Gets or sets whether the grid displays a pop-up text window when the cursor is idle.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CellTipsDelay">
            <summary>
            Gets or sets the amount of time in milliseconds before the cell tip window is displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CellTipsWidth">
            <summary>
            Gets or sets the width of the cell tip window.
            </summary>
            <remarks>
            <para>
            The CellTipsWidth property returns or sets the width of the cell tip window in pixels.
            </para>
            <para>
            By default, this property is set to zero, which causes the cell tip window to grow or shrink to accommodate the cell tip text. Override this behavior and give the cell tip window a fixed width by specifying a non-zero value for this property.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Col">
            <summary>
            Gets or sets the column position of the current cell in the current split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CollapseColor">
            <summary>
            Gets or sets the color of the collapse icon.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Editor">
            <summary>
            Gets a reference to the cell editor that is currently active.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FocusedSplit">
            <summary>
            Gets the Split that has focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DefColWidth">
            <summary>
            Gets or sets the default width for all grid columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExpandColor">
            <summary>
            Gets or sets the color of the expand icon in hierarchical grids.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColumnHeaders">
            <summary>
            Gets or sets a value indicating the visibility of column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColumnFooters">
            <summary>
            Gets or sets a value indicating the visibility of column footers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Columns">
            <summary>
            Gets the collection of C1DataColumn objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CurrentCellVisible">
            <summary>
            Gets or sets a value indicating the visibility of the current cell in a split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataChanged">
            <summary>
            Gets or sets a value indicating the modification status of the current row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DestinationSplit">
            <summary>
            Gets the split index which will be current after cell movement.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DestinationRow">
            <summary>
            Gets the row which will be current after cell movement.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DestinationCol">
            <summary>
            Gets the column which will be current after cell movement.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.EditActive">
            <summary>
            Gets or sets a value indicating the editing status of the current cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.EditDropDown">
            <summary>
            Gets or sets a value indicating whether editing will take place in a popup window or within cell boundaries.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.EmptyRows">
            <summary>
            Gets or sets a value that determines how the grid displays rows below the last data row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ErrorImage">
            <summary>
            Gets or sets the image used for ErrorProvider.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExtendRightColumn">
            <summary>
            Gets or sets a value that determines how the last column will extend to fill the dead area of the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExposeCellMode">
            <summary>
            Gets or sets how the rightmost column reacts when clicked by the user.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchRowStyles">
            <summary>
            Gets or sets a value indicating whether the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchRowStyle"/> event will be raised.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterActive">
            <summary>
            Gets or sets a value indicating whether the filter bar has focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterBar">
            <summary>
            Gets or sets a value indicating the visibility of the FilterBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FirstRow">
            <summary>
            Gets or sets the row index for the first visible row in a grid or split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.LeftCol">
            <summary>
            Gets or sets the zero-based index of the leftmost column in a grid or split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MarqueeStyle">
            <summary>
            Gets or sets the MarqueeStyle for a grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MatchEntryTimeOut">
            <summary>
            Gets or sets the time (milliseconds) in which the incremental search string will reset for a dropdown when the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.DropDownList"/> property is True.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MultiSelect">
            <summary>
            Gets or sets the selection state of the grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PictureCurrentRow">
            <summary>
            Gets or sets the Image used in the record selector to indicate the Current row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PictureModifiedRow">
            <summary>
            Gets or sets the Image used in the record selector to indicate the Modified row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PictureAddnewRow">
            <summary>
            Gets or sets the Image used in the record selector to indicate the AddNew row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PictureFilterBar">
            <summary>
            Gets or sets the Image used in the record selector to indicate the FilterBar row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PictureStandardRow">
            <summary>
            Gets or sets the Image used in the record selector to indicate the Standard row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PictureHeaderRow">
            <summary>
            Gets or sets the Image used in the record selector to indicate the Header row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PictureFooterRow">
            <summary>
            Gets or sets the Image used in the record selector to indicate the Footer row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PrintInfo">
            <summary>
            Gets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PrintInfo"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.PreviewInfo">
            <summary>
            Gets the <see cref="T:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RecordSelectors">
            <summary>
            Gets or sets a value indicating the visibility of row headers for a grid or split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RecordSelectorWidth">
            <summary>
            Gets or sets the width of the row headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Row">
            <summary>
            Gets or sets the the current row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ScrollTips">
            <summary>
            Gets or sets a value that determines whether the grid displays a pop-up text window when the scrollbar thumb is dragged.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelectedRows">
            <summary>
            Gets the collection of rows that are currently selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelectedCols">
            <summary>
            Gets the collection of columns that are currently selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelectionLength">
            <summary>
            Gets or sets the number of characters selected within the grid's editing window.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelectionStart">
            <summary>
            Gets or sets the starting point of the text selection within the grid's editing window.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelectedText">
            <summary>
            Gets or sets the string containing the currently selected text within the grid's editing window.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelRange">
            <summary>
            Gets a value indicating whether a range of cells has been selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SplitIndex">
            <summary>
            Gets or sets the index of the current <see cref="T:C1.Win.C1TrueDBGrid.Split"/> within the <see cref="T:C1.Win.C1TrueDBGrid.SplitCollection"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SpringMode">
            <summary>
            Gets or sets a value that determines how columns will resize when the grid is resized.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.TabAcrossSplits">
            <summary>
            Gets or sets a value indicating the behavior of the tab and arrow keys at split borders.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.TabAction">
            <summary>
            Gets or sets the behavior of the tab key.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.VisibleCols">
            <summary>
            Gets the number of visible columns in the current Split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.VisibleRows">
            <summary>
            Gets the number of visible rows in the current Split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.WrapCellPointer">
            <summary>
            Gets or sets a value indicating the behavior of Tab and arrow keys at row boundaries.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.VScrollBar">
            <summary>
            Gets the <see cref="T:C1.Win.C1TrueDBGrid.Util.VBar"/> object that controls the appearance of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.HScrollBar">
            <summary>
            Gets the <see cref="T:C1.Win.C1TrueDBGrid.Util.HBar"/> object that controls the appearance of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataView">
            <summary>
            Gets or sets the layout by which the grid will display data.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DirectionAfterEnter">
            <summary>
            Gets or sets a value that determines the relative position of the next cell when the user presses the Enter key.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupByCaption">
            <summary>
            Gets or sets the text displayed in the grouping area when no columns have been grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupedColumns">
            <summary>
            Gets the collection of columns that are grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupByAreaVisible">
            <summary>
            Gets or sets a value indicating the visibility of the Grouping area of the grid when the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataView"/> property is set to GroupBy.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupByRectangle">
            <summary>
            Gets the rectangle occupied by the grouping area.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DeadAreaBackColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.LinesPerRow">
            <summary>
            Gets or sets the number of subrows of the grid when the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataView"/> property is set to MutlipleLinesFixed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MaintainRowCurrency">
            <summary>
            Gets or sets a value indicating the behavior of the grid and row currency when the grid's datasource is sorted.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowDivider">
            <summary>
            Gets or sets the style of the border drawn between grid rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowSubDividerColor">
            <summary>
            Gets or sets the color of the subrow divider in a multi-line grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ChildGrid">
            <summary>
            Gets or sets the C1TrueDBGrid control used as a child grid in a hierarchical presentation.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.CaptionStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of the caption area.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.EditorStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of the cell editor within a grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.EvenRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of an even-numbered row when using <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AlternatingRows"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterBarStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterBar"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterWatermarkStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of the <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterWatermark"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FooterStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of column footers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of grouping area.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.HeadingStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of the grids column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.HighLightRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the current row/cell when the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.MarqueeStyle"/> is set to Highlight Row/Cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.InactiveStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the grids caption when it doesn't have focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OddRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of an odd-numbered row when using <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AlternatingRows"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RecordSelectorStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RecordSelectors"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelectedStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object that controls the appearance of selected rows and columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style">
            <summary>
            Gets or sets the root <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Styles">
            <summary>
            Gets the collection of named <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Style"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AlternatingRows">
            <summary>
            Gets or sets a value indicating whether the grid or split uses the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OddRowStyle"/> for odd-numbered rows and <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.EvenRowStyle"/> for even-numbered rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowRowSizing">
            <summary>
            Gets or sets how interactive row resizing is performed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowHorizontalSplit">
            <summary>
            Gets or sets a value indicating whether a user is allowed to create horizontal splits.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AllowVerticalSplit">
            <summary>
            Gets or sets a value indicating whether a user is allowed to create vertical splits.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Splits">
            <summary>
            Gets the collection of <see cref="T:C1.Win.C1TrueDBGrid.Split"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ViewColumnWidth">
            <summary>
            Gets or sets the width of a column when the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataView"/> is set to Inverted or Form.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ViewCaptionWidth">
            <summary>
            Gets or sets the width of the column caption when the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataView"/> is set to Inverted or Form.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterColUpdate">
            <summary>
            Occurs after a cell has been updated.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterDelete">
            <summary>
            Occurs after a row has been deleted.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterInsert">
            <summary>
            Occurs after a row has been added.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterUpdate">
            <summary>
            Occurs after a row has been updated.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeColUpdate">
            <summary>
            Occurs before a cell is updated to the datasource.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeDelete">
            <summary>
            Occurs before a row is deleted.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeInsert">
            <summary>
            Occurs before a new row is added to the datasource.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeUpdate">
            <summary>
            Occurs before a row is updated to the datasource.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColResize">
            <summary>
            Occurs whenever a column is resized.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.HeadClick">
            <summary>
            Occurs whenever a column header is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FootClick">
            <summary>
            Occurs whenever a column footer is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawCell">
            <summary>
            Occurs before a cell is rendered and the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.OwnerDraw"/> is true.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawCellPrint">
            <summary>
            Occurs before a cell is to be printed and the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.OwnerDraw"/> is true.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawPageHeader">
            <summary>
            Occurs before the page header is to be printed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawPageFooter">
            <summary>
            Occurs before the page footer is to be printed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeRowColChange">
            <summary>
            Occurs prior to focus moving to another cell.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowColChange">
            <summary>
            Occurs when the focus moves to a different cell.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowResize">
            <summary>
            Occurs whenever the user resizes a row.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Scroll">
            <summary>
            Occurs whenever the user scrolls the grid.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelChange">
            <summary>
            Occurs whenever the user selected a different range of rows or columns.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SplitChange">
            <summary>
            Occurs whenever a Split changes focus.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SplitRemoved">
            <summary>
            Occurs when a split is removed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Change">
            <summary>
            Occurs whenever the user changes the value of a cell.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.UnboundColumnFetch">
            <summary>
            Occurs when the grid needs to access the value of an unbound column.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.UnboundColumnUpdated">
            <summary>
            Occurs when the value of an unbound column has been updated.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterColEdit">
            <summary>
            Occurs after editing is completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeColEdit">
            <summary>
            Occurs before a cell enters edit mode.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColEdit">
            <summary>
            Occurs whenever a cell first enters edit mode.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FirstRowChange">
            <summary>
            Occurs whenever the first row changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.LeftColChange">
            <summary>
            Occurs whenever the left column changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FormatText">
            <summary>
            Occurs whenever a cell is about to be rendered and whose <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.NumberFormat"/> property has been set to FormatTextEvent.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ButtonClick">
            <summary>
            Occurs whenever a button is clicked in a cell.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ComboSelect">
            <summary>
            Occurs whenever a selection has been made to the built-in combo or TrueDBDropdown.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ValueItemError">
            <summary>
            Occurs whenever a user attempts to enter invalid data into a column that is using valueitems.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchCellStyle">
            <summary>
            Occurs whenever a cell is to be rendered and the <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.FetchStyle"/> is true.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchGroupCellStyle">
            <summary>
            Occurs whenever a grouped cell that contains an aggregate is to be rendered and <see cref="P:C1.Win.C1TrueDBGrid.C1DisplayColumn.FetchStyle"/> is true.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchRowStyle">
            <summary>
            Occurs whenever the grid renders a row and the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchRowStyles"/> property has been set.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnAddNew">
            <summary>
            Occurs whenever an AddNew operation has been initiated.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColMove">
            <summary>
            Occurs whenever the user has finished moving a column.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchCellTips">
            <summary>
            Occurs when the grid needs to display CellTips.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OnInit">
            <summary>
            Occurs after the grid has been initialized.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.DataSourceChanged">
            <summary>
            Occurs whenever the datasource changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.LayoutReady">
            <summary>
            
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Collapse">
            <summary>
            Occurs whenever a hierarchical row is collapsed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Expand">
            <summary>
            Occurs whenever a hierarchical row is expanded.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupColMove">
            <summary>
            Occurs whenever a column is moved into or out of the grouping area.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupText">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1TrueDBGrid.GroupInfo.HeaderText"/> property is set to custom.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupAggregate">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.Aggregate"/> is set to Custom for a grouped row.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupHeadClick">
            <summary>
            Occurs whenever a column in the grouping area is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupInterval">
            <summary>
            Occurs whenever a row is being grouped and a custom interval has been specified.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchScrollTips">
            <summary>
            Occurs whenever the grid has focus and the scrollbar thumb is moved using the mouse.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterChange">
            <summary>
            Occurs when the contents of a cell in the filterbar changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterButtonClick">
            <summary>
            Occurs when a button is clicked in the filterbar.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeOpen">
            <summary>
            Occurs when the user attempts to open a child grid.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeClose">
            <summary>
            Occurs when the user attempts to close a child grid.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Sort">
            <summary>
            Occurs when the user drags a column into the grouping area.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Filter">
            <summary>
            Occurs when the user types in the filterbar and the <see cref="P:C1.Win.C1TrueDBGrid.BaseGrid.Frame.AllowFilter"/> property is false.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterFilter">
            <summary>
            Occurs after the datasource has been filtered.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterSort">
            <summary>
            Occurs after a column has been sorted.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Error">
            <summary>
            Occurs whenever an exception is thrown during end user interaction.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Split">
            <summary>
            Represents a horizontal or vertical pane to display and edit data.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.Split"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.#ctor(C1.Win.C1TrueDBGrid.BaseGrid.Frame)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.Split"/> class.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.#ctor(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.Split"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.getFilterTextRect(System.Int32)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.getFilterRect(System.Int32)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.DrawFilterCell(System.Windows.Forms.PaintEventArgs,System.Int32)">
            <summary>
            Draws the filter cell.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
            <param name="col">The col.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.ClipDataRect(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.shouldMerge(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            returns true if the data at the given row is the same as the passed in string
            </summary>
            <param name="str"></param>
            <param name="row">absolute row number</param>
            <param name="col"></param>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.OnDisplayColumnChanged(C1.Win.C1TrueDBGrid.C1DisplayColumn.ColumnChangedEnum,C1.Win.C1TrueDBGrid.C1DisplayColumn)">
            <summary>
            Called when C1DisplayColumn properties have been changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.OnGetCellRange(System.Int32,System.Int32)">
            <summary>
            Returns the upper and lower bounds for a merged column.
            </summary>
            <param name="row">Starting row</param>
            <param name="col">Starting colum.</param>
            <returns>The CellRange object that defines the rows and columns for a merged cell.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.GetCellRange(System.Int32,System.Int32)">
            <summary>
            finds the upper and lower bounds for a merged column
            </summary>
            <param name="row">row number, relative </param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.ExitEdit">
            <summary>
            Exits editing mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.ShouldExit">
            <summary>
            short circuits exiting the editor on row change when actively filtering
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.RepositionEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.filterColumnAt(System.Drawing.Point,System.Int32@)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.CheckMousePoint(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.AddRow(System.Int32)">
            <summary>
            Adds the row.
            </summary>
            <param name="newrow">The newrow.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.DeleteRows">
            <summary>
            Deletes the rows.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.getDropDown">
            <summary>
            Gets the drop down for the current column if one exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.HasInternalCombo">
            <summary>
            Determines whether we have an internal combo.
            </summary>
            <returns>
            	<c>true</c> if combo is not a valueitem otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.HasCombo">
            <summary>
            Determines whether this instance has combo.
            </summary>
            <returns>
            	<c>true</c> if this instance has combo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.CreateInternalDropdown">
            <summary>
            Creates the internal dropdown for use in the filterbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.SetFlatMode(C1.Win.C1TrueDBGrid.FlatModeEnum)">
            <summary>
            Sets the flat mode.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.ShouldSerializeRecordSelectorWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.ShouldSerializeHeight">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.AddCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Controls the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> used to change the appearance for cells meeting the specified condition.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="style">
            <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that specifies appearance attributes.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)">
            <summary>
            Controls the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> used to change the appearance of cells according to their contents.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="style">
            <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that specifies appearance attributes.
            </param>
            <param name="regex">
            A regular expression string.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.ClearCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.Split.AddCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.ClearRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.Split.AddCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.ClearRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,System.String)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.Split.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="regex">
            A regular expression string.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.GetCellBounds(System.Int32,System.Int32)">
            <summary>
            Returns the Rectangle for the given Row and Column
            </summary>
            <param name="Row">Visible row number</param>
            <param name="Col">Visible column index</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.OnAddNewRow">
            <summary>
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.HBarHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.HBarStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.VBarHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.VBarStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.SubRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.AllowFocus">
            <summary>
            Gets or sets a value indicating whether the split can recive focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.AllowColMove">
            <summary>
            Gets or sets a value indicating the ability to move columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.AllowColSelect">
            <summary>
            Gets or sets a value indicating the ability to select columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.AllowRowSelect">
            <summary>
            Gets or sets a value indicating the ability to select rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.Name">
            <summary>
            Gets or sets the name of a split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.AllowRowSizing">
            <summary>
            Gets or sets how interactive row resizing is performed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.AllowHorizontalSizing">
            <summary>
            Gets or sets a value indicating whether a user is allowed to resize horizontal splits.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.AllowVerticalSizing">
            <summary>
            Gets or sets a value indicating whether a user is allowed to resize vertical splits.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.AlternatingRowStyle">
            <summary>
            Gets or sets a value indicating whether the split uses the <see cref="P:C1.Win.C1TrueDBGrid.Split.OddRowStyle"/> for odd-numbered rows and <see cref="P:C1.Win.C1TrueDBGrid.Split.EvenRowStyle"/> for even-numbered rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.CaptionHeight">
            <summary>
            Gets or sets the height of the caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.ColumnHeaders">
            <summary>
            Gets or sets a value indicating the visibility of column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.ColumnCaptionHeight">
            <summary>
            Gets or sets the height of the column captions.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.ColumnFooterHeight">
            <summary>
            Gets or sets the height of column footers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.CurrentCellVisible">
            <summary>
            Gets or sets a value indicating the visibility of the current cell in a split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.ExtendRightColumn">
            <summary>
            Gets or sets a value that determines how the last column will extend to fill the dead area of the split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.FetchRowStyles">
            <summary>
            Gets or sets a value indicating whether the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchRowStyle"/> event will be raised.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.FilterActive">
            <summary>
            Gets or sets a value indicating whether the filter bar has focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.FilterBar">
            <summary>
            Gets or sets a value indicating the visibility of the FilterBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.FilterBorderStyle">
            <summary>
            Gets or sets the filter border style.
            </summary>
            <value>The filter border style.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.FirstRow">
            <summary>
            Gets or sets the row index for the first visible row in a split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.GroupColumns">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.LeftCol">
            <summary>
            Gets or sets the left most visible column for a split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.MarqueeStyle">
            <summary>
            Gets or sets the MarqueeStyle for a Split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.Locked">
            <summary>
            Gets or sets a value indicating if the cells of a split can be edited.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.RecordSelectorWidth">
            <summary>
            Gets or sets the width of the row headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.DefRecSelWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.RecordSelectors">
            <summary>
            Gets or sets a value indicating the visibility of row headers for Split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.Rows">
            <summary>
            Gets the collection of Rows displayed in the Split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.VerticalScrollGroup">
            <summary>
            Gets or sets the group which synchronizes verticall scrolling between splits. 
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.MinWidth">
            <summary>
            Gets or sets the minimum width that a split can be interactively resized.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.MinHeight">
            <summary>
            Gets or sets the minimum height that a split can be interactively resized.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.HorizontalScrollGroup">
            <summary>
            Gets or sets the group which synchronizes horizontal scrolling between splits. 
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.HorizontalOffset">
            <summary>
            Gets or sets the position of the Horizontal scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.VerticalOffset">
            <summary>
            Gets or sets the position of the Vertical scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.SpringMode">
            <summary>
            Gets or sets a value that determines how columns will resize when the grid is resized.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.VScrollBar">
            <summary>
            Gets the <see cref="T:C1.Win.C1TrueDBGrid.Util.VBar"/> object that controls the appearance of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.HScrollBar">
            <summary>
            Gets the <see cref="T:C1.Win.C1TrueDBGrid.Util.HBar"/> object that controls the appearance of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.SplitSize">
            <summary>
            Gets or sets the size of a split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.Height">
            <summary>
            Gets or sets the height of a split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.SplitSizeMode">
            <summary>
            Gets or sets a value indicating how the <see cref="P:C1.Win.C1TrueDBGrid.Split.SplitSize"/> property is used to determine the actual size of a split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.CaptionStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of the caption area.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.EditorStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of the cell editor within a grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.EvenRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of an even-numbered row when using <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AlternatingRows"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.FilterBarStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of the <see cref="P:C1.Win.C1TrueDBGrid.Split.FilterBar"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.FilterWatermarkStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of the <see cref="P:C1.Win.C1TrueDBGrid.C1DataColumn.FilterWatermark"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.FooterStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of column footers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.GroupStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.HeadingStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of the grids column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.HighLightRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the current row/cell when the <see cref="P:C1.Win.C1TrueDBGrid.Split.MarqueeStyle"/> is set to Highlight Row/Cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.InactiveStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the grids caption when it doesn't have focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.OddRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of an odd-numbered row when using <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AlternatingRows"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.RecordSelectorStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of the <see cref="P:C1.Win.C1TrueDBGrid.Split.RecordSelectors"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.SelectedStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object that controls the appearance of selected rows and columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.Style">
            <summary>
            Gets or sets the root <see cref="P:C1.Win.C1TrueDBGrid.Split.Style"/> object for the Split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.DisplayColumns">
            <summary>
            Gets a collection of <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Split.internalCols">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Split.CellRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Split.CellRange.r1">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Split.CellRange.c1">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Split.CellRange.r2">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Split.CellRange.c2">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.CellRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.Split.CellRange"/> struct.
            </summary>
            <param name="row">The row.</param>
            <param name="col">The col.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.CellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.Split.CellRange"/> struct.
            </summary>
            <param name="row1">The row1.</param>
            <param name="col1">The col1.</param>
            <param name="row2">The row2.</param>
            <param name="col2">The col2.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Split.CellRange.IsSingleCell">
            <summary>
            Determines whether the range is a single cell.
            </summary>
            <returns>
            	<c>true</c> if [is single cell]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.HierarchicalView.RemoveChildRow(C1.Win.C1TrueDBGrid.HierarchicalView.ChildRow)">
            <summary>
            Removes the child row and all its children
            </summary>
            <param name="cr"></param>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GridStyleCollection">
            <summary>
            Represents a collection of named <see cref="T:C1.Win.C1TrueDBGrid.Style"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridStyleCollection.#ctor(C1.Win.C1TrueDBGrid.BaseGrid.Frame)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridStyleCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridStyleCollection.Add(C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Adds a <see cref="T:C1.Win.C1TrueDBGrid.Style"/> to the end of the collection.
            </summary>
            <param name="style">The Style to add.</param>
            <returns>The index at which the <see cref="T:C1.Win.C1TrueDBGrid.Style"/> has been added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridStyleCollection.Insert(System.Int32,C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Inserts a <see cref="T:C1.Win.C1TrueDBGrid.Style"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the Style should be inserted.</param>
            <param name="style">The Style to insert.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridStyleCollection.IndexOf(C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Gets the index of the specified <see cref="T:C1.Win.C1TrueDBGrid.Style"/>.
            </summary>
            <param name="style"></param>
            <returns>The index of the Style.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridStyleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.Win.C1TrueDBGrid.Style"/> at the specified index.
            </summary>
            <param name="index">Teh zero-based index of the Style to remove.</param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GridStyleCollection.Item(System.Int32)">
            <summary>
            Gets the specified Style from the collection given its index.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GridStyleCollection.Item(System.String)">
            <summary>
            Gets the specified Style from the collection given its name.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> in a <see cref="T:C1.Win.C1TrueDBGrid.Split"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.Insert(System.Int32,C1.Win.C1TrueDBGrid.C1DisplayColumn)">
            <summary>
            Inserts a <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the C1DisplayColumn should be inserted.</param>
            <param name="vc">The C1DataColumn to insert.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.IndexOf(C1.Win.C1TrueDBGrid.C1DisplayColumn)">
            <summary>
            Gets the index of the <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/>.
            </summary>
            <param name="vc"></param>
            <returns>The index of the C1DisplayColumn.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.IndexOf(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Gets the index of the <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> specified by the <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/>.
            </summary>
            <param name="dc"></param>
            <returns>The index of the C1DisplayColumn.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.OnClear">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.OnClearComplete">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.Item(System.Int32)">
            <summary>
            Gets the specified <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> from the collection at the specified index.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.Item(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Gets the specified <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> from the collection wich contains the specified <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DisplayColumnCollection.Item(System.String)">
            <summary>
            Gets the specified <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> from the collection with the specified name.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1DataColumnCollection">
            <summary>
            Contains a collection of <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumnCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumnCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumnCollection.Add(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Adds a C1DataColumn to the end of the collection.
            </summary>
            <param name="dc">The C1DataColumn to add.</param>
            <returns>The index at which the C1DataColumn has been added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the C1DataColumn at the specified index.
            </summary>
            <param name="index">The zero-based index of the row to remove.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumnCollection.Insert(System.Int32,C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Inserts a <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the C1DataColumn should be inserted.</param>
            <param name="dc">The C1DataColumn to insert.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumnCollection.IndexOf(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Gets the index of the specified <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/>.
            </summary>
            <param name="dc"></param>
            <returns>The index of the the C1DataColumn.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DataColumnCollection.IndexOf(System.String)">
            <summary>
            Gets the index of a <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> with the specified DataField.
            </summary>
            <param name="dataField"></param>
            <returns>The index of the the C1DataColumn.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumnCollection.Item(System.Int32)">
            <summary>
            Gets the specified C1DataColumn from the collection at the specified index.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DataColumnCollection.Item(System.String)">
            <summary>
            Gets the specified C1DataColumn from the collection with the specified name.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.SelectedColumnCollection">
            <summary>
            Contains a collection of <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> objects that represent columns that are selected.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedColumnCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the C1DataColumn at the specified index.
            </summary>
            <param name="index">The zero-based index of the row to remove.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedColumnCollection.Add(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Adds a C1DataColumn to the end of the collection.
            </summary>
            <param name="dc">The C1DataColumn to add.</param>
            <returns>The index at which the C1DataColumn has been added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedColumnCollection.Insert(System.Int32,C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Inserts a <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the C1DataColumn should be inserted.</param>
            <param name="dc">The C1DataColumn to insert.</param>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupedColumnCollection">
            <summary>
            Contains a collection of <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> objects that represent columns that are grouped.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupedColumnCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupedColumnCollection.Exchange(System.Int32,System.Int32)">
            <summary>
            Exchanges the C1DataColumn objects at the specified index.
            </summary>
            <param name="src">The zero-based index of the first C1DataColumn.</param>
            <param name="dst">The zero-based index of the second C1DataColumn.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupedColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the C1DataColumn at the specified index.
            </summary>
            <param name="index">The zero-based index of the row to remove.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupedColumnCollection.Add(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Adds a C1DataColumn to the end of the collection.
            </summary>
            <param name="dc">The C1DataColumn to add.</param>
            <returns>The index at which the C1DataColumn has been added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupedColumnCollection.Insert(System.Int32,C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Inserts a <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the C1DataColumn should be inserted.</param>
            <param name="dc">The C1DataColumn to insert.</param>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.SelectedRowCollection">
            <summary>
            Represents a collection of Selected rows.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedRowCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index.
            </summary>
            <param name="index">The zero-based index of the row to remove.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedRowCollection.Add(System.Int32)">
            <summary>
            Adds a row to the end of the collection.
            </summary>
            <param name="row">Row number to add.</param>
            <returns>The index at which the row has been added.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedRowCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts a row at the specified index.
            </summary>
            <param name="index">The zero-based index at which row should be inserted.</param>
            <param name="row">The row to insert.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SelectedRowCollection.IndexOf(System.Int32)">
            <summary>
            Gets the index of the specified row.
            </summary>
            <param name="row"></param>
            <returns>The index of the row.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.SelectedRowCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified Row index from the collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.SplitCollection">
            <summary>
            Represents a collection of Split objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.IMemberTypeEncoder">
            <summary>
            This interface is used to allow objects and collection to serialize
            types of their members in a custom way.
            If a collection implements this interface, TypeToString is invoked during
            serialization of collection items, and for all items for which it returns a
            non-null string, that string is used as the element name of the item.
            If a class implements this interface, AND a member of that class has
            attribute TypeNameSerialization.Custom, AND does not have attribute
            XmlAttribute (i.e. is serialized as an element), TypeToString is invoked
            on the owner when that member is serialized, and if that returns a non-null
            string, that string is used as the value of TypeName attribute.
            When deserializing a collection which implements this interface,
            StringToType is invoked for each new item in the collection, and if that
            returns a non-null type, that type is used to create the item. Otherwise,
            TypeNameSerialization attribute is used.
            When deserializing a class which implements this interface, StringToType
            is invoked on that class for members with TypeNameSerialization.Custom
            attribute set.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.IMemberTypeEncoder.TypeToString(System.Object)">
            <summary>
            Returns a string representing the type of the object
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.IMemberTypeEncoder.StringToType(System.String)">
            <summary>
            Returns the type restored from the serialized string
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SplitCollection.TypeToString(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SplitCollection.StringToType(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SplitCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.SplitCollection.IndexOf(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            Gets the index if the specified Split.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.SplitCollection.Item(System.Int32)">
            <summary>
            Gets the specified Split object from the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.SplitCollection.Item(System.String)">
            <summary>
            Gets the specified Split object from the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.SplitCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the specified Split object from the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.SplitCollection.RowCount">
            <summary>
            Gets the number of vertical splits in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.SplitCollection.ColCount">
            <summary>
            Gets the number of horizontal splits in the collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1PropImagesCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PropImagesCollection.Add(System.Drawing.Image)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1DropDataColumn">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DropDataColumn.#ctor(System.ComponentModel.PropertyDescriptor,C1.Win.C1TrueDBGrid.BaseGrid.Frame)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="owner"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1DropDataColumn.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1DropDisplayColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1DropDisplayColumn.DCIdx">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1TrueDBDropdown">
            <summary>
            C1TrueDBDropdown control.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.#ctor">
            <summary>
            Creates a new instance of the object.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.CreateView">
            <summary>
            Creates the view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.CreateView(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            Creates the view.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.initializeStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.RowDividerChanged(System.Object,System.EventArgs)">
            <summary>
            notifications
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AddCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Controls the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> used to change the appearance for cells meeting the specified condition.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="style">
            <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that specifies appearance attributes.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)">
            <summary>
            Controls the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> used to change the appearance of cells according to their contents.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
            <param name="style">
            <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that specifies appearance attributes.
            </param>
            <param name="regex">
            A regular expression string.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ClearCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag)">
            <summary>
            Restores the default layout.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ClearRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag)">
            <summary>
            Removes a cell condition established with a previous call to the <see cref="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AddRegexCellStyle(C1.Win.C1TrueDBGrid.CellStyleFlag,C1.Win.C1TrueDBGrid.Style,System.String)"/> method.
            </summary>
            <param name="condition">
            Combination of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> enumerations.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ClearFields">
            <summary>
            Restores the default layout.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ColContaining(System.Int32)">
            <summary>
            Returns the column index for the column containing the specified X coordinate.
            </summary>
            <param name="x">
            The horizontal coordinate (X value) in pixels.
            </param>
            <returns>
            The index of the column in the <see cref="P:C1.Win.C1TrueDBGrid.Split.DisplayColumns"/> collection beneath the specified X coordinate. 
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.RowContaining(System.Int32)">
            <summary>
            Returns the zero-based index of the display row containing the Y specified coordinate.
            </summary>
            <param name="y">
            The vertical coordinate (Y value) in pixels.
            </param>
            <returns>
            The display row index beneath the specified Y coordinate.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.HoldFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Rebind(System.Boolean)">
            <summary>
            Reinitializes grid with data from its data source.
            </summary>
            <param name="holdFields">
            True to preserves current column layout.  False retrieves the schema from the datasource.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Rebind">
             <summary>
            
             </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ScrollCtl(System.Int32,System.Int32)">
            <summary>
            Scrolls the data area by the specified number of rows and columns
            </summary>
            <param name="Cols"></param>
            <param name="Rows"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnColMove(C1.Win.C1TrueDBGrid.ColMoveEventArgs)">
            <summary>
            Occurs when the user has moved a column.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnColResize(C1.Win.C1TrueDBGrid.ColResizeEventArgs)">
            <summary>
            Occurs when the user has resized a column.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnDataSourceChanged(System.EventArgs)">
            <summary>
            Occurs when the grids DataSource has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnDropDownOpen(System.EventArgs)">
            <summary>
            Occurs when the dropdown is opened.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnDropDownClose(System.EventArgs)">
            <summary>
            Occurs when the dropdown closes.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnFetchRowStyle(C1.Win.C1TrueDBGrid.FetchRowStyleEventArgs)">
            <summary>
            Occurs whenever the grid is about to display a row of data and the FetchRowStyles property is True.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnFirstRowChange(C1.Win.C1TrueDBGrid.SplitEventArgs)">
            <summary>
            Occurs when the first displayed row of a control or split is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnFootClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Occurs when the user clicks on the column footer.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnFormatText(C1.Win.C1TrueDBGrid.FormatTextEventArgs)">
            <summary>
            Occurs when the grid is about to display cell data in a column whose NumberFormat property is set to the string FormatText Event.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnHeadClick(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Occurs when the user clicks on the column header.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnLeftColChange(C1.Win.C1TrueDBGrid.SplitEventArgs)">
            <summary>
            Occurs when the first visible column of a grid or split is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnRowChange(System.EventArgs)">
            <summary>
            Occurs when the focus moves to a different row.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnRowResize(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Occurs when the user has finished resizing a grid row.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.On_Scroll(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Occurs when the user scrolls the grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnSelChange(C1.Win.C1TrueDBGrid.CancelEventArgs)">
            <summary>
            Occurs when the user selects a different range of rows or columns.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnUnboundColumnFetch(C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs)">
            <summary>
            Occurs when the grid needs to display the value of a cell in an unbound column.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnValueItemError(C1.Win.C1TrueDBGrid.ColEventArgs)">
            <summary>
            Occurs when the user attempts to enter invalid data into a column that is using value lists.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnFetchScrollTips(C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs)">
            <summary>
            Occurs whenever the grid has focus and the scrollbar thumb is moved using the mouse.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.GetCurrentSelIndex">
            <summary>
            Gets the current selected index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.WndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value></value>
            <returns>
            The default <see cref="T:System.Drawing.Size"/> of the control.
            </returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AllowColMove">
            <summary>
            Gets or sets a value indicating the ability to move columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AllowColSelect">
            <summary>
            Gets or sets a value indicating the ability to select columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AllowRowSizing">
            <summary>
            Gets or sets how interactive row resizing is performed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AlternatingRows">
            <summary>
            Gets or sets a value indicating whether the dropdown uses the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OddRowStyle"/> for odd-numbered rows and <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.EvenRowStyle"/> for even-numbered rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Bookmark">
            <summary>
            Gets or sets the current row position of the underlying CurrencyManager.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Col">
            <summary>
            Gets or sets the column position.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ColumnFooters">
            <summary>
            Gets or sets a value indicating the visibility of column footers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ColumnCaptionHeight">
            <summary>
            Gets or sets the height of column captions.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ColumnFooterHeight">
            <summary>
            Gets or sets the height of column footers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ColumnHeaders">
            <summary>
            Gets or sets a value indicating the visibility of column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Columns">
            <summary>
            Gets the collection of C1DataColumn objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DisplayColumns">
            <summary>
            Gets the collection of C1DisplayColumn objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.CurrentCellVisible">
            <summary>
            Gets or sets a value indicating the visibility of the current cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DataField">
            <summary>
            Gets or sets the name of the column used to update the associated grid column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ValueMember">
            <summary>
            Gets or sets the property used to update the associated grid column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DeadAreaBackColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DefColWidth">
            <summary>
            Gets or sets the default width for all grid columns.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DropdownWidth">
            <summary>
            Gets or sets the width of the dropdown.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.EmptyRows">
            <summary>
            Gets or sets a value that determines how the grid displays rows below the last data row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.EvenRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that controls the appearance of an even-numbered row when using <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AlternatingRows"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ExtendRightColumn">
            <summary>
            Gets or sets a value that determines how the last column will extend to fill the dead area of the dropdown.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FetchRowStyles">
            <summary>
            Gets or sets a value indicating whether the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FetchRowStyle"/> event will be raised.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FirstRow">
            <summary>
            Gets or sets the row index for the first visible row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FooterStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that controls the appearance of column footers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.HeadingStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that controls the appearance of the grids column headers.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.HighLightRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that controls the appearance of a highlighted row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.IntegralHeight">
            <summary>
            Gets or sets a value indicating whether the control should resize to avoid showing partial items.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.LayoutFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.LayoutName">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.LayoutURL">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.LeftCol">
            <summary>
            Gets or sets the zero-based index of the leftmost column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ListField">
            <summary>
            Gets or sets the name of the column used for incremental search.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DisplayMember">
            <summary>
            Gets or sets the property used for incremental search.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.OddRowStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that controls the appearance of an odd-numbered row when using <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.AlternatingRows"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Row">
            <summary>
            Gets or sets the the current row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.RowDivider">
            <summary>
            Gets or sets the style of the border drawn between rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.RowSubDividerColor">
            <summary>
            Gets or sets the color of the subrow divider in a multi-line dropdown.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.RowTracking">
            <summary>
            Gets or sets a value that determines if rows are highlighted under the mouse.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.VScrollBar">
            <summary>
            Gets the <see cref="T:C1.Win.C1TrueDBGrid.Util.VBar"/> object that controls the appearance of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.HScrollBar">
            <summary>
            Gets the <see cref="T:C1.Win.C1TrueDBGrid.Util.HBar"/> object that controls the appearance of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ScrollTips">
            <summary>
            Gets or sets a value that determines whether the grid displays a pop-up text window when the scrollbar thumb is dragged.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style">
            <summary>
            Gets or sets the root <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Styles">
            <summary>
            Gets the collection of named <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ValueTranslate">
            <summary>
            Gets or sets a value that determines how the grid display values in a column.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.VisibleCols">
            <summary>
            Gets the number of visible columns in the dropdown.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.VisibleRows">
            <summary>
            Gets the number of visible rows in the dropdown.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ColMove">
            <summary>
            Occurs when the user has moved a column.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ColResize">
            <summary>
            Occurs when the user has resized a column.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DataSourceChanged">
            <summary>
            Occurs when the grids DataSource has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DropDownOpen">
            <summary>
            Occurs when the dropdown is opened.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.DropDownClose">
            <summary>
            Occurs when the dropdown closes.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FetchRowStyle">
            <summary>
            Occurs whenever the grid is about to display a row of data and the FetchRowStyles property is True.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FirstRowChange">
            <summary>
            Occurs when the first displayed row of a control or split is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FootClick">
            <summary>
            Occurs when the user clicks on the column footer.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FormatText">
            <summary>
            Occurs when the grid is about to display cell data in a column whose NumberFormat property is set to the string FormatText Event.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.HeadClick">
            <summary>
            Occurs when the user clicks on the column header.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.LeftColChange">
            <summary>
            Occurs when the first visible column of a grid or split is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.RowChange">
            <summary>
            Occurs when the focus moves to a different row.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.RowResize">
            <summary>
            Occurs when the user has finished resizing a grid row.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Scroll">
            <summary>
            Occurs when the user scrolls the grid.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.SelChange">
            <summary>
            Occurs when the user selects a different range of rows or columns.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.UnboundColumnFetch">
            <summary>
            Occurs when the grid needs to display the value of a cell in an unbound column.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.ValueItemError">
            <summary>
            Occurs when the user attempts to enter invalid data into a column that is using value lists.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.FetchScrollTips">
            <summary>
            Occurs whenever the grid has focus and the scrollbar thumb is moved using the mouse.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.CaptionStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that controls the appearance of the caption area.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.RecordSelectorStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBDropdown.Style"/> object that controls the appearance of the RecordSelectors.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.DropDownForm">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.#ctor(C1.Win.C1TrueDBGrid.BaseGrid.Frame)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.OnActivated(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.OnDeactivate(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.CloseDropDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.CloseDropDown(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.CreateHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.DropDownForm.CreateParams">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.DropdownView">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropdownView.beginHorizontalResizing(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.DropdownView.DropDown">
            <summary>
            splits properties
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.SortDirEnum">
            <summary>
            Specifies the glyph used to denote a sort direction in the column header.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.SortDirEnum.None">
            <summary>
            Column is not sorted.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.SortDirEnum.Ascending">
            <summary>
            Column is sorted in ascending order.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.SortDirEnum.Descending">
            <summary>
            Column is sorted in descending order.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.MultiSelectEnum">
            <summary>
            Specifies the UI behavior for selecting rows and columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MultiSelectEnum.None">
            <summary>
            Multiple selection is disabled but single selection is permitted. When the user clicks a record selector, the current selection is cleared, and the clicked row is then selected and added to either the SelectedRows or SelectedCols collections. The Ctrl and Shift keys are ignored, and the user can only select one row at a time.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MultiSelectEnum.Simple">
            <summary>
            Multiple selection is enabled using the mouse. When the user clicks a record selector, the selection is cleared and the clicked row is selected and added to either the SelectedRows or Selected Cols collections. However, if the user holds down the Ctrl key while clicking, the clicked row is added to the current selection. The user can also select a range of rows by selecting the first row in the range, then selecting the last row in the range while holding down the Shift key.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MultiSelectEnum.Extended">
            <summary>
            Multiple selection is enabled using the mouse. The user can also select records with the following key combinations: Shift + Up Arrow, Shift + Down Arrow, Shift + PgUp, and Shift + PgDn. NOTE:  The user will not be able to select a single cell, instead the entire corresponding row will be selected.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FlatModeEnum">
            <summary>
            Specifies how 3D elements are rendered.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.FlatModeEnum.Standard">
            <summary>
            The grid’s column headers and recordselectors are rendered with an inset three-dimensional look
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.FlatModeEnum.Flat">
            <summary>
            Three-dimensional elements appear flat
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.FlatModeEnum.Popup">
            <summary>
            Three-dimensional elements are flat, but when the user drags the cursor over a column heading or recordselector, they become three-dimensional and appear to pop up.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.FlatModeEnum.System">
            <summary>
            Three-dimensional elements uses XP Themes if available.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.SizeModeEnum">
            <summary>
            Specifies the sizing mode for splits.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.SizeModeEnum.Scalable">
            <summary>
            The <see cref="P:C1.Win.C1TrueDBGrid.Split.SplitSize"/> indicates the relative size of the split with respect to other scalable splits. 
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.SizeModeEnum.Exact">
            <summary>
            The <see cref="P:C1.Win.C1TrueDBGrid.Split.SplitSize"/> indicates the size of the split in pixels.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.SizeModeEnum.NumberOfColumns">
            <summary>
            The <see cref="P:C1.Win.C1TrueDBGrid.Split.SplitSize"/> indicates the number of columns displayed in the split.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.AlignVertEnum">
            <summary>
            Specifies the vertical alignment of text or images in a cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AlignVertEnum.Top">
            <summary>
            Text is rendered at the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AlignVertEnum.Center">
            <summary>
            Text is rendered at the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AlignVertEnum.Bottom">
            <summary>
            Text is rendered at the bottom of the cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.AlignHorzEnum">
            <summary>
            Specifies the horizontal alignment of text or images in a cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AlignHorzEnum.General">
            <summary>
            Text is aligned Near and numeric values Far
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AlignHorzEnum.Near">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AlignHorzEnum.Center">
            <summary>
            Text is aligned centered.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AlignHorzEnum.Far">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AlignHorzEnum.Justify">
            <summary>
            Text is aligned with respect to the cells boundries.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ScrollBarStyleEnum">
            <summary>
            Specifies the visibility of ScrollBars.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ScrollBarStyleEnum.None">
            <summary>
            ScrollBars are never displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ScrollBarStyleEnum.Always">
            <summary>
            ScrollBars are always displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ScrollBarStyleEnum.Automatic">
            <summary>
            ScrollBars are displayed only if the object's contents extend beyond its borders.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.LineStyleEnum">
            <summary>
            Specifies the line style for row and column dividers.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.LineStyleEnum.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.LineStyleEnum.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.LineStyleEnum.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.LineStyleEnum.Raised">
            <summary>
            Line with 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.LineStyleEnum.Inset">
            <summary>
            Line with 3D inset appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.DataViewEnum">
            <summary>
            Specifies how the grid displays its data.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DataViewEnum.Normal">
            <summary>
            The grid will only display flat files and will not support a hierarchical view. If the data source is a hierarchical dataset, the grid will only display data from the master table.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DataViewEnum.Inverted">
            <summary>
            Rows will be represented horizontally and columns vertically.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DataViewEnum.Form">
            <summary>
            The data will be displayed in a convenient data entry form.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DataViewEnum.GroupBy">
            <summary>
            A grouping area is created at the top of the grid; any columns that are placed into this area become part of the GroupedColumn collection. When in group mode, grid columns can be moved into or out of the grouping area with the Add and RemoveAt methods, respectively. Users can also perform this action by selecting and dragging a column into or out of the grouping. Users can customize the display of the grouped row with styles and automatically compute aggregates for columns that are grouped. The expanded/collapsed state of the grouping can also be specified.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DataViewEnum.MultipleLines">
            <summary>
            The grid will display all the fields in the current grid area with multiple lines.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DataViewEnum.Hierarchical">
            <summary>
            The grid will display DataSets in a hierarchical format. At run time, users can expand and collapse hierarchical recordset Bands using a treeview-like interface.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DataViewEnum.MultipleLinesFixed">
            <summary>
            The grid will display all the fields in the current grid area with multiple lines. The number of subrows does not change once set.  The number of subrows can be set using the LinesPerRow property.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.AddNewModeEnum">
            <summary>
            Provides a description of the current addnew state with respect to the current cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AddNewModeEnum.NoAddNew">
            <summary>
            The current cell is not on the addnew row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AddNewModeEnum.AddNewCurrent">
            <summary>
            The current cell is on the addnew row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AddNewModeEnum.AddNewPending">
            <summary>
            There is an Add New operation pending.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.CellTipEnum">
            <summary>
            Specifies the behavior of the pop-up window when the cursor is idle over the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellTipEnum.NoCellTips">
            <summary>
            No cell tips will be displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellTipEnum.Anchored">
            <summary>
            Cell tips will be displayed in the bounding rectable of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellTipEnum.Floating">
            <summary>
            Cell tips will be displayed under the mouse cursor.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ExposeCellModeEnum">
            <summary>
            Specifies how the grid exposes the rightmost column when it gets focus.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ExposeCellModeEnum.ScrollOnSelect">
            <summary>
            The grid will scroll to the left to display the rightmost column in its entirety.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ExposeCellModeEnum.ScrollOnEdit">
            <summary>
            The grid will not move when the rightmost column is clicked initially. However, if the user attempts to edit the cell, then the grid will scroll to the left to display the rightmost column in its entirety.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ExposeCellModeEnum.ScrollNever">
            <summary>
            The grid will always leave the rightmost column clipped.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum">
            <summary>
            Specifies the location of the foreground image in a cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum.Near">
            <summary>
            Image is rendered in the near side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum.Far">
            <summary>
            Image is rendered in the far side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum.LeftOfText">
            <summary>
            Image is rendered to the left of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum.RightOfText">
            <summary>
            Image is rendered to the right of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum.TopOfText">
            <summary>
            Image is rendered on top of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum.BottomOfText">
            <summary>
            Image is rendered below any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum.PictureOnly">
            <summary>
            Text is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ForeGroundPicturePositionEnum.TextOnly">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BackgroundPictureDrawModeEnum">
            <summary>
            Specifies how the background image is rendered.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BackgroundPictureDrawModeEnum.Center">
            <summary>
            The image is rendered in the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BackgroundPictureDrawModeEnum.Tile">
            <summary>
            The image is tiled in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BackgroundPictureDrawModeEnum.Stretch">
            <summary>
            The image is stretched to fit within the cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.RowSizingEnum">
            <summary>
            Specifies how rows can be resized.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowSizingEnum.None">
            <summary>
            Row can not be resized.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowSizingEnum.AllRows">
            <summary>
            All rows will be sized to the same height or width.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowSizingEnum.IndividualRows">
            <summary>
            Rows can be sized indepentently.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.RowSelectorEnum">
            <summary>
            Specifies which rows are to be previewed/printed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowSelectorEnum.AllRows">
            <summary>
            All rows are to be previewed/printed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowSelectorEnum.SelectedRows">
            <summary>
            Only selected rows will be previewed/printed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowSelectorEnum.CurrentRow">
            <summary>
            Only the current row will be previewed/printed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PointAtEnum">
            <summary>
            Specifies the type of ui-element for a coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.NotInGrid">
            <summary>
            Coordinates are not in the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtCaption">
            <summary>
            Coordinates are in the caption area
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtSplitHeader">
            <summary>
            Coordinates are in the split's header
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtSplitSizeBox">
            <summary>
            Coordinates are in the split's resizing box
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtRowSelect">
            <summary>
            Coordinates are in the row selector.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtRowSize">
            <summary>
            Coordinates are in the row resizing box.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtColumnHeader">
            <summary>
            Coordinates are in the column headers.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtColumnFooter">
            <summary>
            Coordinates are in the column footers.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtColumnSize">
            <summary>
            Coordinates are in the column resizing box.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtDataArea">
            <summary>
            Coordinates are in the data area.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtGroupArea">
            <summary>
            Coordinates are in the grouping area.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtGroupHeader">
            <summary>
            Coordinates are in the group header.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtEmptyRow">
            <summary>
            Coordinates are in the empty row area.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtAddNewRow">
            <summary>
            Coordinates are in the addnew row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtEmptyColumn">
            <summary>
            Coordinates are in the empty column area.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PointAtEnum.AtFilterBar">
            <summary>
            Coordinates are in the filter bar.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PresentationEnum">
            <summary>
            Specifies how ValueItems are rendered.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PresentationEnum.Normal">
            <summary>
            Values are displayed as text or graphics.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PresentationEnum.RadioButton">
            <summary>
            Values are displayed as a group of Radio Buttons.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PresentationEnum.ComboBox">
            <summary>
            Values are displayed as a dropdown combobox.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PresentationEnum.SortedComboBox">
            <summary>
            Values are displayed as a dropdown combobox in sorted order.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PresentationEnum.CheckBox">
            <summary>
            Values are displayed as a checkbox.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.TabActionEnum">
            <summary>
            Specifies how focus is handled when the Tab key is entered.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.TabActionEnum.ControlNavigation">
            <summary>
            The tab key moves to the next or previous control on the form.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.TabActionEnum.ColumnNavigation">
            <summary>
            The tab key moves the current cell to the next or previous column. However, if this action would cause the current row to change, then the next or previous control on the form receives focus.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.TabActionEnum.GridNavigation">
            <summary>
            The tab key moves the current cell to the next or previous column. The behavior of the tab key at row boundaries is determined by the <see cref="P:C1.Win.C1TrueDBGrid.C1TrueDBGrid.WrapCellPointer"/> property. When this setting is used, the tab key never results in movement to another control.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BorderTypeEnum">
            <summary>
            Specifies the borders for a <see cref="T:C1.Win.C1TrueDBGrid.Style"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BorderTypeEnum.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BorderTypeEnum.Flat">
            <summary>
            Borders have a Flat appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BorderTypeEnum.Raised">
            <summary>
            Borders have a 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BorderTypeEnum.Inset">
            <summary>
            Borders have a 3D inset appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BorderTypeEnum.Groove">
            <summary>
            A line around the inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BorderTypeEnum.Fillet">
            <summary>
            A fillet type border.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BorderTypeEnum.RaisedBevel">
            <summary>
            Borders have a 3D raised with a bevel.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.BorderTypeEnum.InsetBevel">
            <summary>
            Borders have a 3D inset with a bevel.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.DirectionAfterEnterEnum">
            <summary>
            Specifies which cell gets focus when the enter key is pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DirectionAfterEnterEnum.MoveNone">
            <summary>
            Cell currency doesn't change.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DirectionAfterEnterEnum.MoveRight">
            <summary>
            The next cell will be the cell to the right of the current cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DirectionAfterEnterEnum.MoveDown">
            <summary>
            The next cell will be the cell below the current cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DirectionAfterEnterEnum.MoveLeft">
            <summary>
            The next cell will be the cell to the left of the current cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DirectionAfterEnterEnum.MoveUp">
            <summary>
            The next cell will be the cell above the current cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.CellStyleFlag">
            <summary>
            Describes the disposition of a cell.
            <para>This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.</para> 
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellStyleFlag.NormalCell">
            <summary>
            The cell satisfies none of the conditions. For grouped rows, this is the only applicable cell style.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellStyleFlag.CurrentCell">
            <summary>
            The cell is the that currently has focus. At any given time, only one cell can have this status. When the MarqueeStyle property is set to Floating Editor, this condition is ignored.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellStyleFlag.MarqueeRow">
            <summary>
            The cell is part of a highlighted row marquee. When the MarqueeStyle property indicates that the entire current row is to be highlighted, all visible cells in the current row have this additional condition set.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellStyleFlag.UpdatedCell">
            <summary>
            The cell contents have been modified by the user but not yet written to the datasource. This condition is also set when cell contents have been modified in code with the Text or Value properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellStyleFlag.SelectedRow">
            <summary>
            The cell is part of a row selected by the user or in code. The SelectedRowCollection contains the index for each selected row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.CellStyleFlag.AllCells">
            <summary>
            All cells.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.MarqueeEnum">
            <summary>
            Specifies how the current cell is highlighted.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MarqueeEnum.DottedCellBorder">
            <summary>
            The current cell within the current row will be highlighted by drawing a dotted border around the cell. In Microsoft Windows terminology, this is usually called a focus rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MarqueeEnum.SolidCellBorder">
            <summary>
            The current cell within the current row will be highlighted by drawing a solid box around the current cell. This is more visible than the dotted cell border, especially when 3D divider properties are used for the grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MarqueeEnum.HighlightCell">
            <summary>
            The entire current cell will be drawn using the attributes of the HighlightRowStyle property. This provides a very distinctive block-style highlight for the current cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MarqueeEnum.HighlightRow">
            <summary>
            The entire row containing the current cell will be drawn using the attributes of the HighlightRowStyle property. In this mode, it is not possible to visually determine which cell is the current cell, only the current row. When the grid or split is not editable, this setting is often preferred, since cell position is then irrelevant.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MarqueeEnum.HighlightRowRaiseCell">
            <summary>
            The entire row will be highlighted as in setting 3, but the current cell within the row will be "raised" so that it appears distinctive. This setting does not appear clearly with all background color and divider settings. The best effect is achieved by using 3D dividers and a light gray background.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MarqueeEnum.NoMarquee">
            <summary>
            The marquee will not be shown. This setting is useful for cases where the current row is irrelevant, or when not wanting to draw the user's attention to the grid until necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MarqueeEnum.FloatingEditor">
            <summary>
            The current cell will be highlighted by a floating text editor window with a blinking caret (as in Microsoft Access).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.MarqueeEnum.DottedRowBorder">
            <summary>
            The entire current row will be highlighted by drawing a dotted border around it. This effect is similar to setting 0.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ScrollBarEnum">
            <summary>
            Identifies the type of scrollbar.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ScrollBarEnum.Horizontal">
            <summary>
            The Horizontal scrollbar.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ScrollBarEnum.Vertical">
            <summary>
            The Vertical scrollbar.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.RowTypeEnum">
            <summary>
            Identifies the type of row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowTypeEnum.DataRow">
            <summary>
            Row is a datarow.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowTypeEnum.CollapsedGroupRow">
            <summary>
            Row is a collapsed group row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowTypeEnum.ExpandedGroupRow">
            <summary>
            Row is an expanded group row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowTypeEnum.FooterRow">
            <summary>
            Row is a footerrow.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.RowTypeEnum.ChildRow">
            <summary>
            Row is a childrow.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.OutlineModeEnum">
            <summary>
            Specifies the initial expanded or collapsed state of a grouped row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.OutlineModeEnum.StartCollapsed">
            <summary>
            Grouped rows initial display is collapsed (default).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.OutlineModeEnum.StartExpanded">
            <summary>
            Grouped rows initial display is expanded.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupPositionEnum">
            <summary>
            Specifies how the grouped column should be displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupPositionEnum.Header">
            <summary>
            Grouped columns contain just a header row (default).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupPositionEnum.HeaderAndFooter">
            <summary>
            Grouped columns contain a header and footer row.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.AggregateEnum">
            <summary>
            Specifies the type of aggregate that is computed for a grouped row.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.None">
            <summary>
            No aggregate is calculated or displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.Count">
            <summary>
            Count of non-empty values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.Sum">
            <summary>
            Sum of numerical values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.Average">
            <summary>
            Average of the numerical values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.Min">
            <summary>
            Minimum value (numerical, string, or date).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.Max">
            <summary>
            Maximum value (numerical, string, or date).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.Std">
            <summary>
            Standard deviation (using formula for Sample, n-1).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.StdPop">
            <summary>
            Standard deviation (using formula for Population, n).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.Var">
            <summary>
            Variance (using formula for Sample, n-1).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.VarPop">
            <summary>
            Variance (using formula for Population, n).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.AggregateEnum.Custom">
            <summary>
            Causes the GroupAggregate event to be raised.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.DropdownWidthEnum">
            <summary>
            Specifies the width of a C1TrueDBDropdown for a cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DropdownWidthEnum.Default">
            <summary>
            The width of the dropdown is the control width.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.DropdownWidthEnum.Column">
            <summary>
            The width of the dropdown is the column width.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColumnMergeEnum">
            <summary>
            Specifies how columns are merged.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ColumnMergeEnum.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ColumnMergeEnum.Free">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.ColumnMergeEnum.Restricted">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GradientModeEnum">
            <summary>
            Specifies the type of gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GradientModeEnum.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GradientModeEnum.BackwardDiagonal">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GradientModeEnum.ForwardDiagonal">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GradientModeEnum.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GradientModeEnum.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupIntervalEnum">
            <summary>
            Specifies how rows are grouped.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupIntervalEnum.Default">
            <summary>
            Rows are grouped by their values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupIntervalEnum.Date">
            <summary>
            Rows are grouped by the date portion of their values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupIntervalEnum.Month">
            <summary>
            Rows are grouped by the month portion of their values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupIntervalEnum.Year">
            <summary>
            Rows are grouped by the year portion of their values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupIntervalEnum.Alphabetical">
            <summary>
            Rows are grouped by the first character of their values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupIntervalEnum.DateSpan">
            <summary>
            Rows are grouped according to their date values.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GroupIntervalEnum.Custom">
            <summary>
            Rows are grouped by raising the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupInterval"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.CancelEventHandler">
            <summary>
            Raised before an action is performed on the grid and the action can be canceled.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.CancelEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeDelete"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeInsert"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeUpdate"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeRowColChange"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowResize"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Scroll"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.SelChange"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeOpen"/>, and <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.BeforeClose"/> events.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.CancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating that the action should not be performed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.CancelScrollEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Scroll"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.CancelScrollEventArgs.OldValue">
            <summary>
            Gets the current scroll position.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.CancelScrollEventArgs.NewValue">
            <summary>
            Gets the new scroll position.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BeforeColEditEventHandler">
            <summary>
            Raised before a column enters edit mode.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BeforeColEditEventArgs">
            <summary>
            Provides data for the BeforeColEdit event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BeforeColEditEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating that editing should be disallowed.
            </summary>
            <remarks>If event procedure sets the Cancel argument to True, the cell will not enter edit mode. Otherwise, the ColEdit event is raised immediately, followed by the Change event for the KeyChar property, if non-zero.</remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BeforeColEditEventArgs.KeyChar">
            <summary>
            Indicates the character that initiated the editing operation.
            </summary>
            <remarks>The BeforeColEdit event occurs just before the user enters edit mode by typing a character. If a floating editor marquee is not in use, this event also occurs when the user clicks the current cell or double clicks another cell.</remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BeforeColEditEventArgs.ColIndex">
            <summary>
            Indicates the position in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BeforeColEditEventArgs.Column">
            <summary>
            Gets the C1DisplayColumn for the column being edited.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BeforeColUpdateEventHandler">
            <summary>
            Raised after editing is completed in a cell.
            </summary>
            <remarks>The BeforeColUpdate event occurs after editing is completed in a cell, but before data is moved from the cell to the grid's internal copy buffer. 
            The data specified by the OldValue argument moves from the cell to the grid's copy buffer when the user completes editing within a cell, as when tabbing to another column in the same row, pressing the Enter key, or clicking on another cell. Before the data has been moved from the cell into the grid's copy buffer, the BeforeColUpdate event is triggered. This event gives the application an opportunity to check the individual grid cells before they are committed to the grid's copy buffer. 
            If your event procedure sets the Cancel argument to True, the previous value is restored in the cell, the grid retains focus, and the AfterColUpdate event is not triggered. Change the current cell text by setting OldValue to the value wanted to display (other than the previous value).
            To restore OldValue in the cell and permit the user to move focus off of the cell, set Cancel to False and set the cell to OldValue as follows: </remarks>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs">
            <summary>
            Provides data for the BeforeColUpdate event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs.Cancel">
            <summary>
            Gets or sets a value that prevents the user from moving focus to another cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs.OldValue">
            <summary>
            Gets or sets the value of the original cell data.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs.ColIndex">
            <summary>
            Indicates the position in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BeforeColUpdateEventArgs.Column">
            <summary>
            Gets the C1DisplayColumn for the column being edited.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColResizeEventHandler">
            <summary>
            Raised after a column has been resized.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColResizeEventArgs">
            <summary>
            Provides data for the ColReisize event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColResizeEventArgs.ColIndex">
            <summary>
            Indicates the position in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColResizeEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating that sizing should be ignored.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColResizeEventArgs.Column">
            <summary>
            Gets the C1DisplayColumn for the column being sized.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColEventHandler">
            <summary>
            Raised when an action is perfored on a column.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterColUpdate"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterColEdit"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.HeadClick"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FootClick"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColEdit"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ButtonClick"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ComboSelect"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ValueItemError"/>, and <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FilterButtonClick"/> events.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColEventArgs.ColIndex">
            <summary>
            Indicates the position in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColEventArgs.Column">
            <summary>
            Gets the C1DisplayColumn.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupColEventHandler">
            <summary>
            Raised when grouping columns.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupColEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupHeadClick"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupColEventArgs.ColIndex">
            <summary>
            Indicates the position in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupColEventArgs.DataColumn">
            <summary>
            The C1DataColumn that was clicked.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.OwnerDrawCellEventHandler">
            <summary>
            Raised when a cell is to rendered by the event code.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawCell"/> and <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawCellPrint"/> events.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.CellRect">
            <summary>
            The bounding rectangle for the cell that needs to be rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.Row">
            <summary>
            The index of the row for the cell being rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.Split">
            <summary>
            The index of the split for the cell being rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.Col">
            <summary>
            The index of the column in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.Graphics">
            <summary>
            The GDI+ graphics object to render on.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.Text">
            <summary>
            The text of the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.Style">
            <summary>
            The Style used to render the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.Handled">
            <summary>
            Indicates whether the event code rendered the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.Column">
            <summary>
            The C1DisplayColumn being rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs.DrawCellFlags">
            <summary>
            Indicates whether the custom renderer handles the background, border or content. 
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.OwnerDrawPageEventHandler">
            <summary>
            Raised when custom page headers and footers need to be rendered.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.OwnerDrawPageEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawPageHeader"/> and <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.OwnerDrawPageHeader"/> events.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.OwnerDrawPageEventArgs.OwnerDrawPrint">
            <summary>
            The <see cref="T:C1.Win.C1TrueDBGrid.C1OwnerDrawPrint"/> object used to render the custom header or footer
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.RowColChangeEventHandler">
            <summary>
            Raised after the current Row or Column changes.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.RowColChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.RowColChange"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.RowColChangeEventArgs.LastRow">
            <summary>
            The previous row index.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.RowColChangeEventArgs.LastCol">
            <summary>
            The previous column index of the DisplayColumns collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.UnboundColumnFetchEventHandler">
            <summary>
            Raised when an unbound column needs to be rendered.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.UnboundColumnFetch"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs.Row">
            <summary>
            The index of the row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs.Col">
            <summary>
            Indicates the position in the Columns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs.Column">
            <summary>
            The <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UnboundColumnFetchEventArgs.Value">
            <summary>
            Gets or sets the value of the Column.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.SplitEventHandler">
            <summary>
            Raised when Split specific actions are performed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.SplitEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FirstRowChange"/> and <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.LeftColChange"/> events.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.SplitEventArgs.SplitIndex">
            <summary>
            Indicates the position of the Split in the Splits collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FormatTextEventHandler">
            <summary>
            Raised when a cell needs custom formatting.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FormatTextEventArgs">
            <summary>
            Provides data for the FromatText event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FormatTextEventArgs.ColIndex">
            <summary>
            Indicates the position in the Columns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FormatTextEventArgs.Row">
            <summary>
            The row index for the cell to be formatted.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FormatTextEventArgs.Value">
            <summary>
            The value to format.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FormatTextEventArgs.Column">
            <summary>
            The <see cref="T:C1.Win.C1TrueDBGrid.C1DataColumn"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchCellStyleEventHandler">
            <summary>
            Raised when the <see cref="T:C1.Win.C1TrueDBGrid.Style"/> used to render a cell needs customization.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchCellStyle"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs.Condition">
            <summary>
            The sum of one or more <see cref="T:C1.Win.C1TrueDBGrid.CellStyleFlag"/> constants describing the disposition of the cell being rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs.Split">
            <summary>
            Indicates the position in the Splits collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs.Row">
            <summary>
            The index of the row for the cell being rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs.Col">
            <summary>
            The index of the column in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs.CellStyle">
            <summary>
            The Style used to render the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellStyleEventArgs.Column">
            <summary>
            The C1DisplayColumn being rendered.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchGroupCellStyleEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchCellStyle"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchGroupCellStyleEventArgs.GroupText">
            <summary>
            Value that the data is being grouped on.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchGroupCellStyleEventArgs.StartRowIndex">
            <summary>
            First row index that is being grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchGroupCellStyleEventArgs.EndRowIndex">
            <summary>
            Last row index that is being grouped.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchRowStyleEventHandler">
            <summary>
            Raised when the <see cref="T:C1.Win.C1TrueDBGrid.Style"/> used to render a row needs customization.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchRowStyleEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchRowStyle"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchRowStyleEventArgs.Split">
            <summary>
            Indicates the position in the Splits collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchRowStyleEventArgs.Row">
            <summary>
            The index of the row for the cell being rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchRowStyleEventArgs.CellStyle">
            <summary>
            The Style used to render the row.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColMoveEventHandler">
            <summary>
            Raised when a column is being repositioned.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ColMoveEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ColMove"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColMoveEventArgs.Position">
            <summary>
            Indicates the target index of the column being moved.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColMoveEventArgs.ColIndex">
            <summary>
            Indicates the starting position in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColMoveEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating that the action should not be performed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ColMoveEventArgs.Column">
            <summary>
            Gets the C1DisplayColumn that is being moved.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupColMoveEventHandler">
            <summary>
            Raised when a column is moved into or out of the grouping area.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupColMoveEventArgs">
            <summary>
             Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupColMove"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupColMoveEventArgs.DataColumn">
            <summary>
            The C1DataColumn for the column being moved.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchCellTipsEventHandler">
            <summary>
            Raised when cell tips are to be displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchCellTips"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs.SplitIndex">
            <summary>
            Indicates the position of the Split in the Splits collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs.ColIndex">
            <summary>
            Indicates the position in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs.Row">
            <summary>
            The index of the row for the cell tip.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs.CellTip">
            <summary>
            The text to be displayed in the cell tip.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs.FullyDisplayed">
            <summary>
            Indicates if the contents of the cell is fully displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs.TipStyle">
            <summary>
            The Style used to render the cell tip.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchCellTipsEventArgs.Column">
            <summary>
            The C1DisplayColumn that this tip is associated with.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BandEventHandler">
            <summary>
            Raised when a hierarchical node is expanded or collapsed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.BandEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Expand"/> and <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Collapse"/> events.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BandEventArgs.Band">
            <summary>
            Indicates the recordset level that holds the current row within a master-detail hierarchy.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.BandEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating that the action should not be performed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchScrollTipsEventHandler">
            <summary>
            Raised when scroll tips are to be displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.FetchScrollTips"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs.SplitIndex">
            <summary>
            Indicates the position of the Split in the Splits collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs.ColIndex">
            <summary>
            Indicates the position in the DisplayColumns collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs.Row">
            <summary>
            The index of the topmost row for the scroll tip.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs.ScrollBar">
            <summary>
            Indicates the scrollbar that was moved.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs.ScrollTip">
            <summary>
            The text to be displayed in the scroll tip.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs.TipStyle">
            <summary>
            The Style used to render the scroll tip.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FetchScrollTipsEventArgs.Column">
            <summary>
            The current C1DisplayColumn.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FilterEventHandler">
            <summary>
            Raised when the grid is sorted or filtered.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FilterEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Filter"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterFilter"/>, <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Sort"/>, and <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.AfterSort"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.FilterEventArgs.Condition">
            <summary>
            The filter or sort condition.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ErrorEventHandler">
            <summary>
            Raised when an excpetion is thrown via the UI.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.Error"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ErrorEventArgs.Exception">
            <summary>
            The exception which caused the Event to be raised.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ErrorEventArgs.Handled">
            <summary>
            True if the exception has been handled.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.ErrorEventArgs.Continue">
            <summary>
            True to continue as if no exception was raised.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupTextEventHandler">
            <summary>
            Raised when text is grouped.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupTextEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupText"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupTextEventArgs.Text">
            <summary>
            Custom text for the grouped row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupTextEventArgs.GroupText">
            <summary>
            Value that the data is being grouped on.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupTextEventArgs.Col">
            <summary>
            Column that is being grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupTextEventArgs.RowType">
            <summary>
            Type of row being grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupTextEventArgs.StartRowIndex">
            <summary>
            First row index that is being grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupTextEventArgs.EndRowIndex">
            <summary>
            Last row index that is being grouped.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupIntervalEventHandler">
            <summary>
            Raised when text is grouped.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupIntervalEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1TrueDBGrid.C1TrueDBGrid.GroupText"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupIntervalEventArgs.Value">
            <summary>
            Underlying value of the row being grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupIntervalEventArgs.Col">
            <summary>
            Column that is being grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupIntervalEventArgs.Row">
            <summary>
            Row index that is being grouped.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GridAccessibleObject">
            <summary>
            Root accessible object exposed by C1TrueDBGrid control
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupBarAccessibleObject">
            <summary>
            Accessible object for group bar
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ViewAccessibleObject">
            <summary>
            Accessible object for view
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.RowAccessibleObject">
            <summary>
            Accessible object for grid row
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.CellAccessibleObject">
            <summary>
            Accessible object for grid cell
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupRow">
            <summary>
            Object that represents a groupby split.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupRow.RowType">
            <summary>
            Gets the type of row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupRow.GroupedText">
            <summary>
            Gets the text that is being grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupRow.Level">
            <summary>
            Gets the level of the grouping.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupRow.StartIndex">
            <summary>
            Gets the starting row index of the datasource that belong to this group.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupRow.EndIndex">
            <summary>
            Gets the ending row index of the datasource that belong to this group.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupRow.Count">
            <summary>
            Gets the number of rows that belong to this group.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupByView.ProcessGroupedData(System.Int32,C1.Win.C1TrueDBGrid.C1DisplayColumn)">
            <summary>
            Processes grouped data.
            </summary>
            <param name="row">The row index containg the data.</param>
            <param name="col">The <see cref="T:C1.Win.C1TrueDBGrid.C1DisplayColumn"/> that is being grouped.</param>
            <returns>A string that the data will be grouped on.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupByView.MoveRow(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="oldrow"></param>
            <param name="newrow"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.MultipleLinesFixedView.InitializeMultiColumns">
            <summary>
            Splits the columns so they exist on two sublines and evens out the 
            right edge.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.MultipleLinesFixedView.MultipleLineExtend">
            <summary>
            Makes each line of a multi line grid the same width
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.MultipleLinesFixedView.GetNumberOfColsInSubline(System.Int32)">
            <summary>
            Returns the number of columns for the given subline.
            </summary>
            <param name="subline">Index of subline.</param>
            <returns>Number of columns in subline.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.MultipleLinesFixedView.GetHeaderSubLine(System.Drawing.Point)">
            <summary>
            Returns the subline in the header for the given point.
            </summary>
            <param name="p">Point to check.</param>
            <returns>The subline that the point is on.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.MultipleLinesFixedView.AddCol(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.MultipleLinesView._fitSubline(System.Int32,System.Single,System.Int32)">
            <summary>
            Adjust column widths so they all fit within the data area
            </summary>
            
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.NumberFormatTypeEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.NumberFormatTypeEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.NumberFormatTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.NumberFormatTypeEditor.OnListBoxClick(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.NumberFormatTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.IOnLongOpInProgressProvider">
            <summary>
            Interface used to provide feedback and the ability to cancel potentially long operations
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.IOnLongOpInProgressProvider.OnLongOpInProgress(System.Boolean@)">
            <summary>
            
            </summary>
            <param name="cancel"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.IOnLongOpInProgressProvider.OnLongOpInProgress">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.LongOpInProgressArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.LongOpInProgressArgs.CancelIfPossible">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.LongOpInProgressHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.C1Stack">
            <summary>
            Simple stack with indexed access, based on System.Collections.ArrayList
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.C1Stack.Push(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.C1Stack.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.C1Stack.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.C1Stack.IsIndexInBounds(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.C1Stack.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.C1Stack.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.C1Stack.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Pair">
            <summary>
            General purpose pair class. (Should be moved to gp utils.)
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Pair.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Pair.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Pair.First">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Pair.Second">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Design.PropBagAttribute">
            <summary>
            Attribute used to specify which properties get serialized when saving layouts.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Design.LayoutAttribute">
            <summary>
            Attribute used to specify which properties get serialized when saving layouts.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerialization">
            <summary>
            Determines how item types are serialized
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerialization.None">
            <summary>
            Item type is not serialized (this is the default)
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerialization.FullName">
            <summary>
            Item type is serialized as a fully qualified name
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerialization.AssemblyQualifiedName">
            <summary>
            Item type is serialized as a fully qualified name and assembly name
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerialization.Custom">
            <summary>
            Use owner's IMemberTypeEncoder for members
            (for collection items, this is done automatically).
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.MemberTypeEncoderHelper">
            <summary>
            Helper class for implementors of IMemberTypeEncoder
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.MemberTypeEncoderHelper.#ctor(System.Object[0:,0:])">
            <summary>
            
            </summary>
            <param name="namedTypes"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.MemberTypeEncoderHelper.TypeToString(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.MemberTypeEncoderHelper.StringToType(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerializationAttribute">
            <summary>
            Forces the serializer to serialize the type name of a property or field
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerializationAttribute.#ctor(C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerialization)">
            <summary>
            
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerializationAttribute.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.TypeSerializationAttribute.TypeSerialization">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.CollectionElementTypeAttribute">
            <summary>
            This attribute allows to specify collection's element type name
            (in that case there is no need to store it).
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.CollectionElementTypeAttribute.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.CollectionElementTypeAttribute.CollectionElementType">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer">
            <summary>
            Serializes and deserializes objects into and from XML.
            </summary>
            <remarks>
            All the methods in this class are static (Shared in Visual Basic).
            You cannot create an instance of this class.
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlTextWriter@)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream. 
            DOES NOT close the underlying stream. Useful for copying objects.
            Caller is responsible to call out writer.Close() to close writer and underlying stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
            <param name="writer">The XmlWriter object reference. Call writer.Close after working with stream/writer.</param> 
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Serialize(System.Xml.XmlTextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified XmlWriter
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlTextWriter@)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream. 
            DOES NOT close the underlying stream. Useful for copying objects.
            Caller is responsible to call out writer.Close() to close writer and underlying stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="mi">The FieldInfo or MemberInfo object context for the object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
            <param name="writer">The XmlWriter object reference. Call writer.Close after working with stream/writer.</param> 
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlTextWriter@,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="o"></param>
            <param name="mi"></param>
            <param name="namespaces"></param>
            <param name="writer"></param>
            <param name="filter"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="mi">The FieldInfo or MemberInfo object context for the object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Serialize(System.Xml.XmlTextWriter,System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces,System.Attribute[])">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified XmlWriter
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="mi">The FieldInfo or MemberInfo object context for the object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
            <param name="filter">Array of attributes that specify what to serialize</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Serialize(System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified object to an XML formatted string.
            </summary>
            <param name="o"></param>
            <param name="mi"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.writeNamespaces(System.Xml.XmlTextWriter,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Used to write the namespaces as attributes for the initial object
            </summary>
            <param name="writer"></param>
            <param name="namespaces"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.isVisible(System.Object[])">
            <summary>
            Given a list of Field or Property attributes returns visibility
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.MapType(System.Xml.XmlTextWriter,System.Object,System.Attribute[])">
            <summary>
            Enumerates and serializes all public fields and properties
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="filter">Array of attributes that specify what to serialize</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an XML-document instance
            </summary>
            <param name="stream">The Stream containing the XML-document instance to deserialize</param>
            <param name="type">The type of object being deserialized</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Deserialize(System.Xml.XmlTextReader,System.Type)">
            <summary>
            Deserializes an XML-document instance
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="type">The type of object being deserialized</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Deserialize(System.Xml.XmlTextReader,System.Object,System.Type,System.Type)">
            <summary>
            Deserializes object
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="o">The Object being deserialized</param>
            <param name="type">The type of object being deserialized</param>
            <param name="elementType">The type of array elements (in case the object is an array)</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes an XML document string 
            </summary>
            <param name="XMLString"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.DeserializeText(System.Xml.XmlTextReader,System.Type)">
            <summary>
            Deserializes text of element or attribute into object of appropriate type
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="type">The type of object being deserialized</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.DeserializeType(System.Xml.XmlTextReader,System.Type,C1.Win.C1TrueDBGrid.Util.Xml.Serialization.IMemberTypeEncoder)">
            <summary>
            Recognizes type of object serialized in element
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="type">The default type of object being deserialized</param>
            <param name="mte">Custom serialization</param>
            <returns>The type of object being deserialized</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.DeserializeArray(System.Xml.XmlTextReader,System.Type,System.Collections.IList)">
            <summary>
            Deserializes array or collection
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="elementType">Collection item type</param>
            <param name="container">The array or collection being deserialized</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.GetAssemblyQualifiedTypeName(System.Type)">
            <summary>
            Returns the "almost" fully qualified type name - i.e. with assembly name,
            but without version, culture, and public key.
            </summary>
            <param name="type">Type</param>
            <returns>Type name, assembly name</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.OnLongOpInProgressProvider">
            <summary>
            Sets or returns the object implementing IOnLongOpInProgressProvider interface
            (can be used to provide visual feedback to the user during serialization).
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.SerializeDefaultValues">
            <summary>
            Gets or sets a value indicating whether all the values are to be persistent.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Formatting">
            <summary>
            Sets or returns formatting used by the XML writer.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.Indentation">
            <summary>
            Sets or returns indentation used by the XML writer.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.NonPublic">
            <summary>
            Sets or returns serialization of non-public properties.  If true non-public properties
            are included, but are hidden by default. Public properties are always visible by default.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance.OnComponentChanged">
            <summary>
            Raises the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance.OnComponentChanging">
            <summary>
            Raises the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging"/> event.
            </summary>
            <returns>
            true if this object can be changed; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance.Container">
            <summary>
            Gets the container representing this <see cref="T:System.ComponentModel.TypeDescriptor"/> request.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance.Instance">
            <summary>
            Gets the object that is connected with this type descriptor request.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.Xml.Serialization.Serializer.C1TypeDescriptorContextCreateInstance.PropertyDescriptor">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is associated with the given context item.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptor"/> that describes the given context item; otherwise, null if there is no <see cref="T:System.ComponentModel.PropertyDescriptor"/> responsible for the call.
            </returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Tally">
            <summary>
            Summary C1Description for Tally.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GroupInfo">
            <summary>
            GroupInfo
            Property of the C1DataColumn object, used to control grouping and 
            rendering of group headers and footers
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupInfo.#ctor(C1.Win.C1TrueDBGrid.C1DataColumn)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="owner">The column this object is associated with.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GroupInfo.ToString">
            <summary>
            Override.  The string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupInfo.Position">
            <summary>
            Gets or sets the position of the grouped row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupInfo.OutlineMode">
            <summary>
            Gets or sets the initial expanded/collapsed state of the grouped row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupInfo.HeaderText">
            <summary>
            Gets or sets the text that is displayed in the group header row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupInfo.FooterText">
            <summary>
            Gets or sets the text that is displayed in the group footer row.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupInfo.Interval">
            <summary>
            Gets or sets the way rows are grouped.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.GroupInfo.ColumnVisible">
            <summary>
            Gets or set a value indicating the visibility of a column when it's grouped.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            StringTables
            this class contains a single static method InitTables that populates the
            tables used by the Localizer class.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintOptionsForm">
            <summary>
            Represents print/export options form.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.OnExporterChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.OnActionChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_exporter">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_action">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_actionMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_rowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_pageBreaks">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_fillEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_wrapText">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_outputFileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_chkUseGridColors">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_numFooterHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_numHeaderHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_txtFooter">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_txtHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_numMaxRowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbRowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_chkColFooter">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_chkColHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_chkSplitHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_chkGridHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_chkPrintHorzSplits">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbStretchToWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbWrapText">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbHorzPageBreak">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_chkShowProgress">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_grpPageHeaders">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblFooterHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblHeaderHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblFooter">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_grpRenderOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblRowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblStretchToWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblWrapText">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblHorzPageBreak">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_btnOK">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_btnCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_btnOutputFileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_btnOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblOutputFileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_lblMaxRowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_grpFormView">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_chkOneFormPerPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.#ctor">
            <summary>
            Creates a new instance of the PrintOptionsFrom class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_btnOutputFileName_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_btnOptions_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbAction_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.UpdateStatus">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.PrintOptionsForm_Load(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.PrintOptionsForm_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbRowHeight_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbHorzPageBreak_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbStretchToWidth_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.m_cmbWrapText_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.PrintOptionsForm.ExporterChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.PrintOptionsForm.ActionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.Exporter">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.OutputFileName">
            <summary>
            Gets or sets the output file name.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.ActionMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.RowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.PageBreaks">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.FillEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.WrapText">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintOptionsForm.ActionItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.ActionItem.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.ActionItem.#ctor(C1.Win.C1TrueDBGrid.PrintInfo.ActionFlags,System.Object)">
            <summary>
            Creates a new instance of the ActionItem class. 
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.ActionItem.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.ActionItem.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintOptionsForm.ActionItem.Provider">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintOptionsForm.RowHeightItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.RowHeightItem.RowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.RowHeightItem.#ctor(C1.Win.C1TrueDBGrid.PrintInfo.RowHeightEnum)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.RowHeightItem.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.RowHeightItem.RowHeightItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintOptionsForm.PageBreakItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.PageBreakItem.PageBreaks">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.PageBreakItem.#ctor(C1.Win.C1TrueDBGrid.PrintInfo.PageBreaksEnum)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.PageBreakItem.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.PageBreakItem.PageBreakItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintOptionsForm.FillEmptyItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.FillEmptyItem.FillEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.FillEmptyItem.#ctor(C1.Win.C1TrueDBGrid.PrintInfo.FillEmptyEnum)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.FillEmptyItem.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.FillEmptyItem.FillEmptyItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintOptionsForm.WrapTextItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.WrapTextItem.WrapText">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.WrapTextItem.#ctor(C1.Win.C1TrueDBGrid.PrintInfo.WrapTextEnum)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintOptionsForm.WrapTextItem.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintOptionsForm.WrapTextItem.WrapTextItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1TrueDBGridPrintOptionsFormDropDownEditor">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.DropDownFormClassNameEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownFormClassNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.DropDownFormClassNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.DropDownFormClassNameEditor.BaseFormClassName">
            <summary>
            Gets the name of the base form class.
            </summary>
            <value>The name of the base form class.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.DropDownFormClassNameEditor.NoneString">
            <summary>
            Gets the none string.
            </summary>
            <value>The none string.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.DropDownFormClassNameEditor.IncludeNoneInList">
            <summary>
            Gets a value indicating whether [include none in list].
            </summary>
            <value><c>true</c> if [include none in list]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.DropDownFormClassNameEditor.IncludeBaseFormClassInList">
            <summary>
            Gets a value indicating whether [include base form class in list].
            </summary>
            <value>
            	<c>true</c> if [include base form class in list]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGridPrintOptionsFormDropDownEditor.BaseFormClassName">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1OwnerDrawPrint">
            <summary>
            Object to manage custom page headers and footers when printing and previewing.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1OwnerDrawPrint.SetHeightInch(System.Double)">
            <summary>
            Set the height of printing area (in inches)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1OwnerDrawPrint.RenderDirectText(System.Object,System.Object,System.String,System.Object,System.Drawing.Font,System.Drawing.Color,C1.Win.C1TrueDBGrid.AlignHorzEnum)">
            <summary>
            Renders text for the document.
            </summary>
            <param name="x">X-coordinate to start the rendering.</param>
            <param name="y">Y-coordinate to start the rendering.</param>
            <param name="text">The text to render.</param>
            <param name="width">The width for the rendered text.</param>
            <param name="font">The font to use.</param>
            <param name="textColor">The color of the text.</param>
            <param name="horzAlign">The alignment to render the text.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1OwnerDrawPrint.RenderDirectImage(System.Object,System.Object,System.Drawing.Image,System.Object,System.Object,C1.Win.C1TrueDBGrid.BackgroundPictureDrawModeEnum)">
            <summary>
            Renders an image for the document.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-coordinate.</param>
            <param name="image">Image to render.</param>
            <param name="width">Width to render.</param>
            <param name="height">Height to render.</param>
            <param name="imageAlign">Alignment options.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1OwnerDrawPrint.RenderDirectLine(System.Object,System.Object,System.Object,System.Object,System.Drawing.Color,System.Double)">
            <summary>
            Renders a line for the document.
            </summary>
            <param name="fromX">Start x-coordinate.</param>
            <param name="fromY">Start y-coordinate.</param>
            <param name="toX">End x-coordinate.</param>
            <param name="toY">End y-coordinate.</param>
            <param name="color">Color of the line.</param>
            <param name="width">Width of the line.</param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1OwnerDrawPrint.HeightInch">
            <summary>
            The height of drawing area in inches
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintInfo">
            <summary>
            Specifies how a <see cref="T:C1.Win.C1TrueDBGrid.C1TrueDBGrid"/> should be printed
            or exported when using such methods as
            <see cref="M:C1.Win.C1TrueDBGrid.C1TrueDBGrid.ExportTo"/>,
            <see cref="M:C1.Win.C1TrueDBGrid.PrintInfo.Print"/> etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.#ctor(C1.Win.C1TrueDBGrid.PrintInfo)">
            <summary>
            This ctor is only used to create a copy of PrintInfo to compare user-modifiable
            options against.
            </summary>
            <param name="other">PrintInfo to copy user-modifiable options from.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.createStyles">
            <summary>
            Creates page header and footer styles.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.Attach(C1.Win.C1TrueDBGrid.C1TrueDBGrid)">
            <summary>
            Attaches page header and footer styles to the grid
            (invokes Style.Attach(grid)).
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.Export(System.String)">
            <summary>
            Exports the grid to the specified file.
            Export format is determined by the file extension.
            </summary>
            <param name="outputFileName">Output file name.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ExportToHtml(System.String)">
            <summary>
            Exports the grid to HTML.
            </summary>
            <param name="outputFileName">Output file name.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ExportToPdf(System.String)">
            <summary>
            Exports the grid to PDF.
            </summary>
            <param name="outputFileName">Output file name.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ExportToRtf(System.String)">
            <summary>
            Exports the grid to RTF.
            </summary>
            <param name="outputFileName">Output file name.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ExportToExcel(System.String)">
            <summary>
            Exports the grid to XLS.
            </summary>
            <param name="outputFileName">Output file name.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ExportToExcel(System.String,System.Boolean)">
            <summary>
            Exports the grid to XLS.
            </summary>
            <param name="outputFileName">Output file name.</param>
            <param name="onePagePerSheet">Whether to export each page as a separate sheet.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.SetProgressText(System.String)">
            <summary>
            Sets text on the progress dialog if it exists.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.DisposeProgressDlg">
            <summary>
            Closes and disposes the progress dialog if it exists.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ExportTo">
            <summary>
            Shows the export options dialog, allows the user to
            exports the grid to one of the supported formats.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ExportTo(System.String)">
            <summary>
            Exports the grid to the specified file.
            Export format is determined by the file extension.
            </summary>
            <param name="outputFileName"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.SelectExportFile(System.Windows.Forms.Form,System.Collections.Generic.List{System.Object},System.String@,System.Object@)">
            <summary>
            Shows the "save file" dialog, allowing the user to specify an output file.
            </summary>
            <param name="parent"></param>
            <param name="availableProviders"></param>
            <param name="name"></param>
            <param name="ep"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.UserOptionsChanged(C1.Win.C1TrueDBGrid.PrintInfo)">
            <summary>
            Compares the user modfiable options in the current print info
            against those in the other one, returns true if any of the user
            options changed (so the document must be re-generated).
            </summary>
            <param name="other">The PrintInfo to compare against.</param>
            <returns>True if any of the user options have changed, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ShouldSerializePageSettings">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PageSettings"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PageSettings"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ShouldSerializePrintOptionsFormClassName">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PrintOptionsFormClassName"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PrintOptionsFormClassName"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ResetPrintOptionsFormClassName">
            <summary>
            Resets the <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PrintOptionsFormClassName"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ShouldSerializePreviewFormClassName">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PreviewFormClassName"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PreviewFormClassName"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.ResetPreviewFormClassName">
            <summary>
            Resets the <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PreviewFormClassName"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.PrintPreview">
            <summary>
            Opens a separate modal window in which end users can preview the output
            that would be generated by the print operation.
            </summary>
            <remarks>
            <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.PreviewFormClassName"/> allows to specify a custom form for
            the preview dialog.
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.Print">
            <summary>
            Prints the grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.Print(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Prints the grid.
            </summary>
            <param name="printerSettings">Specifies the printer settings (including the printer) to use.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.Print(System.IO.Stream)">
            <summary>
            Saves the current grid to a stream in <b>C1D</b>
            (native <b>C1PrintDocument</b>) format.
            <para>
            Note that unlike most other print/export methods, this method
            does not require <b>C1Report</b> assemblies.
            </para>
            </summary>
            <param name="stream">The output stream.</param>
            <remarks>
            <para>
            The stream's <b>Position</b> is set to 0 when the method returns.
            </para>
            <para>This method does not show progress dialog
            (ignoring <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.ShowProgressForm"/> property).
            </para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.PrintToStream">
            <summary>
            Saves the current grid to a memory stream in <b>C1D</b>
            (native <b>C1PrintDocument</b>) format.
            <para>
            The stream's <b>Position</b> is set to 0 when the method returns.
            </para>
            </summary>
            <returns>The stream containing the saved grid.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.SaveAsC1d(System.String)">
            <summary>
            Saves the current grid as a <b>C1D</b> file, which can later be loaded
            into a <b>C1PrintDocument</b> (provided by <b>C1Report</b> product).
            <para>
            Note that unlike most other print/export methods, this method
            does not require <b>C1Report</b> assemblies.
            </para>
            </summary>
            <param name="outputFileName">The name of the output file.</param>
            <returns><b>true</b> if the file was successfully saved,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintInfo.SaveAsC1d(System.IO.Stream)">
            <summary>
            Saves the current grid to a stream in <b>C1D</b>
            (native <b>C1PrintDocument</b>) format.
            <para>
            Note that unlike most other print/export methods, this method
            does not require <b>C1Report</b> assemblies.
            </para>
            </summary>
            <param name="stream">The output stream.</param>
            <returns><b>true</b> if the stream was successfully written,
            <b>false</b> otherwise.</returns>
            <remarks>
            Unlike the <see cref="M:C1.Win.C1TrueDBGrid.PrintInfo.Print(System.IO.Stream)"/> method,
            this method does not reset the stream's position after saving.
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.RowCanSplit">
            <summary>
            Gets or sets a value indicating whether the grid rows can split between pages.
            </summary>
            <remarks>
            This new property helps to print very long text in columns on multiple pages. 
            </remarks>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.UseGridColors">
            <summary>
            Gets or sets a value indicating whether the grid's color scheme is translated to the print page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.OwnerDrawPageHeader">
            <summary>
            Gets or sets a value indicating whether the page header is owner-drawn.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.OwnerDrawPageFooter">
            <summary>
            Gets or sets a value indicating whether the page footer is owner-drawn.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PageHeaderStyle">
            <summary>
            Gets or sets the style used to render the page header.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PageHeader">
            <summary>
            Gets or sets the string to be printed at the top of each page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PageHeaderHeight">
            <summary>
            Gets or sets the height of the Page header.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PageFooterStyle">
            <summary>
            Gets or sets the style used to render the page footer.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PageFooterHeight">
            <summary>
            Gets or sets the page footer height in hundredths of an inch.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PageFooter">
            <summary>
            Gets or sets a string to be printed at the bottom of each page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.RepeatColumnFooters">
            <summary>
            Gets or sets a value indicating whether column footers should appear on each page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.RepeatGridHeader">
            <summary>
            Gets or sets a value indicating whether the grid caption should appear on each page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.RepeatSplitHeaders">
            <summary>
            Gets or sets a value inidcating whether split captions should appear on each page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PrintHorizontalSplits">
            <summary>
            Gets or sets a value indicating whether horizontal splits are previewed and printed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.RepeatColumnHeaders">
            <summary>
            Gets or sets a value indicating whether column headers should appear on each page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.FillAreaWidth">
            <summary>
            Gets or sets a value indicating how empty space left on a printed page is handled.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PageBreak">
            <summary>
            Gets or sets the horizontal page break mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.WrapText">
            <summary>
            Gets or sets a value that controls how text is wrapped in a cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PrintEmptyGrid">
            <summary>
            Gets or sets a value whether to print a grid if it has no data rows.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.MaxRowHeight">
            <summary>
            Gets or sets the maximum row height in hundredths of an inch
            (used if <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.VarRowHeight"/> is <see cref="F:C1.Win.C1TrueDBGrid.PrintInfo.RowHeightEnum.StretchToMax"/>).
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.VarRowHeight">
            <summary>
            Gets or sets a value indicating how row height of the printed grid is determined.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.GridLines">
            <summary>
            Gets or sets a value indicating how grid lines are rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.ShowOptionsDialog">
            <summary>
            Gets or sets a value indicating whether the options dialog is displayed
            when the grid is printed or exported.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.ShowProgressForm">
            <summary>
            Gets or sets a value indicating whether the progress dialog is displayed when the grid is printed or exported.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.OneFormPerPage">
            <summary>
            Gets or sets a value indicating whether the grid in Form view style is printed each record per page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.ShowSelection">
            <summary>
            Gets or sets a value indicating whether selected cells will be highlighted when previewing or printing.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PageSettings">
            <summary>
            Gets or sets the PageSettings for printing.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.ProgressCaption">
            <summary>
            Gets or sets the caption of the print progress dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PrintOptionsFormClassName">
            <summary>
            Gets or sets the class name of the form used as the print options dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.PreviewFormClassName">
            <summary>
            Gets or sets the class name of the form used as the preview form.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintInfo.FillEmptyEnum">
            <summary>
            Specifies how empty space left on a printed page is handled (filled or otherwise).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.FillEmptyEnum.ExtendAll">
            <summary>
            All columns are extended proportionally to fill the page.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.FillEmptyEnum.None">
            <summary>
            Empty space on the right of the page is left as is.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.FillEmptyEnum.ExtendLast">
            <summary>
            Rightmost column on the page is extended to fill the empty space.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintInfo.PageBreaksEnum">
            <summary>
            Specifies how grid is broken into extension (horizontal) pages
            when it is too wide to fit into one page.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.PageBreaksEnum.FitIntoArea">
            <summary>
            All columns are made narrow enough to fit into one page.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.PageBreaksEnum.ClipInArea">
            <summary>
            Columns that do not fit into one page are clipped.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.PageBreaksEnum.OnSplit">
            <summary>
            Horizontal page breaks can be inserted on grid splits as necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.PageBreaksEnum.OnColumn">
            <summary>
            Horizontal page breaks can be inserted on any column as necessary.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintInfo.WrapTextEnum">
            <summary>
            Specifies how cell text is wrapped.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.WrapTextEnum.Wrap">
            <summary>
            Text can wrap in any cell as needed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.WrapTextEnum.NoWrap">
            <summary>
            Text in cells never wraps.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.WrapTextEnum.LikeColumn">
            <summary>
            Use column's <see cref="P:C1.Win.C1TrueDBGrid.Style.WrapText"/> property.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintInfo.GridLinesEnum">
            <summary>
            Specifies how grid lines are rendered.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.GridLinesEnum.Always">
            <summary>
            Grid lines are rendered.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.GridLinesEnum.None">
            <summary>
            Grid lines are not rendered.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintInfo.RowHeightEnum">
            <summary>
            Specifies how rows' heights are determined.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.RowHeightEnum.StretchToFit">
            <summary>
            Stretch rows vertically to fit all data.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.RowHeightEnum.LikeGrid">
            <summary>
            Use the grid's row height.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.RowHeightEnum.StretchToMax">
            <summary>
            Stretch rows vertically but not greater than <see cref="P:C1.Win.C1TrueDBGrid.PrintInfo.MaxRowHeight"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintInfo.ActionFlags">
            <summary>
            Specify allowed print options.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.ActionFlags.None">
            <summary>
            No print/export operations are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.ActionFlags.Print">
            <summary>
            Printing is allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.ActionFlags.Preview">
            <summary>
            Preview is allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.ActionFlags.Export">
            <summary>
            Export is allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.PrintInfo.ActionFlags.MaskAll">
            <summary>
            All print/export operations are allowed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintInfo.ExportParameters.PagePerSheet">
            <summary>
            Property value. MUST BE EXACTLY THE SAME AS PROPERTY NAME IN EXPORTER!
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintForm">
            <summary>
            The print preview form.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintForm.#ctor">
            <summary>
            Creates a new instance of the PrintFrom class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintForm.Init">
             <summary>
             Additional initialization of the form.
             </summary>
             <remarks>
             To override properties like FormBorderStyle, MaximizeBox, MinimizeBox, ControlBox etc. of a Form,
             inherited from "C1.Win.C1TrueDBGrid.PrintForm", override the Init method of the PrintForm.
             First call the base.Init(), then set the properties you want.
             </remarks>
             <example>
             The example is a custom PrintForm which has sizable border, control box is on, and minimize and maximize boxes are off.
             <code>
                 public class CustPrintForm : C1.Win.C1TrueDBGrid.PrintForm
                {
                    public CustPrintForm(): base()
                    {
                    }
            
                    protected override void Init()
                    {
                        base.Init();
                        FormBorderStyle = FormBorderStyle.Sizable;
                        this.ControlBox = true;
                        this.MinimizeBox = false;
                        this.MaximizeBox = false;
                    }
                }
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintForm.Dispose(System.Boolean)">
            <summary>
            Overloaded. Overridden. Releases all resources used by the Control.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1TrueDBGridPreviewFormDropDownEditor">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1TrueDBGridPreviewFormDropDownEditor.BaseFormClassName">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintCancelException">
            <summary>
            Represents exception that is thrown if printing or exporting
            a <see cref="T:C1.Win.C1TrueDBGrid.C1TrueDBGrid"/> is cancelled by the user.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintCancelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.PrintCancelException"/> class.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew">
            <summary>
            The object that handles printing and previewing for the grid.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.#ctor(C1.Win.C1TrueDBGrid.C1TrueDBGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew"/> class.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.#ctor(C1.Win.C1TrueDBGrid.C1TrueDBGrid,C1.Win.C1TrueDBGrid.PrintInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew"/> class.
            </summary>
            <param name="grid"></param>
            <param name="pi"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.Initialize">
            <summary>
            Performs initialization
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.ReplaceGridTags(C1.C1PreviewClient.C1PrintDocument,System.String)">
            <summary>
            Replaces the old TrueGrid printing \p, \P etc. tags with corresponding C1PrintDocument's tags.
            </summary>
            <param name="doc">The document.</param>
            <param name="text">The text to process.</param>
            <returns>The text with tags replaced.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.ApplyStyle(C1.C1PreviewClient.IStyleOwner,C1.Win.C1TrueDBGrid.Style,C1.C1PreviewClient.Style)">
            <summary>
            Applies the specified grid style to the target object.
            Does not explicitlly set style attributes if the parent style has them already.
            Checks/sets the following style attributes: TextColor, BackColor, Font,
            BackgroundImage, BackgroundImageAlign, Borders, Padding.
            </summary>
            <param name="target">The target style owner.</param>
            <param name="gridStyle">The grid style to apply.</param>
            <param name="parentStyle">The style of the parent object (used to avoid explicit setting of
            style attributes if they are already inherited from the parent).</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.PxToUnit(System.Int32)">
            <summary>
            Converts a pixel value to a Unit (using "document" 1/300th of an inch units).
            </summary>
            <param name="pixels">The pixel value to convert.</param>
            <returns>The converted Unit value.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.PxToDoc(System.Int32)">
            <summary>
            Convert screen pixels to Document units (1/300 of inch)
            </summary>
            <param name="lengthInPixel">Length in screen pixels</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.InchToDoc(System.Int32)">
            <summary>
            Convert hundreds of inch to Document uints (1/300 of inch)
            </summary>
            <param name="lengthInInch">Length in hundreds of inch</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.TextImageBuild(C1.Win.C1TrueDBGrid.Style,System.String,System.Double,C1.C1PreviewClient.IStyleOwner,System.String)">
            <summary>
            This function deals with the general cell drawing.
            If it has only text, just draw the text.
            If it has image (background or forground etc.), then we need to draw an area, then the image and text.
            Because we only have text most of the time, this process will speed things up. 
            </summary>
            <param name="style">The grid style to use.</param>
            <param name="sText">The cell text.</param>
            <param name="width">Width of the cell, in %%.</param>
            <param name="parent">The parent object.</param>
            <param name="imageName">The name of the image to use.</param>
            <returns>The render object representing the cell's content.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.CurRow">
            <summary>
            Gets or sets the current row which is displayed in the progress dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1PrintTrueDBGridNew.RowCount">
            <summary>
            Gets the number of rows to be printed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings">
            <summary>
            Specifies the characteristics of the print preview window
            shown by the <see cref="M:C1.Win.C1TrueDBGrid.PrintInfo.PrintPreview"/> method.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.ShouldSerializeUIStrings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.ResetUIStrings">
            <summary>
            Resets the array of UIStrings back to the default locale.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.Caption">
            <summary>
            Gets or sets the caption of the preview window.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.NavigationPaneDockingStyle">
            <summary>
            Gets or sets the position and manner in which the control is docked in the navigation page.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.Location">
            <summary>
            Gets or sets the location of the preview window.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.AllowSizing">
            <summary>
            Gets or sets a value indicating whether the end user has the ability to size the preview window.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.ZoomFactor">
            <summary>
            Gets or sets the zoom factor for print preview.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.Size">
            <summary>
            Gets or sets the size of the form.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.ToolBars">
            <summary>
            Gets or sets a value indicating the visibiity of toolbars.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.PrintPreviewWinSettings.UIStrings">
            <summary>
            Gets the array of user interface strings.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.C1PrintProgress">
            <summary>
            Print progress window.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.C1PrintProgress.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintProgress.#ctor">
            <summary>
            Initializes a new instance of the C1PrintProgress class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintProgress.Dispose(System.Boolean)">
            <summary>
            Overloaded. Releases the resources used by the component.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.C1PrintProgress.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1PrintProgress.TxtPrinting">
            <summary>
            Gets or sets the text used to display the current progress when the grid is printed/previewed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1PrintProgress.TxtCancel">
            <summary>
            Gets or sets the text for the Cancel button.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1PrintProgress.TxtTitle">
            <summary>
            Gets or sets the text for the Windows caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.C1PrintProgress.CancelClicked">
            <summary>
            Gets a value indicating if the print/preview was cancelled.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.ReflectedPreview">
            <summary>
            Encapsulates dynamically loaded report/preview assemblies.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:C1.Data.IC1GetDataSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Data.IC1GetDataSource.GetDataSource">
            <summary>
            Gets the data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Data.IC1GetDataSource.GetDataView">
            <summary>
            Gets the data view.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Data.IC1DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Data.IC1DataSource.SetBoundControl(System.Object,System.String)">
            <summary>
            Sets the bound control.
            </summary>
            <param name="boundControl">The bound control.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:C1.Data.IC1DataSource.GetVirtualSegmentSize">
            <summary>
            Gets the size of the virtual segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Data.IC1DataSource.SetVisibleRowCount(System.Int32,System.String)">
            <summary>
            Sets the visible row count.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:C1.Data.IC1DataSource.BoundControlScrolled">
            <summary>
            Bounds the control scrolled.
            </summary>
        </member>
        <member name="T:C1.Data.IC1ComplexBoundControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Data.IC1ComplexBoundControl.GetFirstVisibleRow">
            <summary>
            Gets the first visible row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Data.IC1ComplexBoundControl.GetVisibleRowCount">
            <summary>
            Gets the visible row count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Data.IC1ComplexBoundControl.ScrollToRow(System.Int32,System.Int32)">
            <summary>
            Scrolls to row.
            </summary>
            <param name="firstVisibleRow">The first visible row.</param>
            <param name="rowCount">The row count.</param>
        </member>
        <member name="T:C1.Data.IC1EditableObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Data.IC1EditableObject.RequestModification">
            <summary>
            Requests the modification.
            </summary>
        </member>
        <member name="T:C1.Data.IC1DataView">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Data.IC1DataView.SetRowFilter(System.String)">
            <summary>
            Sets the row filter.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Data.IC1DataView.SetSort(System.String)">
            <summary>
            Sets the sort.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Data.IC1DataView.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="T:C1.Data.LateBindingIC1DataSource">
            <summary>
            Interfaces used by bound controls and other C1Data consumers:
            Dynamic, late bound access to the interfaces, via reflection
            </summary>
        </member>
        <member name="M:C1.Data.LateBindingIC1DataSource.GetDataSource(System.Object)">
            <summary>
            Gets the data source.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Data.LateBindingIC1ComplexBoundControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Data.LateBindingIC1ComplexBoundControl.NewLateBindingIC1ComplexBoundControl(System.Object)">
            <summary>
            News the late binding I c1 complex bound control.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Data.LateBindingIC1DataView">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Data.LateBindingIC1DataView.GetDataView(System.Object)">
            <summary>
            Gets the data view.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="T:C1.C1PreviewClient.C1Anchor">
            <summary>
            Represents an anchor within a document. 
            One or more anchors can be associated with a <see cref="T:C1.C1PreviewClient.RenderObject"/>
            via the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> property on the object.
            An anchor (and thus the render object associated with it) can be the
            target of a <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> if that hyperlink's <see cref="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget"/>
            is a <see cref="T:C1.C1PreviewClient.C1LinkTargetAnchor"/> and that anchor's <see cref="P:C1.C1PreviewClient.C1LinkTargetAnchor.AnchorName"/>
            is set to that anchor's <see cref="P:C1.C1PreviewClient.C1Anchor.Name"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1Anchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Anchor"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1Anchor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Anchor"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Anchor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Anchor"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
            <param name="description">The anchor's description.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Anchor.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Anchor"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
            <param name="description">The anchor's description.</param>
            <param name="userData">Arbitrary user data.</param>
        </member>
        <member name="P:C1.C1PreviewClient.C1Anchor.Name">
            <summary>
            Gets the name of the current anchor (must be unique within the document).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1Anchor.Description">
            <summary>
            Gets the description of the current anchor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1Anchor.UserData">
            <summary>
            Gets the custom user data associated with the current anchor.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1AnchorText">
            <summary>
            Represents an anchor within a text object
            (a <see cref="T:C1.C1PreviewClient.RenderText"/>, a <see cref="T:C1.C1PreviewClient.RenderParagraph"/> or a <see cref="T:C1.C1PreviewClient.RenderRichText"/>).
            Based on <see cref="T:C1.C1PreviewClient.C1Anchor"/>, adds the ability to reference a specific position within the text
            (see <see cref="P:C1.C1PreviewClient.C1AnchorText.Position"/>).
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1AnchorText"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1AnchorText"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1AnchorText"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
            <param name="description">The anchor's description.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorText.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1AnchorText"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
            <param name="description">The anchor's description.</param>
            <param name="userData">Arbitrary user data.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorText.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1AnchorText"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
            <param name="position">The position within the text.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorText.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1AnchorText"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
            <param name="description">The anchor's description.</param>
            <param name="position">The position within the text.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorText.#ctor(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1AnchorText"/> class.
            </summary>
            <param name="name">The anchor's name.</param>
            <param name="description">The anchor's description.</param>
            <param name="userData">Arbitrary user data.</param>
            <param name="position">The position within the text.</param>
        </member>
        <member name="P:C1.C1PreviewClient.C1AnchorText.Position">
            <summary>
            Gets the position of anchor withint text, zero based.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1AnchorCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1PreviewClient.C1Anchor"/> objects.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorCollection.Add(C1.C1PreviewClient.C1Anchor)">
            <summary>
            Adds a <see cref="T:C1.C1PreviewClient.C1Anchor"/> to the current collection.
            </summary>
            <param name="anchor">The anchor to add.</param>
            <returns>Index of the newly added anchor in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorCollection.Insert(System.Int32,C1.C1PreviewClient.C1Anchor)">
            <summary>
            Inserts a <see cref="T:C1.C1PreviewClient.C1Anchor"/> into the current collection.
            </summary>
            <param name="index">The position at which to insert the anchor.</param>
            <param name="anchor">The anchor to insert.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorCollection.Remove(C1.C1PreviewClient.C1Anchor)">
            <summary>
            Removes a <see cref="T:C1.C1PreviewClient.C1Anchor"/> from the current collection.
            </summary>
            <param name="anchor">The anchor to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorCollection.IndexOf(C1.C1PreviewClient.C1Anchor)">
            <summary>
            Returns the index of a <see cref="T:C1.C1PreviewClient.C1Anchor"/> in the current collection.
            </summary>
            <param name="anchor">The anchor to search for.</param>
            <returns>The index of the specified anchor in the current collection, or -1.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1AnchorCollection.FindByName(System.String)">
            <summary>
            Searches for an anchor with the specified name in the current collection.
            </summary>
            <param name="anchorName">The name to search for.</param>
            <returns>The anchor with the specified name, or null if the anchor was not found.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.C1AnchorCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.C1Anchor"/> at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1PreviewClient.C1HyperlinkStateEnum">
            <summary>
            Represents the state of a <see cref="T:C1.C1PreviewClient.C1Hyperlink"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.C1HyperlinkStateEnum.Normal">
            <summary>
            An unvisited hyperlink.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.C1HyperlinkStateEnum.Visited">
            <summary>
            A hyperlink that has been visited.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.C1HyperlinkStateEnum.Hover">
            <summary>
            A hyperlink under the mouse pointer.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.C1HyperlinkStateEnum.Active">
            <summary>
            A hyperlink that has been clicked, but not yet visited.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1Hyperlink">
            <summary>
            Represents a hyperlink in a document.
            A hyperlink may be assigned to a <see cref="T:C1.C1PreviewClient.RenderObject"/>'s <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/>,
            or a <see cref="T:C1.C1PreviewClient.ParagraphObject"/>'s <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> property.
            In that case clicking on that object in a viewer will jump to the hyperlink's <see cref="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.#ctor(C1.C1PreviewClient.RenderObject)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget"/> to a <see cref="T:C1.C1PreviewClient.C1LinkTargetDocumentLocation"/>
            associated with the specified <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            </summary>
            <param name="renderObject">The <see cref="T:C1.C1PreviewClient.RenderObject"/> to set as the target of the current hyperlink.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.#ctor(C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget"/> to a <see cref="T:C1.C1PreviewClient.C1LinkTargetDocumentLocation"/>
            associated with the specified <see cref="T:C1.C1PreviewClient.ParagraphObject"/>.
            </summary>
            <param name="paragraphObject">The <see cref="T:C1.C1PreviewClient.ParagraphObject"/> to set as the target of the current hyperlink.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.#ctor(C1.C1PreviewClient.C1LinkTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.C1PreviewClient.C1LinkTarget"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> to set as the target of the current hyperlink.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.#ctor(C1.C1PreviewClient.C1LinkTarget,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.C1PreviewClient.C1LinkTarget"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> to set as the target of the current hyperlink.</param>
            <param name="statusText">The string to assign to <see cref="P:C1.C1PreviewClient.C1Hyperlink.StatusText"/> of the current hyperlink.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.#ctor(C1.C1PreviewClient.C1LinkTarget,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.C1PreviewClient.C1LinkTarget"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> to set as the target of the current hyperlink.</param>
            <param name="statusText">The string to assign to <see cref="P:C1.C1PreviewClient.C1Hyperlink.StatusText"/> of the current hyperlink.</param>
            <param name="userData">Arbitrary value to assign to <see cref="P:C1.C1PreviewClient.C1Hyperlink.UserData"/> of the current hyperlink.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget"/> to a <see cref="T:C1.C1PreviewClient.C1LinkTargetAnchor"/>
            associated with the specified anchor name.
            </summary>
            <param name="anchorName">The name of the <see cref="T:C1.C1PreviewClient.C1Anchor"/> to set as the target of the current hyperlink.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.AssignFrom(C1.C1PreviewClient.C1Hyperlink)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1Hyperlink.Clone">
            <summary>
            Creates a copy of the current object.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.C1Hyperlink.StatusText">
            <summary>
            Text shown in the status line when the mouse is over the link
            (when the document is viewed in a <b>C1PrintPreview</b>).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1Hyperlink.LinkTarget">
            <summary>
            Determines the target of the current hyperlink.
            </summary>
            <remarks>
            <para>The hyperlink target is described by an instance of a class derived from <see cref="T:C1.C1PreviewClient.C1LinkTarget"/>,
            and can be of one of the following types:</para>
            <list type="bullet">
            <item><term><see cref="T:C1.C1PreviewClient.C1LinkTargetAnchor"/></term>
                <description>An anchor defined within the current document.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.C1LinkTargetDocumentLocation"/></term>
                <description>A location within the current document.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.C1LinkTargetExternalAnchor"/></term>
                <description>An anchor defined within a previously saved C1D document.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.C1LinkTargetFile"/></term>
                <description>An external document, program or URL. The ShellExecute API is used to invoke the link.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.C1LinkTargetPage"/></term>
                <description>A page within the current document.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.C1LinkTargetUser"/></term>
                <description>The hyperlink target is determined by a user event handler.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.C1Hyperlink.UserData">
            <summary>
            Gets or sets arbitrary data associated with the current hyperlink.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1Hyperlink.State">
            <summary>
            Gets or sets the state of the current hyperlink.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1LinkTarget">
            <summary>
            Describes the target of a <see cref="T:C1.C1PreviewClient.C1Hyperlink"/>.
            This is an abstract base class for the following derived classes:
            <see cref="T:C1.C1PreviewClient.C1LinkTargetDocumentLocation"/>,
            <see cref="T:C1.C1PreviewClient.C1LinkTargetPage"/>,
            <see cref="T:C1.C1PreviewClient.C1LinkTargetAnchor"/>,
            <see cref="T:C1.C1PreviewClient.C1LinkTargetExternalAnchor"/>,
            <see cref="T:C1.C1PreviewClient.C1LinkTargetFile"/>,
            <see cref="T:C1.C1PreviewClient.C1LinkTargetUser"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> class.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1LinkTargetUser">
            <summary>
            Describes a <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> determined by a user event handler.
            When using <b>C1.Win.C1Preview.C1PreviewPane</b>, attach a handler of the type
            <b>C1.Win.C1Preview.HyperlinkEventHandler</b> to the <b>C1PreviewPane</b>'s <b>UserHyperlinkJump</b>
            event. That event will be fired when a hyperlink with the link target
            of this type is clicked.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetUser"/> class.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1LinkTargetAnchor">
            <summary>
            Describes a <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> pointing to a
            <see cref="T:C1.C1PreviewClient.C1Anchor"/> within the current document.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetAnchor"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetAnchor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetAnchor"/> class.
            </summary>
            <param name="anchorName">The name (<see cref="P:C1.C1PreviewClient.C1Anchor.Name"/>) of the target <see cref="T:C1.C1PreviewClient.C1Anchor"/>.</param>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetAnchor.AnchorName">
            <summary>
            Gets the name (<see cref="P:C1.C1PreviewClient.C1Anchor.Name"/>) of the target <see cref="T:C1.C1PreviewClient.C1Anchor"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1LinkTargetExternalAnchor">
            <summary>
            Describes a <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> pointing to a
            <see cref="T:C1.C1PreviewClient.C1Anchor"/> in a different <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetExternalAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetExternalAnchor"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetExternalAnchor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetExternalAnchor"/> class.
            </summary>
            <param name="documentFileName">The name of the file (C1D or C1DX) containing the target document.</param>
            <param name="anchorName">The name (<see cref="P:C1.C1PreviewClient.C1Anchor.Name"/>) of the target <see cref="T:C1.C1PreviewClient.C1Anchor"/>.</param>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetExternalAnchor.DocumentFileName">
            <summary>
            Gets the filename with the target <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1LinkTargetFile">
            <summary>
            Describes a <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> pointing to an external document, file or URL.
            The hyperlink jump is performed using the <b>ShellExecute</b> OS shell API, so the result
            depends on the operating system and installed programs.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetFile"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetFile"/> class.
            </summary>
            <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetFile"/> class.
            </summary>
            <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
            <param name="command">The shell command to execute (see <see cref="P:C1.C1PreviewClient.C1LinkTargetFile.Command"/> for details).</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetFile.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetFile"/> class.
            </summary>
            <param name="fileName">The name of the file to execute on hyperlink jump (can be a document, URL etc.).</param>
            <param name="command">The shell command to execute (see <see cref="P:C1.C1PreviewClient.C1LinkTargetFile.Command"/> for details).</param>
            <param name="parameters">The command parameters.</param>
            <param name="directory">The directory where the command is executed.</param>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetFile.FileName">
            <summary>
            Specifies the file or object on which to execute the specified verb.
            </summary>
            <remarks>
            To specify a Shell namespace object, pass the fully qualified parse name.
            Note that not all verbs are supported on all objects. 
            For example, not all document types support the "print" verb.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetFile.Command">
            <summary>
            Gets the command (verb) specifying the action to perform when the link is clicked.
            </summary>
            <remarks>
            <para>The set of available verbs depends on the particular file or folder. 
            Generally, the actions available from an object's shortcut menu are 
            available verbs.</para>
            <para>For more information about verbs and their availability, see Object Verbs. 
            See Extending Shortcut Menus for further discussion of shortcut menus.</para>
            <para>The following verbs are commonly used.</para>
            <list type="table">
            <item><term>edit</term>
            Launches an editor and opens the document for editing. If FileName is not a document file, the function will fail.
            </item>
            <item><term>explore</term>
            <description>Explores the folder specified by FileName.</description>
            </item>
            <item><term>find</term>
            <description>Initiates a search starting from the specified directory.</description>
            </item>
            <item><term>open</term>
            <description>Opens the file specified by the FileName parameter.
            The file can be an executable file, a document file, or a folder.</description>
            </item>
            <item><term>print</term>
            <description>Prints the document file specified by FileName.
            If FileName is not a document file, the function will fail.</description>
            </item>
            <item><term>Empty string</term>
            <description>For systems prior to Microsoft? Windows? 2000, the default verb is used 
            if it is valid and available in the registry. If not, the "open" verb is used.
            For Windows 2000 and later systems, the default verb is used if available. 
            If not, the "open" verb is used. If neither verb is available, 
            the system uses the first verb listed in the registry.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetFile.Parameters">
            <summary>
            If the <see cref="P:C1.C1PreviewClient.C1LinkTargetFile.FileName"/> parameter specifies an executable file, this is a string 
            specifying the parameters to be passed to the application. 
            The format of this string is determined by the verb that is to be invoked. 
            If <see cref="P:C1.C1PreviewClient.C1LinkTargetFile.FileName"/> specifies a document file, this should be an empty string.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetFile.Directory">
            <summary>
            Gets the default directory.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PageJumpTypeEnum">
            <summary>
            Describes the supported modes of moving between pages in a viewer.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageJumpTypeEnum.First">
            <summary>
            Move to the first page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageJumpTypeEnum.Previous">
            <summary>
            Move to the previous page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageJumpTypeEnum.Next">
            <summary>
            Move to the next page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageJumpTypeEnum.Last">
            <summary>
            Move to the last page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageJumpTypeEnum.Absolute">
            <summary>
            Move directly to the specified page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageJumpTypeEnum.Relative">
            <summary>
            Move to the page specified relative to the current page.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1LinkTargetPage">
            <summary>
            Describes a <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> pointing to another page in the current document.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetPage"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetPage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetPage"/> class.
            </summary>
            <param name="pageNo">The absolute 1-based target page number.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetPage.#ctor(C1.C1PreviewClient.PageJumpTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetPage"/> class.
            </summary>
            <param name="pageJumpType">The type of the page jump.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetPage.#ctor(C1.C1PreviewClient.PageJumpTypeEnum,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetPage"/> class.
            </summary>
            <param name="pageJumpType">The type of the page jump.</param>
            <param name="pageNo">The absolute 1-based target page number.</param>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetPage.PageJumpType">
            <summary>
            Gets the type of page jump.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetPage.PageNo">
            <summary>
            Gets the page number to jump to.
            Depending on the value of <see cref="P:C1.C1PreviewClient.C1LinkTargetPage.PageJumpType"/>, specifies
            an absolute (1-based) or a relative page number.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1LinkTargetDocumentLocation">
            <summary>
            Describes a <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> pointing to an object within the current document
            that supports the <see cref="T:C1.C1PreviewClient.IDocumentLocation"/> interface.
            Types supporting that interface include <see cref="T:C1.C1PreviewClient.RenderObject"/>,
            <see cref="T:C1.C1PreviewClient.ParagraphObject"/>, <see cref="!:C1Page"/>, and table elements (rows, columns, etc.).
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetDocumentLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetDocumentLocation"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1LinkTargetDocumentLocation.#ctor(C1.C1PreviewClient.IDocumentLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1LinkTargetDocumentLocation"/> class.
            </summary>
            <param name="documentLocation">The target object (must support the <see cref="T:C1.C1PreviewClient.IDocumentLocation"/> interface).</param>
        </member>
        <member name="P:C1.C1PreviewClient.C1LinkTargetDocumentLocation.DocumentLocation">
            <summary>
            Gets the target object supporting the <see cref="T:C1.C1PreviewClient.IDocumentLocation"/> interface.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1PageSettings">
            <summary>
            Represents the page settings of a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1PageSettings"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.#ctor(C1.C1PreviewClient.C1PageSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1PageSettings"/> class
            from another <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.
            </summary>
            <param name="source">The <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object to initialize the current one from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.#ctor(C1.C1PreviewClient.C1PageSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1PageSettings"/> class
            from another <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.
            </summary>
            <param name="source">The <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object to initialize the current one from.</param>
            <param name="landscape">A value indicating whether the current page settings should have landscape orientation.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.#ctor(System.Drawing.Printing.PageSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1PageSettings"/> class
            from a <see cref="T:System.Drawing.Printing.PageSettings"/> object.
            </summary>
            <param name="source">The <see cref="T:System.Drawing.Printing.PageSettings"/> object to initialize the current page settings from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.#ctor(System.Drawing.Printing.PaperKind,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="paperSize"></param>
            <param name="landscape"></param>
            <param name="leftMargin"></param>
            <param name="topMargin"></param>
            <param name="rightMargin"></param>
            <param name="bottomMargin"></param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="leftMargin"></param>
            <param name="topMargin"></param>
            <param name="rightMargin"></param>
            <param name="bottomMargin"></param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.#ctor(System.Boolean,System.Drawing.Printing.PaperKind,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="usePrinterPaperSize"></param>
            <param name="paperSize"></param>
            <param name="landscape"></param>
            <param name="leftMargin"></param>
            <param name="topMargin"></param>
            <param name="rightMargin"></param>
            <param name="bottomMargin"></param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="usePrinterPaperSize"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="leftMargin"></param>
            <param name="topMargin"></param>
            <param name="rightMargin"></param>
            <param name="bottomMargin"></param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.Compare(C1.C1PreviewClient.C1PageSettings)">
            <summary>
            Compares the current <see cref="T:C1.C1PreviewClient.C1PageSettings"/> with another <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.
            </summary>
            <param name="other">The <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object to compare the current one to.</param>
            <returns>True if the two objects contain identical properties, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.
            </summary>
            <returns>The newly created <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.AssignFrom(C1.C1PreviewClient.C1PageSettings)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.C1PageSettings"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.AssignFrom(System.Drawing.Printing.PageSettings)">
            <summary>
            Assigns (copies) properties from a <see cref="T:System.Drawing.Printing.PageSettings"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.ToPageSettings(C1.C1PreviewClient.C1PrintDocument,System.Drawing.Printing.PrinterSettings)">
            <summary>
            Creates an instance of the <see cref="T:System.Drawing.Printing.PageSettings"/> class,
            and initializes it with the properties of the current <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.
            </summary>
            <param name="document">The <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object providing the default units
            (needed if some sizes in the current object are specified in <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Default"/>) and DPI
            (needed if some sizes in the current object are specified in <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>).
            Can be <b>null</b>, but in that case the current object must not contain sizes
            specified in document default units or pixels.</param>
            <param name="printerSettings">A <see cref="T:System.Drawing.Printing.PrinterSettings"/> object
            used to create the resulting <see cref="T:System.Drawing.Printing.PageSettings"/>.
            If null, the default printer is used.</param>
            <returns>The newly created <see cref="T:System.Drawing.Printing.PageSettings"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.ToPageSettings(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            Creates an instance of the <see cref="T:System.Drawing.Printing.PageSettings"/> class,
            and initializes it with the properties of the current <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.
            </summary>
            <param name="document">The <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object providing the default units
            (needed if some sizes in the current object are specified in <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Default"/>) and DPI
            (needed if some sizes in the current object are specified in <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>).
            Can be null, but in that case the current object must not contain sizes
            specified in document default units or pixels.</param>
            <returns>The newly created <see cref="T:System.Drawing.Printing.PageSettings"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.ToPageSettings">
            <summary>
            Creates an instance of the <see cref="T:System.Drawing.Printing.PageSettings"/> class,
            and initializes it with the properties of the current <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.
            </summary>
            <returns>The newly created <see cref="T:System.Drawing.Printing.PageSettings"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.Compare(C1.C1PreviewClient.C1PageSettings,C1.C1PreviewClient.C1PageSettings)">
            <summary>
            Compares the properties of two <see cref="T:C1.C1PreviewClient.C1PageSettings"/> objects.
            </summary>
            <param name="v1">The first object to compare.</param>
            <param name="v2">The second object to compare.</param>
            <returns>True if the two objects' properties are identical, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.GetCurrentLocaleDefaultPaperSize(System.Double@,System.Double@,System.Double@,C1.C1PreviewClient.UnitTypeEnum@)">
            <summary>
            Retrieves the locale-specific default paper size for the current locale.
            </summary>
            <param name="width">OUT: The width of the default paper.</param>
            <param name="height">OUT: The height of the default paper.</param>
            <param name="margin">OUT: The width of default margins.</param>
            <param name="units">OUT: Unit of measurement used to express the sizes (width, height and margin).</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.CreateDefaultPageSettings">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1PreviewClient.C1PageSettings"/> class.
            If <see cref="P:C1.C1PreviewClient.C1PrintDocument.UsePrinterForDefaultPageSettings"/> is true,
            initializes the newly created object with settings based on the current
            printer (specified by <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementPrinterName"/>).
            Otherwise, initializes the newly created object with default system locale settings.
            </summary>
            <returns>The newly created <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.UsePrinterPaperSize">
            <summary>
            Gets or sets a value indicating whether to use the printer paper size
            when generating the document.
            This property does not affect the values of 
            <see cref="P:C1.C1PreviewClient.C1PageSettings.Landscape"/>,
            <see cref="P:C1.C1PreviewClient.C1PageSettings.Width"/>,
            <see cref="P:C1.C1PreviewClient.C1PageSettings.Height"/> and
            <see cref="P:C1.C1PreviewClient.C1PageSettings.PaperKind"/> properties.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.PageLayout">
            <summary>
            Gets the <see cref="P:C1.C1PreviewClient.C1PageSettings.PageLayout"/> object containing the current <see cref="T:C1.C1PreviewClient.C1PageSettings"/>.
            Null is returned if the current object does not belong to a <see cref="P:C1.C1PreviewClient.C1PageSettings.PageLayout"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.Landscape">
            <summary>
            Gets or sets a value indicating whether the page is printed in landscape or portrait orientation.
            Changing this property swaps the page height and width.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.Width">
            <summary>
            Gets or sets the width of the paper.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.Height">
            <summary>
            Gets or sets the height of the paper.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.PaperKind">
            <summary>
            Gets or sets the paper kind.
            Changing of this property may change <see cref="P:C1.C1PreviewClient.C1PageSettings.Width"/> and/or <see cref="P:C1.C1PreviewClient.C1PageSettings.Height"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.Color">
            <summary>
            Gets or sets a value indicating whether the page should be printed in color.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.PaperSourceKind">
            <summary>
            Gets or sets the desired paper source kind.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.PaperSourceName">
            <summary>
            Gets or sets the name of the paper source.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PageSettings.PrinterResolutionKind">
            <summary>
            Gets or sets the desired printer resolution kind.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1PageSettings.PageSettingsTypeConverter">
            <summary>
            Provides <see cref="T:System.ComponentModel.TypeConverter"/> for the <see cref="T:C1.C1PreviewClient.C1PageSettings"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.PageSettingsTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether an object of the specified type can be converted to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type to convert from.</param>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PageSettings.PageSettingsTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The object to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to convert the <i>value</i> parameter to.</param>
            <returns>An <b>Object</b> that represents the converted value.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.C1DocumentFormatEnum">
            <summary>
            Specifies the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> persistence format.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.C1DocumentFormatEnum.C1d">
            <summary>
            Specifies the original C1Preview for .NET 2.0 format
            (a document is represented by a single XML file).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1PrintDocument">
            <summary>
            Represents a ComponentOne Document.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IStyleOwner">
            <summary>
            Defines a class that can expose a <b>Style</b> property (of the type <see cref="P:C1.C1PreviewClient.IStyleOwner.Style"/>).
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.IStyleOwner.GetAmbientPropValue(System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            Retrieves the value of an ambient property.
            </summary>
            <param name="propKey">The property key.</param>
            <param name="context"><see cref="T:C1.C1PreviewClient.Scripting.IScriptContext"/> to use for evaluation of calculated properties.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.IStyleOwner.GetNonAmbientPropValue(System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            Retrieves the value of a non-ambient property.
            </summary>
            <param name="propKey">The property key.</param>
            <param name="context"><see cref="T:C1.C1PreviewClient.Scripting.IScriptContext"/> to use for evaluation of calculated properties.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.IStyleOwner.GetProp(System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            Gets the value of a style property existing on the current object
            (does not attempt to resolve properties not explicitly defined on the current object).
            </summary>
            <param name="propKey">The property key (any of the <b>Style.c_propXXX</b> constants).</param>
            <param name="context"><see cref="T:C1.C1PreviewClient.Scripting.IScriptContext"/> that should be used to get calculated properties.</param>
            <returns>The property value.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.IStyleOwner.AmbientParent">
            <summary>
            Gets the parent for ambient properties.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IStyleOwner.Style">
            <summary>
            Gets the style of the current <see cref="T:C1.C1PreviewClient.IStyleOwner"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IStyleOwner.Dictionary">
            <summary>
            Gets the dictionary object used to store images.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ICollectionOwner">
            <summary>
            <para>For internal use only.</para>
            Describes an interface allowing an object that implements it to receive
            notifications about changes from <see cref="T:C1.C1PreviewClient.OwnedCollection"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ICollectionOwner.OnClear(System.Object)">
            <summary>
            Called when the owned collection is being cleared.
            </summary>
            <param name="sender">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> that is being cleared.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ICollectionOwner.OnClearComplete(System.Object)">
            <summary>
            Called after the owned collection has been cleared.
            </summary>
            <param name="sender">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> that has been cleared.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ICollectionOwner.OnInsert(System.Object,System.Int32,System.Object)">
            <summary>
            Called when an item is about to be inserted into the owned collection.
            </summary>
            <param name="sender">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> into which the item is about to be inserted.</param>
            <param name="index">The index of the item that is being inserted.</param>
            <param name="item">The item that is being inserted.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ICollectionOwner.OnInsertComplete(System.Object,System.Int32,System.Object)">
            <summary>
            Called after an item has been inserted into the owned collection.
            </summary>
            <param name="sender">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> into which the item has been inserted.</param>
            <param name="index">The index of the item that has been inserted.</param>
            <param name="item">The item that has been inserted.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ICollectionOwner.OnRemove(System.Object,System.Int32,System.Object)">
            <summary>
            Called when an item is about to be removed from the owned collection.
            </summary>
            <param name="sender">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> from which the item is about to be removed.</param>
            <param name="index">The index of the item that is being removed.</param>
            <param name="item">The item that is being removed.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ICollectionOwner.OnRemoveComplete(System.Object,System.Int32,System.Object)">
            <summary>
            Called after an item has been removed from the owned collection.
            </summary>
            <param name="sender">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> from which the item has been removed.</param>
            <param name="index">The index of the item that has been removed.</param>
            <param name="item">The item that has been removed.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ICollectionOwner.OnSet(System.Object,System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item is about to be set in the owned collection.
            </summary>
            <param name="sender">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> in which the item is about to be set.</param>
            <param name="index">The index of the item that is being set.</param>
            <param name="oldValue">The old value of the item that is being set.</param>
            <param name="newValue">The new value for the item that is being set.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ICollectionOwner.OnSetComplete(System.Object,System.Int32,System.Object,System.Object)">
            <summary>
            Called after an item has been set in the owned collection.
            </summary>
            <param name="sender">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> in which the item has been set.</param>
            <param name="index">The index of the item that has been set.</param>
            <param name="oldValue">The old value of the item that has been set.</param>
            <param name="newValue">The new value for the item that has been set.</param>
        </member>
        <member name="T:C1.C1PreviewClient.IDocumentLocation">
            <summary>
            Describes a location within a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>
            (used e.g. as the target of a hyperlink etc.).
            The location is identified by a page and a rectangle on that page.
            The rectangle's unit of measurement is determined by the document's
            <see cref="P:C1.C1PreviewClient.C1PrintDocument.ResolvedUnit"/> property.
            Classes that implement this interface are
            <see cref="!:C1Page"/>, <see cref="T:C1.C1PreviewClient.RenderObject"/> and <see cref="T:C1.C1PreviewClient.C1Anchor"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.IC1FormatVersionProvider">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.IC1FormatVersionProvider.GetFormatVersion">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="F:C1.C1PreviewClient.C1PrintDocument.c_DocumentVersion">
            <summary>
            Increment this constant (minor version) every time when you change the
            serializable properties / objects of C1PrintDocument or nested objects.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.C1PrintDocument.c_AssemblyVersion">
            <summary>
            Holds the AssemblyVersion of all preview/reports product dlls.
            Used to get access to the assembly version of this dll from "client" code.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.ShouldSerializeAutoEmbedFonts">
            <summary>
            Indicates whether the <see cref="!:AutoEmbedFonts"/> property should be serialized.
            </summary>
            <returns>True if <see cref="!:AutoEmbedFonts"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.ShouldSerializeStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.C1PrintDocument.Style"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.C1PreviewClient.C1PrintDocument.Style"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.ShouldSerializeTagOpenParen">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagOpenParen"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagOpenParen"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.ShouldSerializeTagCloseParen">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagCloseParen"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagCloseParen"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.ShouldSerializeTagEscapeString">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagEscapeString"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagEscapeString"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.ShouldSerializeTagsInputDialogClassName">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagsInputDialogClassName"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagsInputDialogClassName"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.ShouldSerializeTagsInputDialogClass">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagsInputDialogClass"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagsInputDialogClass"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.SetPropertiesToDefault">
            <summary>
            Resets all document's properties to default values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.OnDefaultUnitChanged">
            <summary>
            Called when the <see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/> property value has changed.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.OnResolvedUnitChanged">
            <summary>
            Called when the <see cref="P:C1.C1PreviewClient.C1PrintDocument.ResolvedUnit"/> property value has changed.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.OnBusyStateChanged">
            <summary>
            Called when the <see cref="P:C1.C1PreviewClient.C1PrintDocument.BusyState"/> property value has changed.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.OnLongOperation(System.Double,System.Boolean)">
            <summary>
            Called to indicate the progress of document generating.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
            <param name="canCancel">Whether the generating can be cancelled.</param>
            <returns>Returns true if generation is *not* aborted.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.InitDocument">
            <summary>
            Performs some initializations: creates the sub-objects (PageHeader, PageFooter etc)
            initializes DefaultPageSettings and so on.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.GetFonts">
            <summary>
            Returns the array of fonts used in document.
            </summary>
            <returns>Returns the array of Font objects.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.GetUniqueFonts">
            <summary>
            Returns the <see cref="T:C1.C1PreviewClient.C1PrintDocument.UniqueFonts"/> object with all fonts
            used in this document.
            </summary>
            <returns>The <see cref="T:C1.C1PreviewClient.C1PrintDocument.UniqueFonts"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.CreateGraphicsForDpi(System.Single,System.Drawing.Graphics@,System.IntPtr@)">
            <summary>
            Creates the Graphics object with specified dpi.
            </summary>
            <param name="dpi">The requested dpi.</param>
            <param name="graphics">OUT: Created graphics object or null if it can't be created for specified dpi.</param>
            <param name="dc">OUT: Device context handle used to create Graphics object, it can be IntPtr.Zero if Graphics was created with FromHwnd method.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.Clear">
            <summary>
            Clears the current document, sets all properties to their default values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.Save(System.String)">
            <summary>
            Saves the current document to a disk file. The persistense format
            (<see cref="F:C1.C1PreviewClient.C1DocumentFormatEnum.C1d"/> or <see cref="!:C1DocumentFormatEnum.C1dx"/>)
            is determined by the specified file extension. The save format defaults
            to <see cref="F:C1.C1PreviewClient.C1DocumentFormatEnum.C1d"/> if the format cannot be determined from the extension.
            </summary>
            <param name="fileName">The target file name.</param>
            <seealso cref="T:C1.C1PreviewClient.C1DocumentFormatEnum"/>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.Save(System.String,C1.C1PreviewClient.C1DocumentFormatEnum)">
            <summary>
            Saves the current document to a disk file using the specified format.
            </summary>
            <param name="fileName">The target file name.</param>
            <param name="documentFormat">The document persistence format to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.Save(System.IO.Stream)">
            <summary>
            Saves the current document to a stream using the <see cref="F:C1.C1PreviewClient.C1DocumentFormatEnum.C1d"/> format.
            </summary>
            <param name="stream">The target stream.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.Save(System.IO.Stream,C1.C1PreviewClient.C1DocumentFormatEnum)">
            <summary>
            Saves the current document to a stream using the specified format.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="documentFormat">The document persistence format to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1PrintDocument.SelectBestMeasurementDevice">
            <summary>
            Selects a device to use for <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementGraphics"/>.
            
            This method looks for a printer with a "square" resolution
            (i.e. with the same horizontal and vertical DPI) equal to or larger than 300 DPI.
            If such a printer is found, it is assigned to <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementPrinterName"/>,
            and <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDevice"/> is set to <see cref="F:C1.C1PreviewClient.MeasurementDeviceEnum.Printer"/>.
            Otherwise, <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDevice"/> is set to <see cref="F:C1.C1PreviewClient.MeasurementDeviceEnum.Screen"/>.
            
            The selected device's resolution is returned by <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDpi"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.MaxPages">
            <summary>
            Gets or sets the value limiting the maximum number of pages
            in the generated document.
            <para>
            The default value is -1, indicating that the number of pages
            in the document is unlimited.
            </para>
            <para>
            This property is only taken into account when the document is
            created using the <see cref="M:C1.C1PreviewClient.C1PrintDocument.Generate"/> method.
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.CreationMode">
            <summary>
            Gets the document creation mode.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.CreationDpi">
            <summary>
            Gets or sets the resolution (DPI) used during document creation.
            Note that if <see cref="P:C1.C1PreviewClient.C1PrintDocument.ResolvedUnit"/> is <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>,
            this is also the resolution of <b>ResolvedUnit</b> pixels.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.CreationGraphics">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Graphics"/> object used when the document is created.
            That <b>Graphics</b> is used to calculate text sizes, measure RTF text, and so on.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.BusyState">
            <summary>
            Gets the current busy state of the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.EmfType">
            <summary>
            Gets or sets the type of metafiles created by the current document.
            The default is <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.DocumentInfo">
            <summary>
            Gets or sets the <see cref="P:C1.C1PreviewClient.C1PrintDocument.DocumentInfo"/> object containing the information
            about the current document (such as author, company, and so on).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.ResolvedUnit">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/> value that will be used
            to specify the resolved sizes of objects within the current document
            (e.g. the sizes of <see cref="!:RenderFragment"/> objects representing the
            render objects in the document).
            <para>
            This property cannot be changed when the document is generating
            (i.e. while <see cref="!:IsGenerating"/> returns true).
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.PageLayout">
            <summary>
            Gets or sets the default page layout for the current document.
            This property is a shortcut for <see cref="P:C1.C1PreviewClient.DocumentPageLayouts.Default"/>.
            (A page layout includes page settings, page headers and footers, and column definitions.)
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.PageLayouts">
            <summary>
            Gets the page layouts used in the current document.
            In addition to the default layout which is always present, special layouts
            may be defined for first, last, even and odd pages of the document.
            The effective layout for each page is then produced by merging all applicable layouts.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.Stacking">
            <summary>
            Gets or sets the stacking rules for the current document.
            <para>The default value is <see cref="F:C1.C1PreviewClient.StackingRulesEnum.BlockTopToBottom"/>.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit">
            <summary>
            Gets or sets the default unit of measurement for the current document.
            This unit is used when sizes or coordinates of objects within the document
            are set without specifying the unit of measurement explicitly.
            <para>The default value is <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Inch"/>.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.Body">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.DocumentBody"/> object representing the body of the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.Tags">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TagCollection"/> representing the collection
            of user-defined <see cref="T:C1.C1PreviewClient.Tag"/> objects in the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.TagOpenParen">
            <summary>
            Gets or sets the string used as the opening parentheses when including references to <see cref="T:C1.C1PreviewClient.Tag"/> objects
            in the current document's texts (e.g. in <see cref="P:C1.C1PreviewClient.RenderText.Text"/> or <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/>).
            To include a <b>TagOpenParen</b> string itself in a text, prepend it with the <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagEscapeString"/> string.
            <para>The default value is <b>"["</b>.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.TagCloseParen">
            <summary>
            Gets or sets the string used as the closing parentheses when including references to <see cref="T:C1.C1PreviewClient.Tag"/> objects
            in the current document's texts (e.g. in <see cref="P:C1.C1PreviewClient.RenderText.Text"/> or <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/>).
            To include a <b>TagCloseParen</b> string itself in a text, prepend it with the <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagEscapeString"/> string.
            <para>The default value is <b>"]"</b>.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.TagEscapeString">
            <summary>
            Gets or sets the string that can be used to escape <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagOpenParen"/> and <see cref="P:C1.C1PreviewClient.C1PrintDocument.TagCloseParen"/>.
            To include a <b>TagEscapeString</b> string itself in a text, duplicate it.
            <para>The default value is <b>"\"</b>.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.ThrowExceptionOnError">
            <summary>
            Gets or sets a value indicating whether an exception should be raised if an error occurs
            while the current document generates.
            If this property is false, the <see cref="M:C1.C1PreviewClient.C1PrintDocument.Generate"/> method will return false
            if errors occurred while generating, otherwise an exception will be thrown
            on the first error.
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.AllowNonReflowableDocs">
            <summary>
            Gets or sets a value indicating whether methods can be called on the current document
            that would result in the document becoming non-reflowable (such as <see cref="!:NewPage()"/>).
            If this property is false, calling such methods will result in an exception.
            If this property is true, calling such methods will set the <see cref="!:Reflowable"/>
            flag to false on the current document.
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.ClipPage">
            <summary>
            Gets or sets a value indicating whether to clip the content 
            of the current document to page margins.
            <para>The default value is <b>false</b>.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.DisableUserReflow">
            <summary>
            Gets or sets a value indicating whether the end user should be allowed
            to reflow the document with different page settings. This value is only a hint
            to the document viewer, it is the viewer's responsibility to respect that hint.
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.UseGdiPlusTextRendering">
            <summary>
            Gets or sets a value indicating whether all text in the current document
            should be rendered using the GDI+ text API.
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.DoEvents">
            <summary>
            Gets or sets a value indicating whether the current <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>
            should handle Windows messages while generating.
            <para>The default value is false.</para>
            </summary>
            <remarks>
            <para>Setting this property to true allows users to resize forms, click buttons, etc. while documents are 
            being generated. This makes applications more responsive, and is necessary if you want to provide a
            "Cancel" button to stop the document generation (otherwise the user wouldn't be able to click the
            button until the generation is complete).</para>
            <para>Setting this property to false will cause documents to generate slightly faster.</para>
            </remarks>
            <example>
            <para>The code below implements "Generate" and "Cancel" buttons attached to a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.</para>
            <para>The "Generate" button checks whether the document is busy before starting to generate it.
            This is necessary because the user could click the "Generate" button several times in a row, before the document got a 
            chance to finish generating. (Calling the <see cref="M:C1.C1PreviewClient.C1PrintDocument.Generate"/> method while the component is busy throws an 
            exception.)</para>
            <para>The "Cancel" button checks whether the document is currently generating, and sets the <see cref="!:Cancel"/> 
            property to true if it is.</para>
            <code>
            _doc.DoEvents = true;
            
            private void Generate_Click(object sender, EventArgs e)
            {
               if (_doc.BusyState != BusyStateEnum.Ready)
                   Console.WriteLine("Cannot generate now, document is busy");
               else 
                   _doc.Generate();
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_doc.BusyState != BusyStateEnum.Ready) 
                   _doc.Cancel = true;
               else 
                   Console.WriteLine("Document is not generating, nothing to cancel");
            }
            </code>
            </example>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.Style">
            <summary>
            Gets the main (root) <see cref="!:C1.C1Preview.Style"/> of the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.Outlines">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.OutlineNodeCollection"/> representing the collection of
            <see cref="T:C1.C1PreviewClient.OutlineNode"/> objects of the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.Dictionary">
            <summary>
            Gets the current document's <see cref="!:C1.C1Preview.Dictionary"/>.
            The <b>Dictionary</b> can be used to contain reused resources
            (e.g. images used in multiple places in the document).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.AddWarningsWhenErrorInScript">
            <summary>
            Gets or sets a value indicating whether to add messages to the
            current document's <see cref="!:Warnings"/> collection
            when script errors are found.
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.ShowTagsInputDialog">
            <summary>
            Gets or sets a value indicating whether a dialog allowing to input values for some or all
            of the user defined tags (elements of the <see cref="P:C1.C1PreviewClient.C1PrintDocument.Tags"/> collection) should be shown
            to the user before the document generates. To include or exclude tags from the dialog,
            use <see cref="P:C1.C1PreviewClient.Tag.ShowInDialog"/>.
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.TagsInputDialogClass">
            <summary>
            Gets or sets the type of form that is to be used to input tag values
            (the form will be shown if <see cref="P:C1.C1PreviewClient.C1PrintDocument.ShowTagsInputDialog"/> is true).
            The form type must be derived from <see cref="!:TagsInputFormBase"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.TagsInputDialogClassName">
            <summary>
            Gets or sets the type name of form that is to be used to input tag values
            (the form will be shown if <see cref="P:C1.C1PreviewClient.C1PrintDocument.ShowTagsInputDialog"/> is true).
            The form type must be derived from <see cref="!:TagsInputFormBase"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.UsePrinterForDefaultPageSettings">
            <summary>
            Gets or sets a value indicating whether the default page settings are
            retrieved from the default printer (may slow things down if the printer
            is a network one) or calculated based on the current locale.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.DocumentFormatVersion">
            <summary>
            Gets a string representing the version of the document persistence format
            supported by the current assembly.
            This version is used to check persisted documents' compatibility.
            Versions are backwards-compatible, but not vice versa
            (i.e. a document persisted using a newer version of <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>
            may be unreadable by an older version).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.FormatVersion">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.Serialization.C1FormatVersion"/> object representing the version of the document persistence format
            supported by the current assembly.
            This version is used to check persisted documents' compatibility.
            Versions are backwards-compatible, but not vice versa
            (i.e. a document persisted using a newer version of <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>
            may be unreadable by an older version).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDpi">
            <summary>
            Gets the resolution (DPI) of the <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementGraphics"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.MeasurementPrinterName">
            <summary>
            Gets or sets the name of the printer used to provide <see cref="T:System.Drawing.Graphics"/>
            used to measure/calculate layouts of <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> objects.
            This property is only used if <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDevice"/> is set to <see cref="F:C1.C1PreviewClient.MeasurementDeviceEnum.Printer"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDevice">
            <summary>
            Gets or sets the type of device used to provide <see cref="T:System.Drawing.Graphics"/> 
            used to measure/calculate layouts of <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> objects.
            If this property is set to <see cref="F:C1.C1PreviewClient.MeasurementDeviceEnum.Printer"/>,
            <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementPrinterName"/> specifies the printer.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1PrintDocument.MeasurementGraphics">
            <summary>
            Gets the <see cref="T:System.Drawing.Graphics"/> object
            used to measure/calculate layouts of <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> objects.
            </summary>
        </member>
        <member name="E:C1.C1PreviewClient.C1PrintDocument.DefaultUnitChanged">
            <summary>
            Occurs when the <see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/> property value has changed.
            </summary>
        </member>
        <member name="E:C1.C1PreviewClient.C1PrintDocument.ResolvedUnitChanged">
            <summary>
            Occurs when the <see cref="P:C1.C1PreviewClient.C1PrintDocument.ResolvedUnit"/> property value has changed.
            </summary>
        </member>
        <member name="E:C1.C1PreviewClient.C1PrintDocument.LongOperation">
            <summary>
            Occurs periodically during document generation.
            Allows to provide progress indication and the ability to cancel generation to the user.
            </summary>
        </member>
        <member name="E:C1.C1PreviewClient.C1PrintDocument.BusyStateChanged">
            <summary>
            Occurs when the <see cref="P:C1.C1PreviewClient.C1PrintDocument.BusyState"/> property value has changed.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Debug.DebugUtils">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Debug.DebugUtils.WriteLine(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Debug.DebugUtils.WriteLine(System.String,System.Object[])">
            <summary>
            For internal use.
            </summary>
            <param name="formatMask"></param>
            <param name="args"></param>
        </member>
        <member name="T:C1.C1PreviewClient.DictionaryItem">
            <summary>
            The base class for types of objects that can be inserted in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>'s <see cref="T:C1.C1PreviewClient.Dictionary"/>.
            Derived classes include <see cref="T:C1.C1PreviewClient.DictionaryImage"/> and <see cref="T:C1.C1PreviewClient.DictionaryIcon"/>.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.C1PrintDocument.Dictionary"/>
        </member>
        <member name="T:C1.C1PreviewClient.IOwnedCollectionItem">
            <summary>
            <para>For internal use only.</para>
            Elements of an <see cref="T:C1.C1PreviewClient.OwnedCollection"/> must implement this interface.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOwnedCollectionItem.Owner">
            <summary>
            Gets or sets the owner of the collection item.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryItem"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:C1.C1PreviewClient.DictionaryItem"/>.</param>
            <seealso cref="P:C1.C1PreviewClient.DictionaryItem.Name"/>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryItem.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.Dictionary"/> object that is the owner of the current item.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryItem.Name">
            <summary>
            Gets or sets the name of the current item.
            The name must be unique within the <see cref="T:C1.C1PreviewClient.Dictionary"/> containing the item.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Dictionary">
            <summary>
            Represents a dictionary within a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            The dictionary allows to store an object such as an image or an icon once,
            and reuse it throughout the document.
            Items contained in the dictionary must have types derived from <see cref="T:C1.C1PreviewClient.DictionaryItem"/>
            (e.g. <see cref="T:C1.C1PreviewClient.DictionaryImage"/> or <see cref="T:C1.C1PreviewClient.DictionaryIcon"/>).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.OwnedCollection">
            <summary>
            Describes a collection with an owner.
            Base class for <see cref="T:C1.C1PreviewClient.RenderObjectCollection"/> and <see cref="T:C1.C1PreviewClient.ParagraphObjectCollection"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.OwnedCollection"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.#ctor(C1.C1PreviewClient.ICollectionOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.OwnedCollection"/> class.
            </summary>
            <param name="owner">The collection owner.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.OnClear">
            <summary>
            Called when the collection is about to be cleared.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.OnClearComplete">
            <summary>
            Called after the collection has been cleared.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Called when an item is about to be iserted.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Called after an item has been inserted.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Called when an item is about to be removed.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Called after an item has been removed.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item is about to be set.
            </summary>
            <param name="index">The item index.</param>
            <param name="oldValue">The old item.</param>
            <param name="newValue">The new item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Called after an item has been set.
            </summary>
            <param name="index">The item index.</param>
            <param name="oldValue">The old item.</param>
            <param name="newValue">The new item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.GetItemType">
            <summary>
            Gets the type of items in the collection.
            If this method returns null, items of different types can be added to the collection.
            Otherwise, only items of the type this method returns can be added.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.AddInt(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.InsertInt(System.Int32,System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.RemoveInt(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.GetByIndex(System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.SetByIndex(System.Int32,System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.AssignFrom(C1.C1PreviewClient.OwnedCollection)">
            <summary>
            Clears the current collection, and copies the items from another one.
            The items are copied by cloning, and must support the <see cref="T:System.ICloneable"/>
            interface (if an item that does not support is encountered, an exception occurs).
            </summary>
            <param name="source">The <see cref="T:C1.C1PreviewClient.OwnedCollection"/> to copy items from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.IndexOf(System.Object)">
            <summary>
            Searches for the specified Object and returns the zero-based index 
            of the first occurrence within the entire collection.
            </summary>
            <param name="obj">The Object to locate in the collection. The value can be a null reference.</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.OwnedCollection.Exchange(System.Int32,System.Int32)">
            <summary>
            Swap two items in collection.
            </summary>
            <param name="item1">Index of first item.</param>
            <param name="item2">Index of second item.</param>
        </member>
        <member name="P:C1.C1PreviewClient.OwnedCollection.Owner">
            <summary>
            Gets the owner of collection.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.OnClearComplete">
            <summary>
            Called when the dictionary has been cleared.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Called when an item has been removed from the dictionary.
            </summary>
            <param name="index">The index of the removed item.</param>
            <param name="value">The removed item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item in the dictionary has been set.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item in the dictionary is about to be set.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.OnInsert(System.Int32,System.Object)">
            <summary>
            Called when an item is about to be inserted into the dictionary.
            </summary>
            <param name="index">The index where the item is to be inserted.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.GetItemType">
            <summary>
            Gets the type of items that can be added to this dictionary.
            </summary>
            <returns>The <see cref="T:C1.C1PreviewClient.DictionaryItem"/> type.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.Add(C1.C1PreviewClient.DictionaryItem)">
            <summary>
            Adds an item to the current dictionary.
            </summary>
            <param name="di">The <see cref="T:C1.C1PreviewClient.DictionaryItem"/> to add.</param>
            <returns>The index of the newly added item in the current dictionary.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.Remove(C1.C1PreviewClient.DictionaryItem)">
            <summary>
            Removes an item from the current dictionary.
            </summary>
            <param name="di">The <see cref="T:C1.C1PreviewClient.DictionaryItem"/> to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Dictionary.IndexOfName(System.String)">
            <summary>
            Searches for a <see cref="T:C1.C1PreviewClient.DictionaryItem"/> with the specified <see cref="P:C1.C1PreviewClient.DictionaryItem.Name"/> in the current dictionary.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The index of the item that was found, or -1.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.Dictionary.Document">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object that is the owner of the current dictionary.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Dictionary.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.DictionaryItem"/> with the specified name.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Dictionary.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.DictionaryItem"/> at the specified index.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DictionaryImage">
            <summary>
            Represents an <see cref="P:C1.C1PreviewClient.DictionaryImage.Image"/> stored in a <see cref="T:C1.C1PreviewClient.Dictionary"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryImage"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryImage"/> class.
            </summary>
            <param name="name">The name of the current item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImage.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryImage"/> class.
            </summary>
            <param name="name">The name of the current item.</param>
            <param name="image">The image to store in the current item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImage.ShouldSerializeImage">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DictionaryImage.Image"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.C1PreviewClient.DictionaryImage.Image"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImage.ShouldSerializeOpenXmlImage">
            <summary>
            Indicates whether the <b>OpenXmlImage</b> property should be serialized.
            </summary>
            <returns>True if <b>OpenXmlImage</b> should be serialized, false otherwise.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryImage.Image">
            <summary>
            Gets or sets the <see cref="P:C1.C1PreviewClient.DictionaryImage.Image"/> stored by the current <see cref="T:C1.C1PreviewClient.DictionaryImage"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DictionaryIcon">
            <summary>
            Represents an <see cref="P:C1.C1PreviewClient.DictionaryIcon.Icon"/> stored in a <see cref="T:C1.C1PreviewClient.Dictionary"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIcon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryIcon"/> class.
            </summary>
            <param name="name">The name of the current item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIcon.#ctor(System.String,System.Drawing.Icon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryIcon"/> class.
            </summary>
            <param name="name">The name of the current item.</param>
            <param name="icon">The icon to store in the current item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIcon.ShouldSerializeIcon">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DictionaryIcon.Icon"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.C1PreviewClient.DictionaryIcon.Icon"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIcon.ShouldSerializeOpenXmlIcon">
            <summary>
            Indicates whether the <b>OpenXmlIcon</b> property should be serialized.
            </summary>
            <returns>True if <b>OpenXmlIcon</b> should be serialized, false otherwise.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryIcon.Icon">
            <summary>
            Gets or sets the <see cref="P:C1.C1PreviewClient.DictionaryIcon.Icon"/> stored by the current <see cref="T:C1.C1PreviewClient.DictionaryIcon"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IDictionaryItemLinkOwner">
            <summary>
            <para>For internal use only.</para>
            This interface should be implemented by a class if it needs to hold a link (reference)
            to an object in a <see cref="P:C1.C1PreviewClient.IDictionaryItemLinkOwner.Dictionary"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IDictionaryItemLinkOwner.Dictionary">
            <summary>
            Gets the <see cref="P:C1.C1PreviewClient.IDictionaryItemLinkOwner.Dictionary"/> where the <see cref="T:C1.C1PreviewClient.DictionaryItem"/> is stored.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DictionaryItemLink">
            <summary>
            The base class describing a link (reference) to a <see cref="T:C1.C1PreviewClient.DictionaryItem"/>.
            Provides the base functionality, derived classes such as <see cref="T:C1.C1PreviewClient.DictionaryImageLink"/> and <see cref="T:C1.C1PreviewClient.DictionaryIconLink"/>
            represent links to specific type of dictionary items.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryItemLink.#ctor(C1.C1PreviewClient.IDictionaryItemLinkOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryItemLink"/> class.
            </summary>
            <param name="owner">The owner of this instance.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryItemLink.GetItemData">
            <summary>
            Gets the data representing the item.
            </summary>
            <returns>The data representing the item.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryItemLink.AssignFrom(C1.C1PreviewClient.DictionaryItemLink)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.DictionaryItemLink"/> to the current object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryItemLink.DataInt">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryItemLink.Owner">
            <summary>
            Gets the owner of the current dictionary item.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryItemLink.Data">
            <summary>
            Gets or sets data representing the object stored in the dictionary.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryItemLink.ItemName">
            <summary>
            Gets or sets the name of the item in the dictionary.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DictionaryImageLink">
            <summary>
            Specializes the <see cref="T:C1.C1PreviewClient.DictionaryItemLink"/> class to represent a link to an <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImageLink.#ctor(C1.C1PreviewClient.IDictionaryItemLinkOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryImageLink"/> class.
            </summary>
            <param name="owner">The owner of this instance.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImageLink.ShouldSerializeImage">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DictionaryImageLink.Image"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DictionaryImageLink.Image"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImageLink.ShouldSerializeMetafile">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DictionaryImageLink.Metafile"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DictionaryImageLink.Metafile"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryImageLink.GetItemData">
            <summary>
            Gets the data representing the item.
            </summary>
            <returns>The data representing the item.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryImageLink.Image">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> associated with the current item.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DictionaryIconLink">
            <summary>
            Specializes the <see cref="T:C1.C1PreviewClient.DictionaryItemLink"/> class to represent a link to an <see cref="T:System.Drawing.Icon"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIconLink.#ctor(C1.C1PreviewClient.IDictionaryItemLinkOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DictionaryIconLink"/> class.
            </summary>
            <param name="owner">The owner of this instance.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIconLink.ShouldSerializeIcon">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DictionaryIconLink.Icon"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DictionaryIconLink.Icon"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIconLink.ShouldSerializeOpenXmlIcon">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.DictionaryIconLink.GetItemData">
            <summary>
            Gets the data representing the item.
            </summary>
            <returns>The data representing the item.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.DictionaryIconLink.Icon">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Icon"/> associated with the current item.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DocumentBody">
            <summary>
            Represents the body of a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            The body is the main part of a document presenting visible content,
            and can be accessed via the <see cref="P:C1.C1PreviewClient.C1PrintDocument.Body"/> property on the document.
            (The only other parts presenting visible document content are page headers and footers.)
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentBody.Document">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object containing this <see cref="T:C1.C1PreviewClient.DocumentBody"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentBody.Stacking">
            <summary>
            Gets the stacking rules for the current <see cref="T:C1.C1PreviewClient.DocumentBody"/>.
            Use <see cref="P:C1.C1PreviewClient.C1PrintDocument.Stacking"/> to set the stacking rules.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentBody.HasChildren">
            <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1PreviewClient.DocumentBody"/> contains any render objects
            (i.e. whether the <see cref="P:C1.C1PreviewClient.DocumentBody.Children"/> collection exists and is not empty).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentBody.Children">
            <summary>
            Gets the collection of <see cref="T:C1.C1PreviewClient.RenderObject"/> elements contained within the current <see cref="T:C1.C1PreviewClient.DocumentBody"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DocumentInfoFields">
            <summary>
            Enumerates the fields stored by the <see cref="T:C1.C1PreviewClient.DocumentInfo"/> class.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.None">
            <summary>
            No fields.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Title">
            <summary>
            The title of the document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Author">
            <summary>
            The author of the document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Operator">
            <summary>
            The person who last made changes to the document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Manager">
            <summary>
            The manager of the author.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Company">
            <summary>
            The company of the author.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Subject">
            <summary>
            The subject of the document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Comment">
            <summary>
            The document comments.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.CreationTime">
            <summary>
            The date and time when the document was created.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.RevisionTime">
            <summary>
            The date and time when the document was last modified.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Creator">
            <summary>
            The application that created the original document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Keywords">
            <summary>
            The keywords for the document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.Producer">
            <summary>
            The application that created the document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentInfoFields.All">
            <summary>
            All fields.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DocumentInfo">
            <summary>
            Represents general information about a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>,
            such as author, subject, creation date and time, and so on.
            Can be accessed via the <see cref="P:C1.C1PreviewClient.C1PrintDocument.DocumentInfo"/> property on a document.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DocumentInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerialize">
            <summary>
            Indicates whether the current <see cref="T:C1.C1PreviewClient.DocumentInfo"/> object should be serialized.
            </summary>
            <returns><b>true</b> if the current <see cref="T:C1.C1PreviewClient.DocumentInfo"/> object should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeTitle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Title"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Title"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeAuthor">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Author"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Author"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeOperator">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Operator"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Operator"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeSubject">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Subject"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Subject"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeCreator">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Creator"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Creator"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeProducer">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Producer"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Producer"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeCompany">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Company"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Company"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeCreationTime">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.CreationTime"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.CreationTime"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeRevisionTime">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.RevisionTime"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.RevisionTime"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeManager">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Manager"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Manager"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeComment">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Comment"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Comment"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.ShouldSerializeKeywords">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.DocumentInfo.Keywords"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.DocumentInfo.Keywords"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.AssignFrom(C1.C1PreviewClient.DocumentInfo)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.DocumentInfo"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.C1PreviewClient.DocumentInfo"/> object.
            </summary>
            <returns>The newly created <see cref="T:C1.C1PreviewClient.DocumentInfo"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.GetKeywordsAsText">
            <summary>
            Returns the <see cref="P:C1.C1PreviewClient.DocumentInfo.Keywords"/> collection of the current object
            as a single space-delimited string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentInfo.SetKeywordsAsText(System.String)">
            <summary>
            Assigns the <see cref="P:C1.C1PreviewClient.DocumentInfo.Keywords"/> collection on the current object
            from a single string containing the space-delimited list of keywords.
            (Note that the <see cref="P:C1.C1PreviewClient.DocumentInfo.Keywords"/> collection is cleared by this method prior to assignment.)
            </summary>
            <param name="value">The space-delimited list of keywords.</param>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Title">
            <summary>
            Gets or sets the title of a document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Author">
            <summary>
            Gets or sets the author of a document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Operator">
            <summary>
            Gets or sets the person who last made changes to a document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.CreationTime">
            <summary>
            Gets or sets the date and time when a document was created.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.RevisionTime">
            <summary>
            Gets or sets the date and time when a document was last modified.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Subject">
            <summary>
            Gets or sets the subject of a document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Producer">
            <summary>
            Gets or sets the application that created a document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Creator">
            <summary>
            Gets or sets the application that created the original document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Company">
            <summary>
            Gets or sets the company of a document's author.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Keywords">
            <summary>
            Gets or sets the keywords for a document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Manager">
            <summary>
            Gets or sets the manager of the author.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentInfo.UserData">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/> of custom user defined string keys and strings associated with a document.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Util.FastList">
            <summary>
            Represents an <see cref="T:System.Collections.IList"/> providing a fast search for the contained elements.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Util.FastList.FindObjectIndex(System.Object,System.Int32@)">
            <summary>
            Performs a fast search for the specified object within the current <see cref="T:C1.C1PreviewClient.Util.FastList"/>.
            </summary>
            <param name="obj">The object to search for.</param>
            <param name="index">OUT: the index of <paramref name="obj"/> within the current list, or 0 if the object was not found.</param>
            <returns><b>true</b> if <paramref name="obj"/> was found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Util.FastList.Add(System.IComparable)">
            <summary>
            Adds an object implementing the <see cref="T:System.IComparable"/> interface to the current list.
            </summary>
            <param name="obj">The object to add (if the current list already contains this object, an exception is thrown).</param>
            <returns>The index of the added object in the current list.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Util.FastList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the current list.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Util.FastList.Remove(System.Object)">
            <summary>
            Removes the specified element from the current list.
            </summary>
            <param name="obj">The element to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Util.FastList.Clear">
            <summary>
            Clears the current <see cref="T:C1.C1PreviewClient.Util.FastList"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Util.FastList.IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object in the current <see cref="T:C1.C1PreviewClient.Util.FastList"/>.
            (Performs a fast search using the <see cref="M:C1.C1PreviewClient.Util.FastList.FindObjectIndex(System.Object,System.Int32@)"/> method.)
            </summary>
            <param name="obj">The object to search for.</param>
            <returns>The index of the specified object within the current list, or -1 if none was found.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.Util.FastList.InnerList">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1"/> used internally to store the elements of the current <see cref="T:C1.C1PreviewClient.Util.FastList"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.EventCollection">
            <summary>
            Represents an <see cref="T:C1.C1PreviewClient.OwnedCollection"/> that fires events when changing.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.#ctor(C1.C1PreviewClient.ICollectionOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.EventCollection"/>.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.OnClear">
            <summary>
            Called when the collection is about to be cleared.
            Fires the <see cref="E:C1.C1PreviewClient.EventCollection.Changing"/> event.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.OnClearComplete">
            <summary>
            Called after the collection has been cleared.
            Fires the <see cref="E:C1.C1PreviewClient.EventCollection.Changed"/> event.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Called when an item is about to be iserted.
            Fires the <see cref="E:C1.C1PreviewClient.EventCollection.Changing"/> event.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Called after an item has been inserted.
            Fires the <see cref="E:C1.C1PreviewClient.EventCollection.Changed"/> event.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Called when an item is about to be removed.
            Fires the <see cref="E:C1.C1PreviewClient.EventCollection.Changing"/> event.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Called after an item has been removed.
            Fires the <see cref="E:C1.C1PreviewClient.EventCollection.Changed"/> event.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item is about to be set.
            Fires the <see cref="E:C1.C1PreviewClient.EventCollection.Changing"/> event.
            </summary>
            <param name="index">The item index.</param>
            <param name="oldValue">The old item.</param>
            <param name="newValue">The new item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Called after an item has been set.
            Fires the <see cref="E:C1.C1PreviewClient.EventCollection.Changed"/> event.
            </summary>
            <param name="index">The item index.</param>
            <param name="oldValue">The old item.</param>
            <param name="newValue">The new item.</param>
        </member>
        <member name="E:C1.C1PreviewClient.EventCollection.Changing">
            <summary>
            Occurs when a change is about to be made to the current collection.
            </summary>
        </member>
        <member name="E:C1.C1PreviewClient.EventCollection.Changed">
            <summary>
            Occurs after a change has been made to the current collection.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.EventCollectionChangeTypeEnum">
            <summary>
            Describes the type of a change to a collection.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.EventCollectionChangeTypeEnum.InsertItem">
            <summary>
            Item is inserted.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.EventCollectionChangeTypeEnum.SetItem">
            <summary>
            Item is set (changed).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.EventCollectionChangeTypeEnum.DeleteItem">
            <summary>
            Item is deleted.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.EventCollectionChangeTypeEnum.Reset">
            <summary>
            Collection is cleared.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.EventCollectionChangeEventHandler">
            <summary>
            Represents the method that will handler an event occuring when
            collection changing.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="e">The parameters of event.</param>
        </member>
        <member name="T:C1.C1PreviewClient.EventCollectionChangeEventArgs">
            <summary>
            Contains data about <see cref="T:C1.C1PreviewClient.EventCollection"/> change events.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollectionChangeEventArgs.#ctor(C1.C1PreviewClient.EventCollectionChangeTypeEnum,System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.EventCollectionChangeEventArgs"/> class.
            </summary>
            <param name="changeType">The collection change type.</param>
            <param name="oldItem">The old item, or null.</param>
            <param name="newItem">The new item, or null.</param>
            <param name="index">The item index, or -1.</param>
        </member>
        <member name="M:C1.C1PreviewClient.EventCollectionChangeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.EventCollectionChangeEventArgs"/> class.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.EventCollectionChangeEventArgs.ChangeType">
            <summary>
            Gets the type of collection's changing.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.EventCollectionChangeEventArgs.OldItem">
            <summary>
            Gets the old object at specified index.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.EventCollectionChangeEventArgs.NewItem">
            <summary>
            Gets the new object at specified index.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.EventCollectionChangeEventArgs.Index">
            <summary>
            Gets the index within collection where changing occurs.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PageNumberingChange">
            <summary>
            Represents an absolute or relative page numbering change in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageNumberingChange.#ctor(C1.C1PreviewClient.PageNumberingChangeModeEnum,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> class.
            </summary>
            <param name="mode">The page numbering mode.</param>
            <param name="value">The page numbering value (semantics depend on <paramref name="mode"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageNumberingChange.GetPageNo(System.Int32)">
            <summary>
            Gets the page number changed by the current <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> object.
            </summary>
            <param name="curPageNo">The current page number.</param>
            <returns>The page number after the change.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageNumberingChange.ToString">
            <summary>
            Converts the current object to a string.
            </summary>
            <returns>The string representing the current object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageNumberingChange.Parse(System.String,System.Boolean)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="throwException">Indicates whether an exception should be thrown if the specified string cannot be converted.</param>
            <returns>The created <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> object,
            or <b>null</b> if the string could not be converted and <paramref name="throwException"/> is <b>false</b>.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.PageNumberingChange.Mode">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.PageNumberingChangeModeEnum"/> value determining the page numbering change
            represented by the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageNumberingChange.Value">
            <summary>
            Gets or sets the absolute page number or increment.
            The semantics of this property depend on the value of the <see cref="P:C1.C1PreviewClient.PageNumberingChange.Mode"/> property.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PageNumberingChange.TypeConverter">
            <summary>
            Represents a type converter for <see cref="T:C1.C1PreviewClient.PageNumberingChange"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TypeConverterBase">
            <summary>
            The abstract base class for type converters that can convert to/from strings.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TypeConverterBase.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to an object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TypeConverterBase.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TypeConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            For internal use only.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            For internal use only.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TypeConverterBase.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TypeConverterBase.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            For internal use only.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageNumberingChange.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageNumberingChange.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.StackingRulesEnum">
            <summary>
            Defines the stacking rules: block or inline flow,
            top to bottom or left to right for block flow.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StackingRulesEnum.BlockTopToBottom">
            <summary>
            Objects are placed one beneath another within the container.
            When the bottom edge of the current page is reached, a new page is added.
            This is the default.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StackingRulesEnum.BlockLeftToRight">
            <summary>
            Objects are placed one next to another, from left to right.
            When the right edge of the current page is reached, a new horizontal page is added
            (a horizontal page logically extends the preceding page to the right;
            C1PreviewPane respects this location by default, showing such pages in a row).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StackingRulesEnum.InlineLeftToRight">
            <summary>
            Objects are placed inline, one next to another, from left to right.
            When the right edge of the current page is reached, the sequence wraps to the next line.
            A new page is added when the bottom of the current page is reached.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.MeasurementDeviceEnum">
            <summary>
            Defines the device (printer or screen) used to measure the elements of a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.MeasurementDeviceEnum.Printer">
            <summary>
            Use printer device to measure document elements.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.MeasurementDeviceEnum.Screen">
            <summary>
            Use system screen device to measure document elements.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DocumentCreationMode">
            <summary>
            Defines the generation mode of a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentCreationMode.Unknown">
            <summary>
            The document was not generated, its creation mode is unknown at this time.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentCreationMode.Generate">
            <summary>
            The document was created by a call to the <see cref="M:C1.C1PreviewClient.C1PrintDocument.Generate"/> method.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DocumentCreationMode.StartEndDoc">
            <summary>
            The document was created by calls to the <see cref="!:C1PrintDocument.StartDoc()"/> and
            <see cref="!:C1PrintDocument.EndDoc()"/> methods.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PageNumberingChangeModeEnum">
            <summary>
            Describes the type of a page numbering change in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageNumberingChangeModeEnum.Set">
            <summary>
            Set page number to absolute value.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageNumberingChangeModeEnum.Increment">
            <summary>
            Change the page number on specified value.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.BusyStateEnum">
            <summary>
            Describes the busy state of a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BusyStateEnum.Ready">
            <summary>
            The document is not busy.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BusyStateEnum.Generating">
            <summary>
            The document is currently generating.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BusyStateEnum.Saving">
            <summary>
            The document is currently saving.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BusyStateEnum.Loading">
            <summary>
            The document is currently loading.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.GraphicsUtils">
            <summary>
            <para>For internal use only.</para>
            Provides graphics-related static helper methods and properties.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.ReadMetafileFromMemory(System.Byte[])">
            <summary>
            Reads a <see cref="T:System.Drawing.Imaging.Metafile"/> from a byte array.
            </summary>
            <param name="imageData">The byte array containing the <see cref="T:System.Drawing.Imaging.Metafile"/> data.</param>
            <returns>The newly created <see cref="T:System.Drawing.Imaging.Metafile"/>.</returns>
            <seealso cref="M:C1.C1PreviewClient.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)"/>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)">
            <summary>
            Writes a <see cref="T:System.Drawing.Imaging.Metafile"/> to a byte array.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> to write.</param>
            <returns>The byte array containing the <paramref name="metafile"/> data.</returns>
            <seealso cref="M:C1.C1PreviewClient.GraphicsUtils.ReadMetafileFromMemory(System.Byte[])"/>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)">
            <summary>
            Serializes a <see cref="T:System.Drawing.Imaging.Metafile"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> to serialize.</param>
            <param name="stream">The target <see cref="T:System.IO.Stream"/>.</param>
            <seealso cref="M:C1.C1PreviewClient.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)"/>
            <seealso cref="M:C1.C1PreviewClient.GraphicsUtils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)"/>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)">
            <summary>
            Serializes a <see cref="T:System.Drawing.Imaging.Metafile"/> to a disk file.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> to serialize.</param>
            <param name="fileName">The target file name.</param>
            <seealso cref="M:C1.C1PreviewClient.GraphicsUtils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)"/>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves an <see cref="T:System.Drawing.Image"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to save.</param>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> to use for saving the image
            (ignored if the image is a <see cref="T:System.Drawing.Imaging.Metafile"/>).</param>
            <returns>The <see cref="T:System.IO.MemoryStream"/> object containing image data, or <b>null</b> if an error occurred while saving.</returns>
            <remarks>
            Unlike the standard <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method,
            this method saves <see cref="T:System.Drawing.Imaging.Metafile"/> objects as metafiles, without any conversions
            (the standard method converts metafiles to PNG format prior to saving).
            </remarks>
            <seealso cref="M:C1.C1PreviewClient.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)"/>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)">
            <summary>
            Saves an <see cref="T:System.Drawing.Image"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to save.</param>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> to use for saving the image
            (ignored if <paramref name="image"/> is a <see cref="T:System.Drawing.Imaging.Metafile"/>, and <paramref name="keepAsMetafile"/> is <b>true</b>).</param>
            <param name="keepAsMetafile">If <b>true</b>, metafiles are saved without conversion, ignoring <paramref name="imageFormat"/>.
            Otherwise, the image is saved in the specified format.</param>
            <returns>The <see cref="T:System.IO.MemoryStream"/> object containing image data, or <b>null</b> if an error occurred while saving.</returns>
            <remarks>
            Unlike the standard <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method,
            this method is able to save <see cref="T:System.Drawing.Imaging.Metafile"/> objects as metafiles, without any conversions
            (the standard method converts metafiles to PNG format prior to saving even if such conversion is not requested).
            </remarks>
            <seealso cref="M:C1.C1PreviewClient.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)"/>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.FindImageCodecInfo(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> for the specified image format,
            or <c>null</c>.
            </summary>
            <param name="imageFormat">The image format (e.g. as returned by <see cref="P:System.Drawing.Image.RawFormat"/>).</param>
            <returns>The corresponding <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.IsColorEmpty(System.Drawing.Color)">
            <summary>
            Tests whether the specified color is invisible
            (i.e. equals <see cref="F:System.Drawing.Color.Empty"/> or <see cref="P:System.Drawing.Color.Transparent"/>).
            </summary>
            <param name="color">The color to test.</param>
            <returns><b>true</b> if the specified color is invisible, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.GetScreenDpi(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns the logical and physical screen resolution.
            </summary>
            <param name="logicalDpiX">OUT: the logical horizontal resolution.</param>
            <param name="logicalDpiY">OUT: the logical vertical resolution.</param>
            <param name="physicalDpiX">OUT: the physical horizontal resolution.</param>
            <param name="physicalDpiY">OUT: the physical vertical resolution.</param>
        </member>
        <member name="M:C1.C1PreviewClient.GraphicsUtils.RecalcScreenDpi">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GraphicsUtils.RealDpiX">
            <summary>
            Gets the physical horizontal resolution of the screen.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GraphicsUtils.RealDpiY">
            <summary>
            Gets the physical vertical resolution of the screen.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GraphicsUtils.ScreenDpiX">
            <summary>
            Gets the logical horizontal resolution of the screen.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GraphicsUtils.ScreenDpiY">
            <summary>
            Gets the logical vertical resolution of the screen.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IC1Printable">
            <summary>
            If an object implements this interface, it can be seamlessly rendered
            in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> via a <see cref="!:RenderC1Printable"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.IC1Printable.C1PrintableGetImage">
            <summary>
            Gets the content of control as Image.
            </summary>
            <returns>The Image object representing a control content.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.IC1Printable.C1PrintableGetTree">
            <summary>
            Gets the content of control as C1 document
            that is serialized in stream.
            This document can be built with using C1PrintDocumentClient.
            </summary>
            <returns>The stream object containing the document tree.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.PageDirectionEnum">
            <summary>
            Describes the direction in which the new page should be started.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageDirectionEnum.Default">
            <summary>
            Type of page (vertical or horizontal)
            is determinated on the basis of the current stacking rules.
            Vertical page is added if Stacking is StackingRulesEnum.BlockTopToBottom.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageDirectionEnum.Vertical">
            <summary>
            Vertical page direction - i.e. logically the next page is below the current one.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageDirectionEnum.Horizontal">
            <summary>
            Horizontal page direction - i.e. logically the next page is to the right of the current one.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LayoutChangeBase">
            <summary>
            The base type for classes describing layout-releated
            changes that are applied to a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> before or after a <see cref="T:C1.C1PreviewClient.RenderObject"/>
            if assigned to <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeBefore"/> or <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeAfter"/>
            on that object.
            <para>
            Derived classes include
            <see cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/>,
            <see cref="T:C1.C1PreviewClient.LayoutChangeNewColumn"/>,
            <see cref="T:C1.C1PreviewClient.LayoutChangeNewLine"/> and
            <see cref="T:C1.C1PreviewClient.LayoutChangeNoBreak"/>.
            </para>
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LayoutChangeBase.AssignFrom(C1.C1PreviewClient.LayoutChangeBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LayoutChangeBase.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> object.
            </summary>
            <returns>The newly created <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> object.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.LayoutChangeNewPage">
            <summary>
            Describes layout-related changes associated with a <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            When an instance of this class is assigned to <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeBefore"/>
            or <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeAfter"/> on that object,
            a page break is inserted before of after that object,
            and layout changes described by the instance are applied to the new page.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeBase"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewColumn"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewLine"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNoBreak"/>
        </member>
        <member name="M:C1.C1PreviewClient.LayoutChangeNewPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LayoutChangeNewPage.#ctor(C1.C1PreviewClient.PageLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/> class.
            </summary>
            <param name="pageLayout">The <see cref="!:C1.C1Preview.PageLayout"/> to assign to the <see cref="P:C1.C1PreviewClient.LayoutChangeNewPage.PageLayout"/> property of the current instance.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LayoutChangeNewPage.AssignFrom(C1.C1PreviewClient.LayoutChangeBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.LayoutChangeNewPage.PageLayout">
            <summary>
            Gets or set the <see cref="!:C1.C1Preview.PageLayout"/> to apply to the new page.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LayoutChangeNewPage.Direction">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.PageDirectionEnum"/> of the new page.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LayoutChangeNewPage.Nested">
            <summary>
            Gets or sets a value indicating whether the currently active page layout
            should be saved in a stack before applying this <see cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/>,
            to be restored after the associated <see cref="T:C1.C1PreviewClient.RenderObject"/> has been fully rendered.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LayoutChangeNewColumn">
            <summary>
            Describes layout-related changes associated with a <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            When an instance of this class is assigned to <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeBefore"/>
            or <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeAfter"/> on that object,
            a column break is inserted before of after that object,
            and layout changes described by the instance are applied.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeBase"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewLine"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNoBreak"/>
        </member>
        <member name="T:C1.C1PreviewClient.LayoutChangeNewLine">
            <summary>
            Describes layout-related changes associated with a <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            When an instance of this class is assigned to <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeBefore"/>
            or <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeAfter"/> on that object,
            and the current <see cref="P:C1.C1PreviewClient.RenderObject.Stacking"/> is <see cref="F:C1.C1PreviewClient.StackingRulesEnum.InlineLeftToRight"/>,
            a line break is inserted before of after that object,
            and layout changes described by the instance are applied.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeBase"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewColumn"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNoBreak"/>
        </member>
        <member name="T:C1.C1PreviewClient.LayoutChangeNoBreak">
            <summary>
            Describes layout-related changes associated with a <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            When an instance of this class is assigned to <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeBefore"/>
            or <see cref="P:C1.C1PreviewClient.RenderObject.LayoutChangeAfter"/> on that object,
            layout changes described by the instance are applied
            to the next new page (but no immediate page break is caused by this class).
            </summary>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeBase"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewColumn"/>
            <seealso cref="T:C1.C1PreviewClient.LayoutChangeNewLine"/>
        </member>
        <member name="M:C1.C1PreviewClient.LayoutChangeNoBreak.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LayoutChangeNoBreak"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LayoutChangeNoBreak.#ctor(C1.C1PreviewClient.PageLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LayoutChangeNoBreak"/> class.
            </summary>
            <param name="pageLayout">The <see cref="!:C1.C1Preview.PageLayout"/> to assign to the <see cref="P:C1.C1PreviewClient.LayoutChangeNoBreak.PageLayout"/> property of the current instance.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LayoutChangeNoBreak.AssignFrom(C1.C1PreviewClient.LayoutChangeBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> to the current object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:C1.C1PreviewClient.LayoutChangeNoBreak.PageLayout">
            <summary>
            Gets or set the <see cref="!:C1.C1Preview.PageLayout"/> to apply to the next page.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LongOperationEventArgs">
            <summary>
            Describes arguments for the event fired periodically by a potentially
            long operation. Allows to provide feedback to the user and may also
            allow to cancel the operation.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LongOperationEventArgs.#ctor">
            <summary>
            Creates a new instance of LongOperationEventArgs with default
            properties (Complete=0, CanCancel=false).
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LongOperationEventArgs.#ctor(System.Double)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete value and CanCancel=false.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
        </member>
        <member name="M:C1.C1PreviewClient.LongOperationEventArgs.#ctor(System.Double,System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete and CanCancel values.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LongOperationEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified CanCancel value and Complete=0.
            </summary>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="P:C1.C1PreviewClient.LongOperationEventArgs.Complete">
            <summary>
            Gets the approximate completed ratio, from 0 (0% complete) to 1 (100% complete).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LongOperationEventArgs.CanCancel">
            <summary>
            Gets the value indicating whether the event handler can cancel the current long operation
            by setting the <see cref="P:C1.C1PreviewClient.LongOperationEventArgs.Cancel"/> property to <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LongOperationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the current long operation
            should be cancelled. (This property is ignored if <see cref="P:C1.C1PreviewClient.LongOperationEventArgs.CanCancel"/> is <b>false</b>.)
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LongOperationEventHandler">
            <summary>
            Represents a method that can handle a long operation event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.C1PreviewClient.LongOperationEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.C1PreviewClient.NamedCollection">
            <summary>
            Represents an <see cref="T:C1.C1PreviewClient.OwnedCollection"/> of uniquely-named elements.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollection.#ctor(C1.C1PreviewClient.ICollectionOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.NamedCollection"/> class.
            </summary>
            <param name="owner">The collection owner.</param>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollection.GetItemType">
            <summary>
            Gets the type of collection elements.
            </summary>
            <returns>The <see cref="T:C1.C1PreviewClient.NamedCollectionItem"/> type.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollection.OnClearComplete">
            <summary>
            Called after the collection has been cleared.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Called after an item has been removed.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Called after an item has been set.
            </summary>
            <param name="index">The item index.</param>
            <param name="oldValue">The old item.</param>
            <param name="newValue">The new item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item is about to be set.
            </summary>
            <param name="index">The item index.</param>
            <param name="oldValue">The old item.</param>
            <param name="newValue">The new item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Called when an item is about to be iserted.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollection.IndexOfName(System.String)">
            <summary>
            Returns the 0-based index of a <see cref="T:C1.C1PreviewClient.NamedCollectionItem"/>
            with specified name in the current <see cref="T:C1.C1PreviewClient.NamedCollection"/>.
            </summary>
            <param name="name">The name of the item to locate. </param>
            <returns>The 0-based index of the specified item, or -1 if the item was not found.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.NamedCollectionItem">
            <summary>
            Represents an element of a <see cref="T:C1.C1PreviewClient.NamedCollection"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollectionItem.SetNameInt(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollectionItem.SetName(System.String)">
            <summary>
            Sets the name of the current item.
            </summary>
            <param name="newName">The new name of the item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollectionItem.AssignFrom(C1.C1PreviewClient.NamedCollectionItem)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.NamedCollectionItem"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.NamedCollectionItem.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.C1PreviewClient.NamedCollectionItem"/> object.
            Note that the <see cref="P:C1.C1PreviewClient.NamedCollectionItem.Owner"/> property is not copied to the new object.
            </summary>
            <returns>The newly created <see cref="T:C1.C1PreviewClient.NamedCollectionItem"/> object.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.NamedCollectionItem.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.NamedCollection"/> containing the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.NamedCollectionItem.Name">
            <summary>
            Gets or sets the unique name of the current object.
            If an item with the specified name already exists in the collection,
            an exception is thrown.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.OutlineNode">
            <summary>
            Represents an outline node within a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.OutlineNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.OutlineNode"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.OutlineNode.#ctor(System.String,C1.C1PreviewClient.IDocumentLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.OutlineNode"/> class.
            </summary>
            <param name="caption">The node caption.</param>
            <param name="location">The location within a document associated with the current node.</param>
        </member>
        <member name="M:C1.C1PreviewClient.OutlineNode.#ctor(System.String,C1.C1PreviewClient.IDocumentLocation,System.Drawing.Icon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.OutlineNode"/> class.
            </summary>
            <param name="caption">The node caption.</param>
            <param name="location">The location within a document associated with the current node.</param>
            <param name="icon">The icon associated with the current node.</param>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.OutlineNodeCollection"/> containing the current node.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.Parent">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.OutlineNode"/> which is the parent of the current node.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.Level">
            <summary>
            Gets the nesting level of the current node within the nodes' tree
            (top-level nodes have level 0).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.Location">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.IDocumentLocation"/> associated with the current node.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.Caption">
            <summary>
            Gets or sets the UI string used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.Icon">
            <summary>
            Gets or sets the icon used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.IconName">
            <summary>
            Gets or sets the name in the <see cref="P:C1.C1PreviewClient.C1PrintDocument.Dictionary"/> of the icon used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.Children">
            <summary>
            Gets the collection of child nodes of the current node.
            Note that accessing this property initializes the collection if it has not been initialized yet.
            To test whether there are child nodes without this side effect, use the <see cref="P:C1.C1PreviewClient.OutlineNode.HasChildren"/> property.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.HasChildren">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.C1PreviewClient.OutlineNode.Children"/> collection of the current node
            has been initialized and contains at least one element.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.TopParent">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.OutlineNode"/> that is the root of the current node tree.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNode.Document">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> containing the current node tree.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.OutlineNodeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1PreviewClient.OutlineNode"/> elements.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.OutlineNodeCollection.GetItemType">
            <summary>
            Gets the type of elements in this collection.
            </summary>
            <returns>The <see cref="T:C1.C1PreviewClient.OutlineNode"/> type.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.OutlineNodeCollection.Add(C1.C1PreviewClient.OutlineNode)">
            <summary>
            Adds a node to the current collection.
            </summary>
            <param name="node">The node to add.</param>
            <returns>The index of the newly added node in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.OutlineNodeCollection.Add(System.String,C1.C1PreviewClient.IDocumentLocation)">
            <summary>
            Adds a node with the specified caption and location to the current collection.
            </summary>
            <param name="caption">The caption of the node to add.</param>
            <param name="location">The location associated with the node.</param>
            <returns>The index of the newly added node in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.OutlineNodeCollection.Add(System.String,C1.C1PreviewClient.IDocumentLocation,System.Drawing.Icon)">
            <summary>
            Adds a node with the specified caption, location and icon to the current collection.
            </summary>
            <param name="caption">The caption of the node to add.</param>
            <param name="location">The location associated with the node.</param>
            <param name="icon">The icon associated with the node.</param>
            <returns>The index of the newly added node in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.OutlineNodeCollection.Remove(C1.C1PreviewClient.OutlineNode)">
            <summary>
            Removes a node from the current collection.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="P:C1.C1PreviewClient.OutlineNodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index">The index in the current collection.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.PageColumnDef">
            <summary>
            Represents the properties of a page column.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.PageColumnDef"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.PageColumnDef"/> class.
            </summary>
            <param name="width">A string that is converted to a <see cref="T:C1.C1PreviewClient.Unit"/> value representing the <see cref="P:C1.C1PreviewClient.PageColumnDef.Width"/> of the current column.</param>
            <param name="spacing">A string that is converted to a <see cref="T:C1.C1PreviewClient.Unit"/> value representing the <see cref="P:C1.C1PreviewClient.PageColumnDef.Spacing"/> of the current column.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.PageColumnDef"/> class.
            </summary>
            <param name="width">A <see cref="T:C1.C1PreviewClient.Unit"/> value representing the <see cref="P:C1.C1PreviewClient.PageColumnDef.Width"/> of the current column.</param>
            <param name="spacing">A a <see cref="T:C1.C1PreviewClient.Unit"/> value representing the <see cref="P:C1.C1PreviewClient.PageColumnDef.Spacing"/> of the current column.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.ShouldSerializeWidth">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.PageColumnDef.Width"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.PageColumnDef.Width"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.ShouldSerializeSpacing">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.PageColumnDef.Spacing"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.PageColumnDef.Spacing"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.C1PreviewClient.PageColumnDef"/> object.
            </summary>
            <returns>The newly created <see cref="T:C1.C1PreviewClient.PageColumnDef"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.AssignFrom(C1.C1PreviewClient.PageColumnDef)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.PageColumnDef"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.Compare(C1.C1PreviewClient.PageColumnDef)">
            <summary>
            Compares the properties on the current object to another <see cref="T:C1.C1PreviewClient.PageColumnDef"/>.
            </summary>
            <param name="other">The <see cref="T:C1.C1PreviewClient.PageColumnDef"/> to compare the current object with.</param>
            <returns><b>true</b> if the properties of the two objects are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.PageColumnDef.Width">
            <summary>
            Gets or sets the width of the current column.
            <para>The default column width is <b>"auto"</b>.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageColumnDef.Spacing">
            <summary>
            Gets or sets the spacing between the current and next columns.
            <para>The default column spacing is <b>5mm</b>.</para>
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PageColumnDef.TypeConverter2">
            <summary>
            Represents a type converter for <see cref="T:C1.C1PreviewClient.PageColumnDef"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.TypeConverter2.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether the current converter can convert this object to the specified type.
            </summary>
            <param name="context">The converter context.</param>
            <param name="type">The target type.</param>
            <returns><b>true</b> if the object can be converted, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDef.TypeConverter2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the specified type.
            </summary>
            <param name="context">The converter context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value to convert.</param>
            <param name="type">The target type.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.PageColumnDefCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1PreviewClient.PageColumnDef"/> objects.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDefCollection.Add(C1.C1PreviewClient.PageColumnDef)">
            <summary>
            Adds a <see cref="T:C1.C1PreviewClient.PageColumnDef"/> to the current collection.
            </summary>
            <param name="pageColumnDef">The <see cref="T:C1.C1PreviewClient.PageColumnDef"/> to add.</param>
            <returns>The index of the added <see cref="T:C1.C1PreviewClient.PageColumnDef"/> in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDefCollection.Add(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Adds a new <see cref="T:C1.C1PreviewClient.PageColumnDef"/> initialized with the specified width and spacing to the current collection.
            </summary>
            <param name="columnWidth">The <see cref="P:C1.C1PreviewClient.PageColumnDef.Width"/> of the new column definition.</param>
            <param name="columnSpacing">The <see cref="P:C1.C1PreviewClient.PageColumnDef.Spacing"/> of the new column definition.</param>
            <returns>The index of the added <see cref="T:C1.C1PreviewClient.PageColumnDef"/> in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDefCollection.Add">
            <summary>
            Adds a new <see cref="T:C1.C1PreviewClient.PageColumnDef"/> initialized with the
            default <see cref="P:C1.C1PreviewClient.PageColumnDef.Width"/> and <see cref="P:C1.C1PreviewClient.PageColumnDef.Spacing"/> to the current collection.
            </summary>
            <returns>The index of the added <see cref="T:C1.C1PreviewClient.PageColumnDef"/> in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDefCollection.Insert(System.Int32,C1.C1PreviewClient.PageColumnDef)">
            <summary>
            Inserts a <see cref="T:C1.C1PreviewClient.PageColumnDef"/> into the current collection.
            </summary>
            <param name="index">The index at which to insert the specified <see cref="T:C1.C1PreviewClient.PageColumnDef"/>.</param>
            <param name="pageColumnDef">The column definition to insert.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDefCollection.Remove(C1.C1PreviewClient.PageColumnDef)">
            <summary>
            Removes a <see cref="T:C1.C1PreviewClient.PageColumnDef"/> from the current collection.
            </summary>
            <param name="pageColumnDef">The column definition to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDefCollection.IndexOf(C1.C1PreviewClient.PageColumnDef)">
            <summary>
            Returns the index of the specified <see cref="T:C1.C1PreviewClient.PageColumnDef"/> in the current collection.
            </summary>
            <param name="pageColumnDef">The <see cref="T:C1.C1PreviewClient.PageColumnDef"/> to search for.</param>
            <returns>The index of the specified column definition in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageColumnDefCollection.Compare(C1.C1PreviewClient.PageColumnDefCollection)">
            <summary>
            Compares the current collection to another.
            Uses the <see cref="M:C1.C1PreviewClient.PageColumnDef.Compare(C1.C1PreviewClient.PageColumnDef)"/> to compare elements
            elements at the corresponding positions by their properties' values.
            </summary>
            <param name="other">The <see cref="T:C1.C1PreviewClient.PageColumnDefCollection"/> to compare the current with.</param>
            <returns><b>true</b> if the two collections have the same elements at the same positions, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.PageColumnDefCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index">The index in the current collection.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.PageLayoutKindEnum">
            <summary>
            Identifies the set of pages to which a page layout is applied in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageLayoutKindEnum.None">
            <summary>
            The current page layout is not a member of any document's PageLayouts collection.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageLayoutKindEnum.Default">
            <summary>
            The current page layout is the default for a document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageLayoutKindEnum.FirstPage">
            <summary>
            The current page layout is to be used for the first page of a document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageLayoutKindEnum.LastPage">
            <summary>
            The current page layout is to be used for the last page of a document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageLayoutKindEnum.EvenPages">
            <summary>
            The current page layout is to be used for even pages of a document.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageLayoutKindEnum.OddPages">
            <summary>
            The current page layout is to be used for odd pages of a document.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PageLayout">
            <summary>
            Represents the page layout of a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.PageLayout"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.#ctor(C1.C1PreviewClient.C1PageSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.PageLayout"/> class.
            </summary>
            <param name="pageSettings">The page settings to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.#ctor(C1.C1PreviewClient.C1PageSettings,C1.C1PreviewClient.PageColumnDef[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.PageLayout"/> class.
            </summary>
            <param name="pageSettings">The page settings to use for the current page layout.</param>
            <param name="columns">The column defitions to use for the current page layout.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.ShouldSerializeColumns">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.PageLayout.Columns"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.PageLayout.Columns"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.AssignFrom(C1.C1PreviewClient.PageLayout,System.Boolean,System.Boolean)">
            <summary>
            Copies properties from another PageLayout object.
            This method used internally within C1PrintDocument
            during report generation.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.MixWith(C1.C1PreviewClient.PageLayout)">
            <summary>
            Mix this PageLayout object with specified PageLayout object.
            </summary>
            <param name="pageLayout">The PageLayout object that should be mixed with this object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.IsEmpty">
            <summary>
            Returns true if PageLayout has no redefined fields.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.Compare(C1.C1PreviewClient.PageLayout)">
            <summary>
            Compares this PageLayout with other PageLayout object.
            </summary>
            <param name="other">PageLayout object to compare to.</param>
            <returns>Returns true if this PageLayout object equals other PageLayout object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.GetOwnedObjectCount">
            <summary>
            Calculates the count of render objects used in this PageLayout object.
            </summary>
            <returns>Returns the count of render objects used in this PageLayout object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.C1PreviewClient.PageLayout"/> object.
            All nested objects (render objects, page settings etc.) are cloned on the new object.
            </summary>
            <returns>The newly created <see cref="T:C1.C1PreviewClient.PageLayout"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.AssignFrom(C1.C1PreviewClient.PageLayout)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.PageLayout"/> to the current object.
            All nested objects (render objects, page settings etc.) are cloned.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PageLayout.Clear">
            <summary>
            Clears the current <see cref="T:C1.C1PreviewClient.PageLayout"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.Document">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> containing the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.Kind">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.PageLayoutKindEnum"/> associated with the current <see cref="T:C1.C1PreviewClient.PageLayout"/>
            in the document.
            If <see cref="P:C1.C1PreviewClient.PageLayout.Document"/> is <b>null</b>, <see cref="F:C1.C1PreviewClient.PageLayoutKindEnum.None"/> is returned.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.PageSettings">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.C1PageSettings"/> object associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.PageHeader">
            <summary>
            Gets or sets the page header associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.PageFooter">
            <summary>
            Gets or sets the page footer associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.Watermark">
            <summary>
            Gets or sets the watermark associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.Overlay">
            <summary>
            Gets or sets the overlay associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.HasColumns">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:C1.C1PreviewClient.PageLayout.Columns"/> collection
            on the current page layout has been initialized and is not empty.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PageLayout.Columns">
            <summary>
            Gets the collection of <see cref="T:C1.C1PreviewClient.PageColumnDef"/> objects for the current page layout.
            Note that accessing this property initializes the collection of column definitions
            if it has not been initialized yet.
            Use <see cref="P:C1.C1PreviewClient.PageLayout.HasColumns"/> to test whether any columns have been defined on this layout.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DocumentPageLayouts">
            <summary>
            Represents the standard page layouts used in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>
            (such as the default page layout, page layout used for first and last pages,
            and so on).
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentPageLayouts.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.DocumentPageLayouts"/> class.
            </summary>
            <param name="owner">The <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> that is the owner of the current instance.</param>
        </member>
        <member name="M:C1.C1PreviewClient.DocumentPageLayouts.Clear">
            <summary>
            Clears the current <see cref="T:C1.C1PreviewClient.DocumentPageLayouts"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object that owns the current <see cref="T:C1.C1PreviewClient.DocumentPageLayouts"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.Item(C1.C1PreviewClient.PageLayoutKindEnum)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.PageLayout"/> of the specified <see cref="T:C1.C1PreviewClient.PageLayoutKindEnum"/>.
            Returns <b>null</b> if the specified kind of page layout has not been specified
            for the current <see cref="T:C1.C1PreviewClient.DocumentPageLayouts"/>.
            </summary>
            <param name="kind">The kind of page layout to return.</param>
            <returns>The page layout with specified kind, or <b>null</b> if it does not exist.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.FirstPage">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.PageLayout"/> to use for the first page of the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.LastPage">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.PageLayout"/> to use for the last page of the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.EvenPages">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.PageLayout"/> to use for even pages of the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.OddPages">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.PageLayout"/> to use for odd pages of the current document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.Default">
            <summary>
            Gets or sets the default <see cref="T:C1.C1PreviewClient.PageLayout"/> for the current document.
            The effective page layout for each page is determined by merging this layout
            with all other applicable layouts.
            The effective layout can be accessed via the <see cref="!:C1PrintDocument.CurrentPageLayout"/> property
            on the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.PrintHeaderOnFirstPage">
            <summary>
            Gets or sets a value indicating whether the page header should
            print on the first page of the document.
            This property overrides other related properties when set to <b>false</b>.
            The default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.PrintFooterOnFirstPage">
            <summary>
            Gets or sets a value indicating whether the page footer should
            print on the first page of the document.
            This property overrides other related properties when set to <b>false</b>.
            The default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.PrintHeaderOnLastPage">
            <summary>
            Gets or sets a value indicating whether the page header should
            print on the last page of the document.
            This property overrides other related properties when set to <b>false</b>.
            The default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.PrintFooterOnLastPage">
            <summary>
            Gets or sets a value indicating whether the page footer should
            print on the last page of the document.
            This property overrides other related properties when set to <b>false</b>.
            The default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.DocumentPageLayouts.SuppressEmptyLastPage">
            <summary>
            Gets or sets a value indicating whether to suppress adding an empty page
            at the end of a document if the last object in the document contains
            a page break after itself.
            The default value is <b>false</b>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PrinterUtil">
            <summary>
            <para>For internal use only.</para>
            A static class providing printer-related utilities.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PrinterUtil.CreatePrinterIC(System.String)">
            <summary>
            Creates the information context for specified printer.
            That context can be used for measurement operations, but must <b>NOT</b> be used for drawing.
            </summary>
            <param name="printerName">The printer name.</param>
            <returns>The context handle, or <b>IntPtr.Zero</b> if an error occurs.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PrinterUtil.GetPrinterDpi(System.String)">
            <summary>
            Gets the resolution of the specified printer.
            </summary>
            <param name="printerName">The printer name.</param>
            <returns>A <see cref="T:System.Drawing.PointF"/> structure where
            <see cref="P:System.Drawing.PointF.X"/> represents the horizontal, and <see cref="P:System.Drawing.PointF.Y"/> vertical DPI.
            <see cref="F:System.Drawing.PointF.Empty"/> is returned if an error occurs.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PrinterUtil.GetDcDpi(System.IntPtr)">
            <summary>
            Gets the resolution for the specified device context.
            </summary>
            <param name="dc">The device context to test.</param>
            <returns>A <see cref="T:System.Drawing.PointF"/> structure where
            <see cref="P:System.Drawing.PointF.X"/> represents the horizontal, and <see cref="P:System.Drawing.PointF.Y"/> vertical DPI.
            <see cref="F:System.Drawing.PointF.Empty"/> is returned if an error occurs.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PrinterUtil.IsPrinterValid(System.String)">
            <summary>
            Tests whether the specified printer name is valid.
            </summary>
            <param name="printerName">The printer name.</param>
            <returns><b>true</b> if the specified printer name is valid, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PrinterUtil.FindBestPrinter(System.Single,System.Single@)">
            <summary>
            Searches for a printer with the specified minimal resolution,
            and the same horizontal and vertical resolutions.
            </summary>
            <param name="minDpi">The minimum acceptable DPI.
            If this parameter is <b>0</b>, the first available printer with the same horizontal and vertical resolutions is returned.</param>
            <param name="bestPrinterDpi">OUT: The resolution of the found printer, or <b>0</b> if a printer was not found.</param>
            <returns>The name of the found printer, or <b>null</b> if a printer was not found.</returns>
            <seealso cref="M:C1.C1PreviewClient.PrinterUtil.FindBestPrinter(System.Single)"/>
        </member>
        <member name="M:C1.C1PreviewClient.PrinterUtil.FindBestPrinter(System.Single)">
            <summary>
            Searches for a printer with the specified minimal resolution,
            and the same horizontal and vertical resolutions.
            </summary>
            <param name="minDpi">The minimum acceptable DPI.
            If this parameter is <b>0</b>, the first available printer with the same horizontal and vertical resolutions is returned.</param>
            <returns>The name of the found printer, or <b>null</b> if a printer was not found.</returns>
            <seealso cref="M:C1.C1PreviewClient.PrinterUtil.FindBestPrinter(System.Single,System.Single@)"/>
        </member>
        <member name="T:C1.C1PreviewClient.PropsHashtable`1">
            <summary>
            <para>For internal use only.</para>
            Represents a hashtable of properties and their values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PropsHashtable`1.Clear">
            <summary>
            Clears the current instance.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PropsHashtable`1.GetPropIndex(System.Int32)">
            <summary>
            Gets the index of a property in the <see cref="P:C1.C1PreviewClient.PropsHashtable`1.Keys"/> and <see cref="P:C1.C1PreviewClient.PropsHashtable`1.Values"/> arrays.
            </summary>
            <param name="propKey">The property key.</param>
            <returns>The 0-based index of the specified property in the <see cref="P:C1.C1PreviewClient.PropsHashtable`1.Keys"/> and <see cref="P:C1.C1PreviewClient.PropsHashtable`1.Values"/> arrays.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.PropsHashtable`1.SetPropValue(System.Int32,`0)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="propKey">The property key.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PropsHashtable`1.DeletePropValue(System.Int32)">
            <summary>
            Deletes a property value from the current <see cref="T:C1.C1PreviewClient.PropsHashtable`1"/>.
            </summary>
            <param name="propKey">The property key to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.PropsHashtable`1.IsEmpty">
            <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1PreviewClient.PropsHashtable`1"/> is empty.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PropsHashtable`1.IsPropExists(System.Int32)">
            <summary>
            Tests whether a property is set in the current <see cref="T:C1.C1PreviewClient.PropsHashtable`1"/>.
            </summary>
            <param name="propKey">The property key.</param>
            <returns><b>true</b> if the specified property has been set on the current <see cref="T:C1.C1PreviewClient.PropsHashtable`1"/>, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.PropsHashtable`1.Count">
            <summary>
            Gets the number of properties set on the current <see cref="T:C1.C1PreviewClient.PropsHashtable`1"/>.
            This value is equal to the number of elements in the <see cref="P:C1.C1PreviewClient.PropsHashtable`1.Keys"/> and <see cref="P:C1.C1PreviewClient.PropsHashtable`1.Values"/> collections.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PropsHashtable`1.Keys">
            <summary>
            Gets the array of property keys set in the current <see cref="T:C1.C1PreviewClient.PropsHashtable`1"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PropsHashtable`1.Values">
            <summary>
            Gets the array of property values set on the current <see cref="T:C1.C1PreviewClient.PropsHashtable`1"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderArea">
            <summary>
            Represents a general-purpose container for other <see cref="T:C1.C1PreviewClient.RenderObject"/> objects.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderObject">
            <summary>
            The abstract base class for all render objects representing content of a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderObject"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeClip">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.Clip"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeFlags">
            <summary>
            Tests whether the Flags property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeName">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeX">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.X"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeY">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.Y"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeWidth">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.Width"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeHeight">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.Height"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeSplitVertBehavior">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.SplitVertBehavior"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeSplitHorzBehavior">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.SplitHorzBehavior"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeStyle">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.Style"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.ShouldSerializeChildren">
            <summary>
            Tests whether the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> property should be serialized.
            </summary>
            <returns>True if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.InitRenderObject">
            <summary>
            Performs some initializations.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetDefaultClip">
            <summary>
            Gets the default value for the <see cref="P:C1.C1PreviewClient.RenderObject.Clip"/> property.
            </summary>
            <returns>True.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetDefaultWidth">
            <summary>
            Gets the default value for the <see cref="P:C1.C1PreviewClient.RenderObject.Width"/> property.
            </summary>
            <returns><see cref="P:C1.C1PreviewClient.Unit.Auto"/>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetDefaultHeight">
            <summary>
            Gets the default value for the <see cref="P:C1.C1PreviewClient.RenderObject.Height"/> property.
            </summary>
            <returns><see cref="P:C1.C1PreviewClient.Unit.Auto"/>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetDefaultFlags">
            <summary>
            Gets the default value for the Flags property.
            </summary>
            <returns>0.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetDefaultSplitVertBehavior">
            <summary>
            Gets the default value for the <see cref="P:C1.C1PreviewClient.RenderObject.SplitVertBehavior"/> property.
            </summary>
            <returns>SplitBehaviorEnum.Never</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetDefaultSplitHorzBehavior">
            <summary>
            Gets the default value for the <see cref="P:C1.C1PreviewClient.RenderObject.SplitHorzBehavior"/> property.
            </summary>
            <returns>SplitBehaviorEnum.Never</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetFlag(System.Int32)">
            <summary>
            Returns the value of flag. The object has private field:
            <code>
            private int _flags;
            </code>
            This field can be used for storing various boolean properties 
            (CanSplitHorz, CanSplitVert etc), for example CanSplitHorz property defined as:
            <code>
            public bool CanSplitHorz
            {
                get { return GetFlag(c_flgCanSplitVert); }
                set { SetFlag(c_flgCanSplitVert, value); }
            }
            </code>
            </summary>
            <param name="flagMask">Mask of flag.</param>
            <returns>Returns true if specified flag is set.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.SetFlag(System.Int32,System.Boolean)">
            <summary>
            Sets value of flag.
            <seealso cref="M:C1.C1PreviewClient.RenderObject.GetFlag(System.Int32)"/>
            </summary>
            <param name="flagMask">Mask of flag.</param>
            <param name="value">Value of flag.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.OnChildAdd(C1.C1PreviewClient.RenderObject)">
            <summary>
            Called after adding new child RenderObject object to the Children collection.
            User can throw exception if this object can't be added as the child for this object.
            </summary>
            <param name="child">Child RenderObject object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.OnChildRemove(C1.C1PreviewClient.RenderObject)">
            <summary>
            Called after removing child RenderObject object from the Children collection.
            User can throw exception if this object can't be removed.
            </summary>
            <param name="child">Child RenderObject object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.OnParentAdd(C1.C1PreviewClient.RenderObject)">
            <summary>
            Called after adding this object to the Children collection
            of another object.
            User can throw exception if this object can't be added as the child for this object.
            </summary>
            <param name="parent">The new parent object for this object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.OnParentRemove(C1.C1PreviewClient.RenderObject)">
            <summary>
            Called after removing this object from the Children collection
            of another object.
            </summary>
            <param name="parent">The parent object of this object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetWidth">
            <summary>
            Override this method to perform additional actions when value of the Width property of object is being read.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.SetWidth(C1.C1PreviewClient.Unit)">
            <summary>
            Override this method to perform additional actions when value of the Width property of object is being defined.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetHeight">
            <summary>
            Override this method to perform additional actions when value of the Height property of object is being read.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.SetHeight(C1.C1PreviewClient.Unit)">
            <summary>
            Override this method to perform additional actions when value of the Height property of object is being defined.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.SetSplitVertBehavior(C1.C1PreviewClient.SplitBehaviorEnum)">
            <summary>
            Override this method to perform additional actions when value of the SplitVertBehavior property of object is being defined.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.SetSplitHorzBehavior(C1.C1PreviewClient.SplitBehaviorEnum)">
            <summary>
            Override this method to perform additional actions when value of the SplitHorzBehavior property of object is being defined.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetAmbientPropValueForChild(C1.C1PreviewClient.RenderObject,System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            Gets the value of a child's ambient style property.
            </summary>
            <param name="roChild">The child <see cref="T:C1.C1PreviewClient.RenderObject"/>.</param>
            <param name="propKey">The style property key.</param>
            <param name="context"><see cref="T:C1.C1PreviewClient.Scripting.IScriptContext"/> to use for evaluation of calculated properties.</param>
            <returns>The style property value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetNonAmbientPropValueForChild(C1.C1PreviewClient.RenderObject,System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            Gets the value of a child's non-ambient style property.
            </summary>
            <param name="roChild">The child <see cref="T:C1.C1PreviewClient.RenderObject"/>.</param>
            <param name="propKey">The style property key.</param>
            <param name="context"><see cref="T:C1.C1PreviewClient.Scripting.IScriptContext"/> to use for evaluation of calculated properties.</param>
            <returns>The style property value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetAssignChildren">
            <summary>
            Override this method and return false if you want manually copy of children
            objects for this object. This method returns true by default.
            </summary>
            <returns>Boolean value indicating that the children objects must be copied in the AssignFrom method.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetActualWidth">
            <summary>
            Override this method to return actual width of object that is used
            when document resolved.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetActualHeight">
            <summary>
            Override this method to return actual height of object that is used
            when document resolved.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            The list of fragments (the <see cref="!:Fragments"/> property) is neither copied nor changed.
            Properties <see cref="P:C1.C1PreviewClient.RenderObject.UserData"/>, <see cref="P:C1.C1PreviewClient.RenderObject.PageNumberingChange"/> are copied by reference.
            The <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property is not copied.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            The list of fragments (the <see cref="!:Fragments"/> property) is neither copied nor changed.
            Properties <see cref="P:C1.C1PreviewClient.RenderObject.UserData"/>, <see cref="P:C1.C1PreviewClient.RenderObject.PageNumberingChange"/> are copied by reference.
            The <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property is not copied.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            The list of fragments (the <see cref="!:Fragments"/> property) is neither copied nor changed.
            Properties <see cref="P:C1.C1PreviewClient.RenderObject.UserData"/>, <see cref="P:C1.C1PreviewClient.RenderObject.PageNumberingChange"/> are copied by reference.
            The <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property is not copied.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Style"/> property should be copied.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            The list of fragments (the <see cref="!:Fragments"/> property) is neither copied nor changed.
            Properties <see cref="P:C1.C1PreviewClient.RenderObject.UserData"/>, <see cref="P:C1.C1PreviewClient.RenderObject.PageNumberingChange"/> are copied by reference.
            The <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property is not copied.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.Clone(System.Boolean,System.Boolean)">
            <summary>
            Clones the current <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            </summary>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be cloned.</param>
            <param name="assignChildren">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> property should be cloned.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.Clone(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Clones the current <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            </summary>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be cloned.</param>
            <param name="assignChildren">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> property should be cloned.</param>
            <param name="assignAnchors">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> property should be cloned.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be cloned.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be cloned.</param>
            <param name="assignStyle">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Style"/> property should be cloned.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.Clone(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Clones the current <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            </summary>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be cloned.</param>
            <param name="assignChildren">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> property should be cloned.</param>
            <param name="assignAnchors">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> property should be cloned.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be cloned.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.Clone">
            <summary>
            Clones the current <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetOwnedObjectCount">
            <summary>
            Calculates the number of objects which are owned by the current object.
            </summary>
            <remarks>
            <para>This method takes into account:</para>
            <list type="bullet">
            <item><description>Child objects and their children;</description></item>
            <item><description>Objects which are specified in page layouts (such as PageHeader, PageFooter etc.).</description></item>
            </list>
            </remarks>
            <returns>The number of owned objects.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObject.GetNestedObjectCount">
            <summary>
            Calculates the count of objects which are nested within this object.
            This method takes into account child objects and their children.
            </summary>
            <returns>Returns the count of nested objects.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.m_Flags">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.ActualWidth">
            <summary>
            Gets the actual width of object used when document resolved.
            This property may differ from Width for example if object is placed
            in the table's column with auto-with and Width is "parent.width" then
            this property returns auto.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.ActualHeight">
            <summary>
            Gets the actual height of object used when document resolved.
            This property may differs from Height for example if object is placed
            in the table's row with auto-height and Height is "parent.height" then
            this property returns auto.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.TableCellInt">
            <summary>
            The cell of RenderTable containing this object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.BordersSplitVertMode">
            <summary>
            Gets or sets a value indicating how borders are drawn
            if the object is too high and is split between pages.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.BordersSplitHorzMode">
            <summary>
            Gets or sets a value indicating how borders are drawn
            if the object is too wide and is split between horizontal pages.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Table">
            <summary>
            Gets the most nested <see cref="T:C1.C1PreviewClient.RenderTable"/> containing the current render object,
            or <b>null</b> if the current object is not contained in a table.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.TableRow"/>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.TableCol"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.TableRow">
            <summary>
            Gets the 0-based index of the row in the most nested <see cref="T:C1.C1PreviewClient.RenderTable"/>
            containing the current render object, or <b>-1</b> if the current object
            is not contained in a table.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.Table"/>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.TableCol"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.TableCol">
            <summary>
            Gets the 0-based index of the column in the most nested <see cref="T:C1.C1PreviewClient.RenderTable"/>
            containing the current render object, or <b>-1</b> if the current object
            is not contained in a table.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.Table"/>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.TableRow"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Clip">
            <summary>
            Gets or sets the value indicating whether the object should be clipped.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Document">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object containing the current <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Collection">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderObjectCollection"/> containing the current object,
            or null if the current object has no <see cref="P:C1.C1PreviewClient.IOwnedCollectionItem.Owner"/> or the owner is not a <see cref="T:C1.C1PreviewClient.RenderObjectCollection"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.IndexInOwner">
            <summary>
            Gets the index of the current object within the <see cref="P:C1.C1PreviewClient.IOwnedCollectionItem.Owner"/>, or -1 if there is no owner.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Parent">
            <summary>
            Gets the parent <see cref="T:C1.C1PreviewClient.RenderObject"/> containing the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Name">
            <summary>
            Gets or sets the name of the current object.
            The name can be an empty string. If it is not empty, the name must be unique
            among the current object's siblings (i.e. objects with the same <see cref="P:C1.C1PreviewClient.IOwnedCollectionItem.Owner"/>).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.UserData">
            <summary>
            Gets or sets arbitrary data associated with the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.HasChildren">
            <summary>
            Gets a value indicating whether the current object has children
            (i.e. its <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection contains at least one element).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Children">
            <summary>
            Gets the collection of child render objects.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Stacking">
            <summary>
            Gets or sets the stacking rules used to arrange the children of the current object.
            </summary>
            <remarks>
            For block flow, the alignment of child objects within the flow is determined by the
            value of <see cref="!:C1.C1Preview.Style.FlowAlignChildren"/> property on the current object,
            and the values of <see cref="!:C1.C1Preview.Style.FlowAlign"/> properties on the children.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.SplitVertBehavior">
            <summary>
            Gets or sets the value determining how the object is treated
            when it is too high to fit in the vertical space available on the current page.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.SplitHorzBehavior"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.SplitHorzBehavior">
            <summary>
            Gets or sets the value determining how the object is treated
            when it is too wide to fit in the horizontal space available on the current page.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.SplitVertBehavior"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.CanSplitHorz">
            <summary>
            Indicates whether the object can be split horizontally if it falls on a page break.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.CanSplitVert">
            <summary>
            Indicates whether the object can be split vertically if it falls on a page break.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.ZOrder">
            <summary>
            Gets or sets the Z-order of the current object.
            Objects with smaller Z-order values are drawn under objects with larger Z-order values.
            By default, this property is zero.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.X">
            <summary>
            Gets or sets the X coordinate of the current object.
            <para>
            May be specified as auto (<see cref="P:C1.C1PreviewClient.Unit.Auto"/>),
            an absolute value (using <see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/>),
            an absolute value with unit of measurement (e.g. "12mm"),
            or an expression referencing this and other objects (e.g. "prev.right+2mm").
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Y">
            <summary>
            Gets or sets the Y coordinate of the current object.
            <para>
            May be specified as auto (<see cref="P:C1.C1PreviewClient.Unit.Auto"/>),
            an absolute value (using <see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/>),
            an absolute value with unit of measurement (e.g. "12mm"),
            or an expression referencing this and other objects (e.g. "prev.height/2-self.height/2").
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Width">
            <summary>
            Gets or sets the width of the current object.
            <para>
            May be specified as auto (<see cref="P:C1.C1PreviewClient.Unit.Auto"/>),
            a percentage of the parent's width (e.g. "50%"),
            an absolute value (using <see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/>),
            an absolute value with unit of measurement (e.g. "12mm"),
            or an expression referencing this and other objects (e.g. "Max(prev.width,6cm)").
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Height">
            <summary>
            Gets or sets the height of the current object.
            <para>
            May be specified as auto (<see cref="P:C1.C1PreviewClient.Unit.Auto"/>),
            a percentage of the parent's height (e.g. "50%"),
            an absolute value (using <see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/>),
            an absolute value with unit of measurement (e.g. "12mm"),
            or an expression referencing this and other objects (e.g. "150%prev.height+1in").
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.BreakBefore">
            <summary>
            Gets or sets the type of break (none, line, column, or page) to insert before the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.BreakAfter">
            <summary>
            Gets or sets the type of break (none, line, column, or page) to insert after the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.LayoutChangeBefore">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> object
            defining the change of page layout that will occur before the current object.
            </summary>
            <remarks>
            <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> is an abstract class.
            Instances of the following non-abstract classes derived from it can be assigned to this property:
            <list type="bullet">
            <item><term><see cref="T:C1.C1PreviewClient.LayoutChangeNoBreak"/></term>
            <description>Does not insert a break. Provides the ability to change page layout for the next page without interrupting the current flow.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.LayoutChangeNewLine"/></term>
            <description>Inserts a line break in the inline flow. Does not break the block flow.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.LayoutChangeNewColumn"/></term>
            <description>Starts a new column in a multi-column layout, or a new page otherwise.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/></term>
            <description>Starts a new page.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.LayoutChangeAfter">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> object
            defining the change of page layout that will occur after the current object.
            </summary>
            <remarks>
            <see cref="T:C1.C1PreviewClient.LayoutChangeBase"/> is an abstract class.
            Instances of the following non-abstract classes derived from it can be assigned to this property:
            <list type="bullet">
            <item><term><see cref="T:C1.C1PreviewClient.LayoutChangeNoBreak"/></term>
            <description>Does not insert a break. Provides the ability to change page layout for the next page without interrupting the current flow.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.LayoutChangeNewLine"/></term>
            <description>Inserts a line break in the inline flow. Does not break the block flow.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.LayoutChangeNewColumn"/></term>
            <description>Starts a new column in a multi-column layout, or a new page otherwise.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.LayoutChangeNewPage"/></term>
            <description>Starts a new page.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Style">
            <summary>
            Gets the <see cref="P:C1.C1PreviewClient.RenderObject.Style"/> of the current object.
            This property cannot be assigned to. To use another style as the base
            for the current object's style, set the <see cref="!:C1.C1Preview.Style.Parent"/> to that other style.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.RepeatBordersHorz">
            <summary>
            Gets or sets a value indicating whether the horizontal borders of the current object
            will repeat on all generated fragments when the object is split horizontally.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.RepeatBordersVert">
            <summary>
            Gets or sets a value indicating whether the vertical borders of the current object
            will repeat on all generated fragments when the object is split vertically.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.PageNumberingChange">
            <summary>
            Gets or sets the <see cref="P:C1.C1PreviewClient.RenderObject.PageNumberingChange"/> object
            defining the page numbering change that will occur when the current object is rendered.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Hyperlink">
            <summary>
            Gets or sets the hyperlink (see <see cref="T:C1.C1PreviewClient.C1Hyperlink"/>) associated with the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Anchors">
            <summary>
            Gets the collection of anchors (elements of the type <see cref="T:C1.C1PreviewClient.C1Anchor"/>) associated with the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.HasAnchors">
            <summary>
            Gets a value indicating whether the current object has any anchors associated with it
            (i.e. whether the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection exists and is not empty).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.TableCell">
            <summary>
            Gets the <see cref="P:C1.C1PreviewClient.RenderObject.TableCell"/> object containing the current object,
            or null if the current object is not contained in a cell of a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.KeepTogether">
            <summary>
            Gets or sets a render object which should be printed on the same page
            as the current object. The specified object must have the same
            <see cref="P:C1.C1PreviewClient.RenderObject.Parent"/> as the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObject.Visibility">
            <summary>
            Gets or sets a value indicating the visibility of the current object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArea"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArea.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArea.GetDefaultFlags">
            <summary>
            Gets the default value for the Flags property.
            </summary>
            <returns>Default flags plus CanSplitHorz and CanSplitVert.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArea.GetDefaultSplitHorzBehavior">
            <summary>
            Gets the default horizontal split behavior (area is too wide).
            </summary>
            <returns><see cref="F:C1.C1PreviewClient.SplitBehaviorEnum.SplitIfNeeded"/>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArea.GetDefaultSplitVertBehavior">
            <summary>
            Gets the default vertical split behavior (area is too high).
            </summary>
            <returns><see cref="F:C1.C1PreviewClient.SplitBehaviorEnum.SplitIfNeeded"/>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArea.GetDefaultWidth">
            <summary>
            Gets the default area width.
            </summary>
            <returns>Parent width.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArea.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderArea"/>, also copies <see cref="T:C1.C1PreviewClient.RenderArea"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderArea.HeaderVert">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.RenderObject"/> that is repeated on all pages (or columns)
            if the current render area is split vertically when it is too high to fit on
            a single page.
            </summary>
            <remarks>
            The specified render object should not be a child of another render object.
            It can be a child of the current render area; if it is not, it will be
            added to the current render area's <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.RenderArea.HeaderHorz">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.RenderObject"/> that will be repeated on all "horizontal" pages
            if the current render area is split horizontally when it is too wide to fit on
            a single page.
            </summary>
            <remarks>
            The specified render object should not be a child of another render object.
            It can be a child of the current render area; if it is not, it will be
            added to the current render area's <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection.
            </remarks>
        </member>
        <member name="T:C1.C1PreviewClient.RenderEmpty">
            <summary>
            Represents an empty <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            Provides a convenient placeholder for things like page breaks and so on,
            where no content needs to be rendered.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEmpty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEmpty"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEmpty.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEmpty"/> class
            with specified width and height.
            </summary>
            <param name="width">The <see cref="T:C1.C1PreviewClient.Unit"/> width of the current <see cref="T:C1.C1PreviewClient.RenderEmpty"/> object.</param>
            <param name="height">The <see cref="T:C1.C1PreviewClient.Unit"/> height of the current <see cref="T:C1.C1PreviewClient.RenderEmpty"/> object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEmpty.#ctor(C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEmpty"/> class
            with a specified height.
            </summary>
            <param name="height">The <see cref="T:C1.C1PreviewClient.Unit"/> height of the current <see cref="T:C1.C1PreviewClient.RenderEmpty"/> object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEmpty.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEmpty.#ctor(C1.C1PreviewClient.BreakEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEmpty"/> class
            with a zero height and a specified <see cref="P:C1.C1PreviewClient.RenderObject.BreakAfter"/> value.
            </summary>
            <param name="brk">They type of break that is to be inserted after this object.</param>
        </member>
        <member name="T:C1.C1PreviewClient.RenderGraphics">
            <summary>
            Represents a drawing on a .NET <see cref="T:System.Drawing.Graphics"/> object
            in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderGraphics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderGraphics"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderGraphics.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderGraphics.ShouldSerializeContent">
            <summary>
            Indicates whether the content of the current <see cref="T:C1.C1PreviewClient.RenderGraphics"/> object
            should be serialized (i.e. is not empty).
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderGraphics.ShouldSerializeOpenXmlContent">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderGraphics.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderGraphics"/>, also copies <see cref="T:C1.C1PreviewClient.RenderGraphics"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderGraphics.Clear">
            <summary>
            Clears the current <see cref="T:C1.C1PreviewClient.RenderGraphics"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderGraphics.EmfType">
            <summary>
            Gets or sets the type of metafile created by the current <see cref="T:C1.C1PreviewClient.RenderGraphics"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderGraphics.Graphics">
            <summary>
            Gets the <see cref="T:System.Drawing.Graphics"/> object to draw on.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderGraphics.ReferenceGraphics">
            <summary>
            Gets the reference <see cref="T:System.Drawing.Graphics"/> used to create the underlying metafile.
            This property is simply a shortcut to the <see cref="P:C1.C1PreviewClient.C1PrintDocument.CreationGraphics"/> property,
            and returns <b>null</b> if the current <see cref="T:C1.C1PreviewClient.RenderGraphics"/> object has not been added
            to a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> yet.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderImage">
            <summary>
            Represents an image in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            Can also be used to show an image of a <b>System.Windows.Forms.Control</b>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderImage"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> property.
            </summary>
            <param name="image">An <see cref="T:System.Drawing.Image"/> that is assigned to the <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderImage.ImageName"/> property.
            </summary>
            <param name="imageName">A string that is assigned to the <see cref="P:C1.C1PreviewClient.RenderImage.ImageName"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(System.Drawing.Image,C1.C1PreviewClient.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> property,
            and specifying a <see cref="!:C1.C1Preview.Style"/> to use.
            </summary>
            <param name="image">An <see cref="T:System.Drawing.Image"/> that is assigned to the <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> property.</param>
            <param name="style">A <see cref="!:C1.C1Preview.Style"/> to use
            (the <see cref="!:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)"/> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1PreviewClient.RenderObject.Style"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(System.String,C1.C1PreviewClient.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> property,
            and specifying a <see cref="!:C1.C1Preview.Style"/> to use.
            </summary>
            <param name="imageName">A string that is assigned to the <see cref="P:C1.C1PreviewClient.RenderImage.ImageName"/> property.</param>
            <param name="style">A <see cref="!:C1.C1Preview.Style"/> to use
            (the <see cref="!:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)"/> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1PreviewClient.RenderObject.Style"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(System.Drawing.Image,C1.C1PreviewClient.ImageAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> property,
            and specifying a <see cref="!:C1.C1Preview.ImageAlign"/> to use.
            </summary>
            <param name="image">An <see cref="T:System.Drawing.Image"/> that is assigned to the <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> property.</param>
            <param name="imageAlign">An <see cref="T:C1.C1PreviewClient.ImageAlign"/> that is assigned to <see cref="!:C1.C1Preview.Style.ImageAlign"/>
            of the current object's <see cref="T:C1.C1PreviewClient.Style"/>.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(System.String,C1.C1PreviewClient.ImageAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> property,
            and specifying a <see cref="!:C1.C1Preview.ImageAlign"/> to use.
            </summary>
            <param name="imageName">A string that is assigned to the <see cref="P:C1.C1PreviewClient.RenderImage.ImageName"/> property.</param>
            <param name="imageAlign">An <see cref="T:C1.C1PreviewClient.ImageAlign"/> that is assigned to <see cref="!:C1.C1Preview.Style.ImageAlign"/>
            of the current object's <see cref="T:C1.C1PreviewClient.Style"/>.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(C1.C1PreviewClient.C1PrintDocument,System.Drawing.Image)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="image"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="imageName"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(C1.C1PreviewClient.C1PrintDocument,System.Drawing.Image,C1.C1PreviewClient.Style)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="image"></param>
            <param name="style"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,C1.C1PreviewClient.Style)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="imageName"></param>
            <param name="style"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(C1.C1PreviewClient.C1PrintDocument,System.Drawing.Image,C1.C1PreviewClient.ImageAlign)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="image"></param>
            <param name="imageAlign"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,C1.C1PreviewClient.ImageAlign)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="imageName"></param>
            <param name="imageAlign"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderImage.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderGraphics"/>, also copies <see cref="T:C1.C1PreviewClient.RenderGraphics"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderImage.Image">
            <summary>
            Gets or sets an <see cref="T:System.Drawing.Image"/> that is
            rendered by the current <see cref="T:C1.C1PreviewClient.RenderImage"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderImage.ImageName">
            <summary>
            Gets or sets the name of an image that is 
            rendered by the current <see cref="T:C1.C1PreviewClient.RenderImage"/> object.
            When the current object renders, the actual image is retrieved by this name
            from the <see cref="P:C1.C1PreviewClient.C1PrintDocument.Dictionary"/> of the containing <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.BordersSplitMode">
            <summary>
            Specifies how borders are drawn when the object is split between pages.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BordersSplitMode.None">
            <summary>
            Borders are not drawn where the object is split.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BordersSplitMode.Square">
            <summary>
            Square borders are drawn where the object is split.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BordersSplitMode.Round">
            <summary>
            Borders are drawn where the object is split.
            If the border is round (see <see cref="P:C1.C1PreviewClient.IBorders.RadiusX"/>,
            <see cref="P:C1.C1PreviewClient.IBorders.RadiusY"/>),
            round borders are drawn where the object is split.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.SplitBehaviorEnum">
            <summary>
            Defines the splitting behavior of a render object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.SplitBehaviorEnum.Never">
            <summary>
            The object should not be split between pages
            (i.e. should always be kept together on a single page).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.SplitBehaviorEnum.SplitIfNeeded">
            <summary>
            The object can be split if it does not fit onto the current page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.SplitBehaviorEnum.SplitIfLarge">
            <summary>
            The object can be split only if it is too large to fit on an empty 
            page. In that case, the object is split immediately. Otherwise, a 
            new page is started and the object is placed on it without 
            splitting.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.SplitBehaviorEnum.SplitNewPage">
            <summary>
            If the object does not fit on the current page (column),
            a new page (column) is started; if the object does not fit
            on that page (column), it is split as needed after that.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.BreakEnum">
            <summary>
            Defines the various breaks which can be forced before or after render object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BreakEnum.None">
            <summary>
            No break.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BreakEnum.Page">
            <summary>
            New page should be started.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BreakEnum.Column">
            <summary>
            New column should be started.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.BreakEnum.Line">
            <summary>
            New line on inline flow should be started.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.VisibilityEnum">
            <summary>
            Specifies the visibility of an object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.VisibilityEnum.Visible">
            <summary>
            Object is visible.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.VisibilityEnum.Hidden">
            <summary>
            Object is not visible, but takes up space and affects the layout of other objects as if it were visible.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.VisibilityEnum.Collapse">
            <summary>
            Object is not visible, its size is zero and it does not affect the layout of other objects.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IRenderObjectContainer">
            <summary>
            This interface must be implemented by object which works as owner 
            for the RenderObject objects.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderObjectCollection">
            <summary>
            Represents the collection of RenderObject objects.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.OnClearComplete">
            <summary>
            Called after the collection has been cleared.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Called after an item has been removed.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Called after an item has been set.
            </summary>
            <param name="index">The item index.</param>
            <param name="oldValue">The old item.</param>
            <param name="newValue">The new item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item is about to be set.
            </summary>
            <param name="index">The item index.</param>
            <param name="oldValue">The old item.</param>
            <param name="newValue">The new item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Called when an item is about to be iserted.
            </summary>
            <param name="index">The item index.</param>
            <param name="value">The item.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.GetItemType">
            <summary>
            Returns typeof(<see cref="T:C1.C1PreviewClient.RenderObject"/>).
            </summary>
            <returns>typeof(<see cref="T:C1.C1PreviewClient.RenderObject"/>).</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.Add(C1.C1PreviewClient.RenderObject)">
            <summary>
            Adds the specified <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current collection.
            </summary>
            <param name="ro">The object to add.</param>
            <returns>The index of the newly added object in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.Remove(C1.C1PreviewClient.RenderObject)">
            <summary>
            Removes the specified <see cref="T:C1.C1PreviewClient.RenderObject"/> from the current collection.
            </summary>
            <param name="ro">The object to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.Insert(System.Int32,C1.C1PreviewClient.RenderObject)">
            <summary>
            Inserts the specified <see cref="T:C1.C1PreviewClient.RenderObject"/> into the current collection.
            </summary>
            <param name="index">The index where to insert the object.</param>
            <param name="ro">The object to insert.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.IndexOfName(System.String)">
            <summary>
            Searches the current collection for an object with the specified <see cref="P:C1.C1PreviewClient.RenderObject.Name"/>.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>Index of the object in the current collection, or -1 if no object was found.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderObjectCollection.FindByAnchorName(System.String,C1.C1PreviewClient.C1Anchor@)">
            <summary>
            Searches the current collection for an object that contains an anchor
            with the specified name in its <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection.
            </summary>
            <param name="anchorName">The name of the anchor to search for.</param>
            <param name="anchor">OUT: contains the <see cref="T:C1.C1PreviewClient.C1Anchor"/> object with the specified name.</param>
            <returns>Returns the found render object or null if not found.</returns>
            <returns>The object containing the specified anchor, or null if no object was found.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObjectCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderObject"/> with the specified <see cref="P:C1.C1PreviewClient.RenderObject.Name"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderObjectCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.RenderObject"/> at the specified index.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderParagraph">
            <summary>
            Represents a paragraph in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            Paragraphs can contain inline text and images, possibly rendered using different styles.
            The content of a paragraph is accessible via the <see cref="P:C1.C1PreviewClient.RenderParagraph.Content"/> property.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderTextBase">
            <summary>
            The abstract base class for render object types representing text
            (<see cref="T:C1.C1PreviewClient.RenderText"/> and <see cref="T:C1.C1PreviewClient.RenderParagraph"/>) in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTextBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderTextBase"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTextBase.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTextBase.ShouldSerializeTabPositions">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.RenderTextBase.TabPositions"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.RenderTextBase.TabPositions"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTextBase.GetDefaultFlags">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTextBase.GetDefaultSplitVertBehavior">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTextBase.GetDefaultWidth">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTextBase.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderTextBase"/>, also copies <see cref="T:C1.C1PreviewClient.RenderTextBase"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTextBase.HasText">
            <summary>
            Gets a value indicating whether the current object represents a non-empty text.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTextBase.TextLength">
            <summary>
            Gets the lenght of text represented by the current object.
            (Do not use this property to test whether a non-empty text is assigned to the current object,
            use <see cref="P:C1.C1PreviewClient.RenderTextBase.HasText"/> instead.)
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTextBase.TabPositions">
            <summary>
            Gets the collection of <see cref="T:C1.C1PreviewClient.TabPosition"/> objects representing tab stops
            associated with the current text.
            </summary>
            <remarks>
            This method always returns a non-<b>null</b> <see cref="T:C1.C1PreviewClient.TabPositionCollection"/>,
            initializing it if it did not exist.
            To test whether the current object has any tab stops defined
            without creating the <see cref="P:C1.C1PreviewClient.RenderTextBase.TabPositions"/> collection,
            use the <see cref="P:C1.C1PreviewClient.RenderTextBase.HasTabPositions"/> property.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTextBase.HasTabPositions">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.C1PreviewClient.RenderTextBase.TabPositions"/> collection
            has been initialized and contains one or more elements.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderParagraph"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderParagraph"/> class,
            specifying a <see cref="!:C1.C1Preview.Style"/> to use.
            </summary>
            <param name="style">A <see cref="!:C1.C1Preview.Style"/> to use
            (the <see cref="!:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)"/> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1PreviewClient.RenderObject.Style"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(System.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderParagraph"/> class,
            specifying a <see cref="T:System.Drawing.Font"/> to use.
            </summary>
            <param name="font">The default font for the current paragraph.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderParagraph"/> class,
            specifying the default font and text color.
            </summary>
            <param name="font">The default font for the current paragraph.</param>
            <param name="textColor">The default text color for the current paragraph.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderParagraph"/> class,
            specifying the default font, text color and horizontal alignment.
            </summary>
            <param name="font">The default font for the current paragraph.</param>
            <param name="textColor">The default text color for the current paragraph.</param>
            <param name="horzAlign">The horizontal alignment for the current paragraph.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(System.Drawing.Font,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderParagraph"/> class,
            specifying the default font and horizontal alignment.
            </summary>
            <param name="font">The default font for the current paragraph.</param>
            <param name="horzAlign">The horizontal alignment for the current paragraph.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderParagraph"/> class,
            specifying the horizontal alignment.
            </summary>
            <param name="horzAlign">The horizontal alignment for the current paragraph.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Style)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="style"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.C1PrintDocument,System.Drawing.Font)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="font"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.C1PrintDocument,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="font"></param>
            <param name="textColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.C1PrintDocument,System.Drawing.Font,System.Drawing.Color,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="font"></param>
            <param name="textColor"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.C1PrintDocument,System.Drawing.Font,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="font"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderParagraph.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderTextBase.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderParagraph"/>, also copies <see cref="T:C1.C1PreviewClient.RenderParagraph"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderParagraph.Content">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.ParagraphObjectCollection"/> representing
            the content (text and images) of the current paragraph.
            </summary>
            <remarks>
            This method always returns a non-<b>null</b> <see cref="T:C1.C1PreviewClient.ParagraphObjectCollection"/>,
            initializing it if it did not exist.
            To test whether a paragraph already contains content
            without creating the <see cref="P:C1.C1PreviewClient.RenderParagraph.Content"/> collection,
            use the <see cref="P:C1.C1PreviewClient.RenderParagraph.HasContent"/> property.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.RenderParagraph.HasContent">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.C1PreviewClient.RenderParagraph.Content"/> collection
            has been initialized and contains one or more elements.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderParagraph.HasText">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.C1PreviewClient.RenderParagraph.Content"/> collection
            has been initialized and contains one or more elements.
            <para>
            This property is an alias for the <see cref="P:C1.C1PreviewClient.RenderParagraph.HasContent"/> property.
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderParagraph.TextLength">
            <summary>
            Gets the count of characters in the current paragraph.
            Each non-text object (such as <see cref="T:C1.C1PreviewClient.ParagraphImage"/>)
            counts as one character.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderParagraph.Text">
            <summary>
            Gets or sets the text of the current paragraph.
            </summary>
            <remarks>
            <para>
            The getter for this property concatenates and returns 
            the texts of all <see cref="T:C1.C1PreviewClient.ParagraphText"/> objects
            in the current paragraph.
            </para>
            <para>
            The setter clears the <see cref="P:C1.C1PreviewClient.RenderParagraph.Content"/> of the current paragraph,
            and then adds the specified <paramref name="value"/>
            as a single <see cref="T:C1.C1PreviewClient.ParagraphText"/>.
            </para>
            </remarks>
        </member>
        <member name="T:C1.C1PreviewClient.ParagraphObject">
            <summary>
            The abstract base class for inline text and images, rendered using a single style,
            in the <see cref="!:C1.C1Preview.RenderParagraph.Content"/> of a <see cref="!:C1.C1Preview.RenderParagraph"/> object.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.ParagraphText"/>
            <seealso cref="T:C1.C1PreviewClient.ParagraphImage"/>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphObject"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObject.ShouldSerializeStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.ParagraphObject.Style"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.ParagraphObject.Style"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObject.GetLength">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObject.AssignFrom(C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ParagraphObject"/> to the current object.
            </summary>
            <param name="source">The object to copy the properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObject.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.C1PreviewClient.ParagraphObject"/> object.
            </summary>
            <returns>The newly created <see cref="T:C1.C1PreviewClient.ParagraphObject"/> object.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.Hyperlink">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> associated with the current paragraph object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.Style">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> associated with the current paragraph object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.ParagraphObjectCollection"/> containing
            the current paragraph object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.RenderParagraph">
            <summary>
            Gets the <see cref="P:C1.C1PreviewClient.ParagraphObject.RenderParagraph"/> containing
            the current paragraph object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.Document">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> containing
            the current paragraph object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.IndexInOwner">
            <summary>
            Gets the index of the current paragraph object
            in the containing <see cref="T:C1.C1PreviewClient.ParagraphObjectCollection"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.PositionInText">
            <summary>
            Gets the character 0-based position of the current paragraph object
            in the text of the paragraph.
            <para>
            Each non-text paragraph object (<see cref="T:C1.C1PreviewClient.ParagraphImage"/>)
            counts as one character.
            </para>
            </summary>
            <seealso cref="!:C1.C1Preview.RenderParagraph.TextLength"/>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.TextLength">
            <summary>
            Gets the length of the current paragraph object in characters.
            For non-text objects (<see cref="T:C1.C1PreviewClient.ParagraphImage"/>), this
            property returns <b>1</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObject.UserData">
            <summary>
            Gets or sets arbitrary data associated with the current paragraph object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ParagraphText">
            <summary>
            Represents a run of text, rendered using a single style,
            in the <see cref="P:C1.C1PreviewClient.RenderParagraph.Content"/> of a <see cref="T:C1.C1PreviewClient.RenderParagraph"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.ParagraphObject"/>
            <seealso cref="T:C1.C1PreviewClient.ParagraphImage"/>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String,C1.C1PreviewClient.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the <see cref="!:C1.C1Preview.Style"/>.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
            <param name="style">A <see cref="!:C1.C1Preview.Style"/> to use
            (the <see cref="!:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)"/> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1PreviewClient.RenderObject.Style"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the <see cref="!:C1.C1Preview.Style"/>.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the font.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
            <param name="font">The font to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the text color.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
            <param name="textColor">The text color to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String,C1.C1PreviewClient.TextPositionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the text position.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
            <param name="textPosition">The text position to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the font and text color.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
            <param name="font">The font to use.</param>
            <param name="textColor">The text color to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String,System.Drawing.Font,C1.C1PreviewClient.TextPositionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the font and text position.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
            <param name="font">The font to use.</param>
            <param name="textPosition">The text position to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String,System.Drawing.Color,C1.C1PreviewClient.TextPositionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the text color and position.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
            <param name="textColor">The text color to use.</param>
            <param name="textPosition">The text position to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1PreviewClient.TextPositionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property,
            and specifying the font, text color and position.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.ParagraphText.Text"/> property of the current object.</param>
            <param name="font">The font to use.</param>
            <param name="textColor">The text color to use.</param>
            <param name="textPosition">The text position to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.GetLength">
            <summary>
            Returns the length of this ParagraphText object.
            </summary>
            <returns>The text length.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphText.AssignFrom(C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ParagraphObject"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphText.Text">
            <summary>
            Gets or sets the text of the current <see cref="T:C1.C1PreviewClient.ParagraphText"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ParagraphImage">
            <summary>
            Represents an inline image
            in the <see cref="P:C1.C1PreviewClient.RenderParagraph.Content"/> of a <see cref="T:C1.C1PreviewClient.RenderParagraph"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.ParagraphObject"/>
            <seealso cref="T:C1.C1PreviewClient.ParagraphText"/>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphImage"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphImage.#ctor(System.Drawing.Image,C1.C1PreviewClient.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphImage.Image"/> property,
            and specifying the <see cref="!:C1.C1Preview.Style"/>.
            </summary>
            <param name="image">An image assigned to the <see cref="P:C1.C1PreviewClient.ParagraphImage.Image"/> property of the current object.</param>
            <param name="style">A <see cref="!:C1.C1Preview.Style"/> to use
            (the <see cref="!:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)"/> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1PreviewClient.RenderObject.Style"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphImage.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphImage.Image"/> property.
            </summary>
            <param name="image">An image assigned to the <see cref="P:C1.C1PreviewClient.ParagraphImage.Image"/> property of the current object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ParagraphImage"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.ParagraphImage.ImageName"/> property.
            </summary>
            <param name="imageName">A string that is assigned to the <see cref="P:C1.C1PreviewClient.ParagraphImage.ImageName"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphImage.GetLength">
            <summary>
            Returns the length of the current paragraph object.
            </summary>
            <returns>1.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphImage.AssignFrom(C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ParagraphObject"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphImage.Image">
            <summary>
            Gets or sets an <see cref="T:System.Drawing.Image"/> that is
            rendered by the current <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphImage.ImageName">
            <summary>
            Gets or sets the name of an image that is 
            rendered by the current <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object.
            When the current object renders, the actual image is retrieved by this name
            from the <see cref="P:C1.C1PreviewClient.C1PrintDocument.Dictionary"/> of the containing <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphImage.C1#C1PreviewClient#IDictionaryItemLinkOwner#Dictionary">
            <summary>
            Gets the dictionary associated with this ParagraphImage object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ParagraphObjectCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1PreviewClient.ParagraphObject"/> objects
            that is the <see cref="!:C1.C1Preview.RenderParagraph.Content"/>
            of a <see cref="!:C1.C1Preview.RenderParagraph"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.GetItemType">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.Add(C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Adds a <see cref="T:C1.C1PreviewClient.ParagraphObject"/> to the current paragraph content.
            </summary>
            <param name="po">The <see cref="T:C1.C1PreviewClient.ParagraphObject"/> to add.</param>
            <returns>The index of the added object in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.Remove(C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Removes a <see cref="T:C1.C1PreviewClient.ParagraphObject"/> from the current paragraph content.
            </summary>
            <param name="po">The object to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String)">
            <summary>
            Adds a text string to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String,C1.C1PreviewClient.Style)">
            <summary>
            Adds a text string with the specified style to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="style">The style to use to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text and style, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font)">
            <summary>
            Adds a text string with the specified font to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="font">The font to use to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text and font, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color)">
            <summary>
            Adds a text string with the specified text color to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="textColor">The text color to use to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text and text color, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String,C1.C1PreviewClient.TextPositionEnum)">
            <summary>
            Adds a text string with the specified text position to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="textPosition">The text position to use to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text and text position, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Adds a text string with the specified font and text color to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="font">The font to use to render the string.</param>
            <param name="textColor">The text color to use to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text, font and text color, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,C1.C1PreviewClient.TextPositionEnum)">
            <summary>
            Adds a text string with the specified font and text position to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="font">The font to use to render the string.</param>
            <param name="textPosition">The text position to use to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text, font and text position, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color,C1.C1PreviewClient.TextPositionEnum)">
            <summary>
            Adds a text string with the specified text color and position to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="textColor">The text color to use to render the string.</param>
            <param name="textPosition">The text position to use to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text, text color and position, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1PreviewClient.TextPositionEnum)">
            <summary>
            Adds a text string with the specified font, text color and position to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="font">The font to use to render the string.</param>
            <param name="textColor">The text color to use to render the string.</param>
            <param name="textPosition">The text position to use to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text, font, text color and position, and adds it
            to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.String,System.String)">
            <summary>
            Adds a text hyperlink to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="anchorName">The name of the anchor which is the target of the hyperlink.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="anchorName"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.String,System.String,C1.C1PreviewClient.Style)">
            <summary>
            Adds a text hyperlink with a specified style to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="anchorName">The name of the anchor which is the target of the hyperlink.</param>
            <param name="style">A style used to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text and style,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="anchorName"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1PreviewClient.C1LinkTarget)">
            <summary>
            Adds a text hyperlink to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="target">A <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> which is the target of the hyperlink.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="target"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1PreviewClient.C1LinkTarget,C1.C1PreviewClient.Style)">
            <summary>
            Adds a text hyperlink with a specified style to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="target">A <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> which is the target of the hyperlink.</param>
            <param name="style">A style used to render the string.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text and style,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="target"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1PreviewClient.RenderObject)">
            <summary>
            Adds a text hyperlink to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="renderObject">A <see cref="T:C1.C1PreviewClient.RenderObject"/> which is the target of the hyperlink.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="renderObject"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Adds a text hyperlink to the current paragraph content.
            </summary>
            <param name="text">The text string to add.</param>
            <param name="paragraphObject">A <see cref="T:C1.C1PreviewClient.ParagraphObject"/> which is the target of the hyperlink.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphText"/> object representing the specified text string,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphText"/>,
            initializes it with the specified text,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="paragraphObject"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,System.String)">
            <summary>
            Adds an image hyperlink to the current paragraph content.
            </summary>
            <param name="image">The image to add.</param>
            <param name="anchorName">The name of the anchor which is the target of the hyperlink.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object representing the specified image,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphImage"/>,
            initializes it with the specified image,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="anchorName"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1PreviewClient.C1LinkTarget)">
            <summary>
            Adds an image hyperlink to the current paragraph content.
            </summary>
            <param name="image">The image to add.</param>
            <param name="target">A <see cref="T:C1.C1PreviewClient.C1LinkTarget"/> which is the target of the hyperlink.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object representing the specified image,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphImage"/>,
            initializes it with the specified image,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="target"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1PreviewClient.RenderObject)">
            <summary>
            Adds an image hyperlink to the current paragraph content.
            </summary>
            <param name="image">The image to add.</param>
            <param name="renderObject">A <see cref="T:C1.C1PreviewClient.RenderObject"/> which is the target of the hyperlink.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object representing the specified image,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphImage"/>,
            initializes it with the specified image,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="renderObject"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Adds an image hyperlink to the current paragraph content.
            </summary>
            <param name="image">The image to add.</param>
            <param name="paragraphObject">A <see cref="T:C1.C1PreviewClient.ParagraphObject"/> which is the target of the hyperlink.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object representing the specified image,
            associated with the specified hyperlink.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphImage"/>,
            initializes it with the specified image,
            sets the <see cref="P:C1.C1PreviewClient.ParagraphObject.Hyperlink"/> on that object to a
            <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> initialized with <paramref name="paragraphObject"/>,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddImage(System.Drawing.Image)">
            <summary>
            Adds an image to the current paragraph content.
            </summary>
            <param name="image">The image to add.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object representing the specified image.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphImage"/>,
            initializes it with the specified image,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddImage(System.String)">
            <summary>
            Adds an image to the current paragraph content.
            </summary>
            <param name="imageName">A string that is assigned to the <see cref="P:C1.C1PreviewClient.ParagraphImage.ImageName"/> property.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object representing the specified named image.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphImage"/>,
            initializes it with the specified image name,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.ParagraphObjectCollection.AddImage(System.Drawing.Image,C1.C1PreviewClient.Style)">
            <summary>
            Adds an image with a specified style to the current paragraph content.
            </summary>
            <param name="image">The image to add.</param>
            <param name="style">A style used to render the image.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.ParagraphImage"/> object representing the specified image.</returns>
            <remarks>
            This method creates a <see cref="T:C1.C1PreviewClient.ParagraphImage"/>,
            initializes it with the specified image and style,
            and adds it to the current collection.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObjectCollection.RenderParagraph">
            <summary>
            Gets the containing <see cref="!:C1.C1Preview.RenderParagraph"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ParagraphObjectCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.ParagraphObject"/> at the specified index. 
            </summary>
            <param name="index">The index in the current collection.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.ParagraphObject"/> at the specified index.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.RenderRichText">
            <summary>
            Represents an <b>RTF</b> text in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRichText"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.#ctor(System.String,C1.C1PreviewClient.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRichText"/> class,
            using the specified RTF string and style.
            </summary>
            <param name="rtf">A <b>RTF</b>-formatted string assigned to the <see cref="P:C1.C1PreviewClient.RenderRichText.Rtf"/> property.</param>
            <param name="style">A <see cref="!:C1.C1Preview.Style"/> to use
            (the <see cref="!:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)"/> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1PreviewClient.RenderObject.Style"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRichText"/> class,
            using the specified RTF string and style.
            </summary>
            <param name="rtf">A <b>RTF</b>-formatted string assigned to the <see cref="P:C1.C1PreviewClient.RenderRichText.Rtf"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,C1.C1PreviewClient.Style)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="rtf"></param>
            <param name="style"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="rtf"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.GetDefaultFlags">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.GetDefaultSplitVertBehavior">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.GetDefaultWidth">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.SetWidth(C1.C1PreviewClient.Unit)">
            <summary>
            For internal use.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderRichText"/>, also copies <see cref="T:C1.C1PreviewClient.RenderRichText"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.Load(System.String)">
            <summary>
            Loads the content of the current <see cref="T:C1.C1PreviewClient.RenderRichText"/> from a disk file
            containing <b>RTF</b>-formatted data.
            </summary>
            <param name="fileName">The name of the file to load.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.Load(System.String,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
            Loads the content of the current <see cref="T:C1.C1PreviewClient.RenderRichText"/> from a disk file
            containing data in a specified format.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <param name="streamType">The type of data in the file.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.Load(System.IO.Stream)">
            <summary>
            Loads the content of the current <see cref="T:C1.C1PreviewClient.RenderRichText"/> from a stream
            containing <b>RTF</b>-formatted data.
            </summary>
            <param name="stream">The stream to load data from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRichText.Load(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
            Loads the content of the current <see cref="T:C1.C1PreviewClient.RenderRichText"/> from a stream
            containing data in a specified format.
            </summary>
            <param name="stream">The stream to load data from.</param>
            <param name="streamType">The type of data in the stream.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderRichText.HasRtf">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.C1PreviewClient.RenderRichText.Rtf"/> property
            has been initialized and has non-zero length.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderRichText.Rtf">
            <summary>
            Gets or sets the <b>RTF</b>-formatted text represented by the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderRichText.DetectUrls">
            <summary>
            Gets or sets a value indicating whether or not the current <see cref="T:C1.C1PreviewClient.RenderRichText"/>
            will automatically format Uniform Resource Locators (URLs) 
            when those are found in text assigned to the <see cref="P:C1.C1PreviewClient.RenderRichText.Rtf"/> property.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ShapeProps">
            <summary>
            The abstract base class representing the geometric properties of a shape.
            Used by <see cref="T:C1.C1PreviewClient.RenderShapeBase"/> and derived classes.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ShapeProps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ShapeProps"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ShapeProps.CheckCoord(C1.C1PreviewClient.LengthBase,System.Type[])">
            <summary>
            For internal use only.
            </summary>
            <param name="coord"></param>
            <param name="possibleTypes"></param>
        </member>
        <member name="M:C1.C1PreviewClient.ShapeProps.AssignFrom(C1.C1PreviewClient.ShapeProps)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ShapeProps"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="T:C1.C1PreviewClient.RenderShapeBase">
            <summary>
            The abstract base class for classes representing geometric shapes (lines, polygons and so on)
            in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.RenderLineBase"/>
            <seealso cref="T:C1.C1PreviewClient.RenderLine"/>
            <seealso cref="T:C1.C1PreviewClient.RenderPolygon"/>
            <seealso cref="T:C1.C1PreviewClient.RenderRectangle"/>
            <seealso cref="T:C1.C1PreviewClient.RenderEllipse"/>
            <seealso cref="T:C1.C1PreviewClient.RenderPie"/>
            <seealso cref="T:C1.C1PreviewClient.RenderArc"/>
            <seealso cref="T:C1.C1PreviewClient.RenderRoundRectangle"/>
        </member>
        <member name="M:C1.C1PreviewClient.RenderShapeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderShapeBase"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderShapeBase.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderShapeBase.CreateProps">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderShapeBase.InitRenderObject">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderShapeBase.GetDefaultClip">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderShapeBase.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderShapeBase"/>, also copies <see cref="T:C1.C1PreviewClient.RenderShapeBase"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderShapeBase.Shape">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.ShapeProps"/> object describing the geometric shape
            represented by the current <see cref="T:C1.C1PreviewClient.RenderShapeBase"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LinePropsBase">
            <summary>
            The abstract base class representing the geometric properties of a line shape.
            Used by <see cref="T:C1.C1PreviewClient.RenderLineBase"/> and derived classes.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LinePropsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LinePropsBase"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LinePropsBase.AssignFrom(C1.C1PreviewClient.ShapeProps)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ShapeProps"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="T:C1.C1PreviewClient.RenderLineBase">
            <summary>
            The abstract base class for classes representing line-based shapes (lines and polygons)
            in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.RenderLine"/>
            <seealso cref="T:C1.C1PreviewClient.RenderPolygon"/>
        </member>
        <member name="M:C1.C1PreviewClient.RenderLineBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderLineBase"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderLineBase.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderLineBase.Line">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.LinePropsBase"/> object describing the geometric line
            represented by the current <see cref="T:C1.C1PreviewClient.RenderLineBase"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LineProps">
            <summary>
            Represents the geometric properties of a <see cref="T:C1.C1PreviewClient.RenderLine"/> object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LineProps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LineProps"/> class.
            The points that this line connects are set to the left top and right bottom
            corners of the containing <see cref="T:C1.C1PreviewClient.RenderLine"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineProps.X1">
            <summary>
            Gets or sets the <b>X</b> coordinate of the first of the two points that the line connects.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineProps.Y1">
            <summary>
            Gets or sets the <b>Y</b> coordinate of the first of the two points that the line connects.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineProps.X2">
            <summary>
            Gets or sets the <b>X</b> coordinate of the second of the two points that the line connects.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineProps.Y2">
            <summary>
            Gets or sets the <b>Y</b> coordinate of the second of the two points that the line connects.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderLine">
            <summary>
            Represents a line shape in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderLine"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderLine.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderLine"/> class,
            assigning the coordinates of the two points that the line connects.
            </summary>
            <param name="x1">The <b>X</b> coordinate of the first of the two points that the line connects.</param>
            <param name="y1">The <b>Y</b> coordinate of the first of the two points that the line connects.</param>
            <param name="x2">The <b>X</b> coordinate of the second of the two points that the line connects.</param>
            <param name="y2">The <b>Y</b> coordinate of the second of the two points that the line connects.</param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderLine.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderLine.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderLine.CreateProps">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderLine.Line">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.LineProps"/> object describing the geometric line
            represented by the current <see cref="T:C1.C1PreviewClient.RenderLine"/> object.
            The coordinates of the line are relative to the left top corner
            of the current <see cref="T:C1.C1PreviewClient.RenderLine"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PolygonProps">
            <summary>
            Represents the geometric properties of a <see cref="T:C1.C1PreviewClient.RenderPolygon"/> object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PolygonProps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.PolygonProps"/> class.
            The <see cref="P:C1.C1PreviewClient.PolygonProps.Points"/> property is set to <b>null</b>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.PolygonProps.AssignFrom(C1.C1PreviewClient.ShapeProps)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ShapeProps"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.PolygonProps.Points">
            <summary>
            Gets or sets the array of <see cref="T:C1.C1PreviewClient.UnitPoint"/> points
            defining the polygon.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.PolygonProps.Closed">
            <summary>
            Gets or sets a value indicating whether the polygon is closed
            (i.e. the last point in the <see cref="P:C1.C1PreviewClient.PolygonProps.Points"/> array is automatically connected to the first one)
            or not.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderPolygon">
            <summary>
            Represents an open or closed polygon shape in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPolygon"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPolygon.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPolygon.CreateProps">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderPolygon.Line">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.PolygonProps"/> object describing the geometric polygon
            represented by the current <see cref="T:C1.C1PreviewClient.RenderPolygon"/> object.
            The points' coordinates are relative to the left top corner
            of the current <see cref="T:C1.C1PreviewClient.RenderPolygon"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RectangleProps">
            <summary>
            Represents the geometric properties of a rectangle,
            also serves as the base for classes describing
            certain other shapes (such as round rectangle, arc and pie).
            Used by <see cref="T:C1.C1PreviewClient.RenderRectangle"/> and derived classes.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.RectangleProps.s_PossibleLengthTypes">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RectangleProps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RectangleProps"/> class.
            The location and size of the rectangle are set to those of the containing
            <see cref="T:C1.C1PreviewClient.RenderRectangle"/> object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RectangleProps.AssignFrom(C1.C1PreviewClient.ShapeProps)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ShapeProps"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RectangleProps.X">
            <summary>
            Gets or sets the <b>X</b> coordinate of the current rectangle.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RectangleProps.Y">
            <summary>
            Gets or sets the <b>Y</b> coordinate of the current rectangle.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RectangleProps.Width">
            <summary>
            Gets or sets the width of the current rectangle.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RectangleProps.Height">
            <summary>
            Gets or sets the height of the current rectangle.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderRectangle">
            <summary>
            Represents a rectangle in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            This is also the base class for <see cref="T:C1.C1PreviewClient.RenderEllipse"/> and <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> classes.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class.
            The location and size of the rectangle are set to those of the current <see cref="T:C1.C1PreviewClient.RenderRectangle"/> object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class,
            assigning the width and height of the rectangle.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderRectangle"/>.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class,
            assigning the width and height of the rectangle, and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderRectangle"/>.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class,
            assigning the width and height of the rectangle, the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill color.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderRectangle"/>.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillColor">The color used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class,
            assigning the width and height of the rectangle, the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill brush.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderRectangle"/>.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class,
            assigning the location and the size of the rectangle.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class,
            assigning the location and the size of the rectangle,
            and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class,
            assigning the location and the size of the rectangle,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill color.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillColor">The color used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRectangle"/> class,
            assigning the location and the size of the rectangle,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill brush.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRectangle.CreateProps">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderRectangle.Rectangle">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RectangleProps"/> object describing the geometric rectangle
            represented by the current <see cref="T:C1.C1PreviewClient.RenderRectangle"/> object.
            The coordinates of the rectangle are relative to the left top corner
            of the current <see cref="T:C1.C1PreviewClient.RenderRectangle"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderEllipse">
            <summary>
            Represents an ellipse in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class.
            The location and size of the ellipse are set to those of the current <see cref="T:C1.C1PreviewClient.RenderEllipse"/> object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class,
            assigning the width and height of the ellipse.
            The location of the ellipse is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderEllipse"/>.
            </summary>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class,
            assigning the width and height of the ellipse, and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it.
            The location of the ellipse is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderEllipse"/>.
            </summary>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the ellipse.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class,
            assigning the width and height of the ellipse, the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill color.
            The location of the ellipse is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderEllipse"/>.
            </summary>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the ellipse.</param>
            <param name="shapeFillColor">The fill color.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class,
            assigning the width and height of the ellipse, the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill brush.
            The location of the ellipse is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderEllipse"/>.
            </summary>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the ellipse.</param>
            <param name="shapeFillBrush">The fill brush.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class,
            assigning the location and the size of the ellipse.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse.</param>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class,
            assigning the location and the size of the ellipse, and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse.</param>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the ellipse.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class,
            assigning the location and the size of the ellipse, the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill color.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse.</param>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the ellipse.</param>
            <param name="shapeFillColor">The fill color.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderEllipse"/> class,
            assigning the location and the size of the ellipse, the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill brush.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse.</param>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the ellipse.</param>
            <param name="shapeFillBrush">The fill brush.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderEllipse.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderEllipse.Ellipse">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RectangleProps"/> object describing the geometric ellipse
            represented by the current <see cref="T:C1.C1PreviewClient.RenderEllipse"/> object.
            The coordinates of the ellipse are relative to the left top corner
            of the current <see cref="T:C1.C1PreviewClient.RenderEllipse"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.EllipsePartProps">
            <summary>
            Represents the geometric properties of a pie.
            Used by <see cref="T:C1.C1PreviewClient.RenderPie"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.EllipsePartProps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.EllipsePartProps"/> class.
            <see cref="P:C1.C1PreviewClient.EllipsePartProps.StartAngle"/> is set to 0, while <see cref="P:C1.C1PreviewClient.EllipsePartProps.SweepAngle"/> is set to 360 degrees,
            thus making this a complete ellipse.
            The location and size of the ellipse are set to those of the containing object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.EllipsePartProps.AssignFrom(C1.C1PreviewClient.ShapeProps)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ShapeProps"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.EllipsePartProps.StartAngle">
            <summary>
            Gets or sets the angle, measured in degrees, clockwise from the <b>X</b> axis
            to the first side of the sector defining the current shape.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.EllipsePartProps.SweepAngle">
            <summary>
            Gets or sets the angle, measured in degrees, clockwise from <see cref="P:C1.C1PreviewClient.EllipsePartProps.StartAngle"/>
            to the second side of the sector defining the current shape.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderPie">
            <summary>
            Represents a pie shape (a closed shape consisting of an arc of an ellipse,
            with lines going from the start and end points of the arc to the ellipse's center)
            in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class.
            The start angle of the pie is set to 0, while the sweep angle is set to 360 degrees,
            thus making it a complete ellipse.
            The location and size of the ellipse are set to those of the current <see cref="T:C1.C1PreviewClient.RenderPie"/> object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class,
            assigning the width, height, and start and sweep angles of the pie shape.
            The location of the shape is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderPie"/>.
            </summary>
            <param name="width">The width of the ellipse containing the pie shape.</param>
            <param name="height">The height of the ellipse containing the pie shape.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the pie's arc.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class,
            assigning the width, height, start and sweep angles of the pie shape,
            and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the shape.
            The location of the shape is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderPie"/>.
            </summary>
            <param name="width">The width of the ellipse containing the pie shape.</param>
            <param name="height">The height of the ellipse containing the pie shape.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the pie's arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the pie shape.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class,
            assigning the width, height, start and sweep angles of the pie shape,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the shape, and the fill color.
            The location of the shape is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderPie"/>.
            </summary>
            <param name="width">The width of the ellipse containing the pie shape.</param>
            <param name="height">The height of the ellipse containing the pie shape.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the pie's arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the pie shape.</param>
            <param name="shapeFillColor">The shape fill color.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class,
            assigning the width, height, start and sweep angles of the pie shape,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the shape, and the fill brush.
            The location of the shape is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderPie"/>.
            </summary>
            <param name="width">The width of the ellipse containing the pie shape.</param>
            <param name="height">The height of the ellipse containing the pie shape.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the pie's arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the pie shape.</param>
            <param name="shapeFillBrush">The shape fill brush.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class,
            assigning the location, size, and start and sweep angles of the pie shape.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse containing the pie shape.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse containing the pie shape.</param>
            <param name="width">The width of the ellipse containing the pie shape.</param>
            <param name="height">The height of the ellipse containing the pie shape.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the pie's arc.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class,
            assigning the location, size, start and sweep angles of the pie shape,
            and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the shape.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse containing the pie shape.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse containing the pie shape.</param>
            <param name="width">The width of the ellipse containing the pie shape.</param>
            <param name="height">The height of the ellipse containing the pie shape.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the pie's arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the pie shape.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class,
            assigning the location, size, start and sweep angles of the pie shape,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the shape, and the fill color.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse containing the pie shape.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse containing the pie shape.</param>
            <param name="width">The width of the ellipse containing the pie shape.</param>
            <param name="height">The height of the ellipse containing the pie shape.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the pie's arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the pie shape.</param>
            <param name="shapeFillColor">The shape fill color.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderPie"/> class,
            assigning the location, size, start and sweep angles of the pie shape,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the shape, and the fill brush.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse containing the pie shape.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse containing the pie shape.</param>
            <param name="width">The width of the ellipse containing the pie shape.</param>
            <param name="height">The height of the ellipse containing the pie shape.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the pie's arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the pie's arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the pie shape.</param>
            <param name="shapeFillBrush">The shape fill brush.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderPie.CreateProps">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderPie.Pie">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.EllipsePartProps"/> object describing the pie shape
            represented by the current <see cref="T:C1.C1PreviewClient.RenderPie"/> object.
            The coordinates of the ellipse containing the pie shape are relative to the left top corner
            of the current <see cref="T:C1.C1PreviewClient.RenderPie"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ArcProps">
            <summary>
            Represents the geometric properties of an arc.
            Used by <see cref="T:C1.C1PreviewClient.RenderArc"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ArcProps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ArcProps"/> class.
            <see cref="P:C1.C1PreviewClient.ArcProps.Closed"/> is set to false.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ArcProps.AssignFrom(C1.C1PreviewClient.ShapeProps)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ShapeProps"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.ArcProps.Closed">
            <summary>
            Gets or sets a value indicating whether the current arc should be closed
            (i.e. the start and end points of the arc should be connected by a straight line)
            or not.
            </summary>
            <remarks>
            The default value of this property is <b>false</b>.
            </remarks>
        </member>
        <member name="T:C1.C1PreviewClient.RenderArc">
            <summary>
            Represents an arc of an ellipse in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class.
            The start angle of the arc is set to 0, while the sweep angle is set to 360 degrees,
            thus making it a complete ellipse.
            The location and size of the arc's ellipse are set to those of the current <see cref="T:C1.C1PreviewClient.RenderArc"/> object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class,
            assigning the width, height, and start and sweep angles of the arc.
            The location of the arc's ellipse is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderPie"/>.
            </summary>
            <param name="width">The width of the ellipse containing the arc.</param>
            <param name="height">The height of the ellipse containing the arc.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the arc.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class,
            assigning the width, height, start and sweep angles of the arc,
            and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc.
            The location of the arc's ellipse is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderPie"/>.
            </summary>
            <param name="width">The width of the ellipse containing the arc.</param>
            <param name="height">The height of the ellipse containing the arc.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class,
            assigning the width, height, start and sweep angles of the arc,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc,
            and the color used to fill the segment formed by the arc and a line connecting its ends.
            The location of the arc's ellipse is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderPie"/>.
            </summary>
            <param name="width">The width of the ellipse containing the arc.</param>
            <param name="height">The height of the ellipse containing the arc.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc.</param>
            <param name="shapeFillColor">The fill color.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class,
            assigning the width, height, start and sweep angles of the arc,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc,
            and the brush used to fill the segment formed by the arc and a line connecting its ends.
            The location of the arc's ellipse is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderPie"/>.
            </summary>
            <param name="width">The width of the ellipse containing the arc.</param>
            <param name="height">The height of the ellipse containing the arc.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc.</param>
            <param name="shapeFillBrush">The fill brush.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class,
            assigning the location, size, and start and sweep angles of the arc.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse containing the arc.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse containing the arc.</param>
            <param name="width">The width of the ellipse containing the arc.</param>
            <param name="height">The height of the ellipse containing the arc.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the arc.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class,
            assigning the location, size, and start and sweep angles of the arc,
            and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse containing the arc.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse containing the arc.</param>
            <param name="width">The width of the ellipse containing the arc.</param>
            <param name="height">The height of the ellipse containing the arc.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class,
            assigning the location, size, and start and sweep angles of the arc,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc,
            and the color used to fill the segment formed by the arc and a line connecting its ends.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse containing the arc.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse containing the arc.</param>
            <param name="width">The width of the ellipse containing the arc.</param>
            <param name="height">The height of the ellipse containing the arc.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc.</param>
            <param name="shapeFillColor">The fill color.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderArc"/> class,
            assigning the location, size, and start and sweep angles of the arc,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc,
            and the brush used to fill the segment formed by the arc and a line connecting its ends.
            </summary>
            <param name="x">The <b>X</b> coordinate of the ellipse containing the arc.</param>
            <param name="y">The <b>Y</b> coordinate of the ellipse containing the arc.</param>
            <param name="width">The width of the ellipse containing the arc.</param>
            <param name="height">The height of the ellipse containing the arc.</param>
            <param name="startAngle">The angle, in degrees, clockwise from the <b>X</b> axis
            to the start of the arc.</param>
            <param name="sweepAngle">The angle, measured in degrees, clockwise from <paramref name="startAngle"/>
            to the end of the arc.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the arc.</param>
            <param name="shapeFillBrush">The fill brush.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,System.Single,System.Single,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderArc.CreateProps">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderArc.Arc">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.EllipsePartProps"/> object describing the arc
            represented by the current <see cref="T:C1.C1PreviewClient.RenderArc"/> object.
            The coordinates of the ellipse containing the arc are relative to the left top corner
            of the current <see cref="T:C1.C1PreviewClient.RenderArc"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RoundRectangleProps">
            <summary>
            Represents the geometric properties of a rectangle with rounded corners.
            Used by the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RoundRectangleProps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RoundRectangleProps"/> class.
            The location and size of the rectangle are set to those of the containing
            <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> object.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RoundRectangleProps.ShouldSerializeEllipseWidth">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.RoundRectangleProps.EllipseWidth"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.RoundRectangleProps.EllipseWidth"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RoundRectangleProps.ShouldSerializeEllipseHeight">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.RoundRectangleProps.EllipseHeight"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.RoundRectangleProps.EllipseHeight"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RoundRectangleProps.AssignFrom(C1.C1PreviewClient.ShapeProps)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.ShapeProps"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RoundRectangleProps.EllipseWidth">
            <summary>
            Gets or sets the width of the ellipse used to draw the rounded corners of the rectangle.
            The default value of this property is calculated as <b>5%</b> of the width of the rectangle.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RoundRectangleProps.EllipseHeight">
            <summary>
            Gets or sets the height of the ellipse used to draw the rounded corners of the rectangle.
            The default value of this property is calculated as <b>5%</b> of the height of the rectangle.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderRoundRectangle">
            <summary>
            Represents a rectangle with rounded corners in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class.
            The location and size of the rectangle are set to those of the current <see cref="T:C1.C1PreviewClient.RenderRectangle"/> object.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the width and height of the rectangle.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/>.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the width and height of the rectangle, and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/>.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the width and height of the rectangle, the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill color.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/>.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillColor">The color used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the width and height of the rectangle, the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill brush.
            The location of the rectangle is set to the location of the current <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/>.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the location and the size of the rectangle.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the location and the size of the rectangle,
            and the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the location and the size of the rectangle,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill color.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillColor">The color used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the location and the size of the rectangle,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill brush.
            The dimensions of the ellipse used to draw the rounded corners are set
            to <b>5%</b> of the corresponding rectangle's dimensions.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the location, size and roundness of the rectangle,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill color.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="ellipseWidth">The width of the ellipse used to draw the rounded corners (may be specified as <b>"5%width"</b> for example).</param>
            <param name="ellipseHeight">The height of the ellipse used to draw the rounded corners (may be specified as <b>"5%height"</b> for example).</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillColor">The color used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> class,
            assigning the location, size and roundness of the rectangle,
            the <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw it, and the fill brush.
            </summary>
            <param name="x">The <b>X</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="y">The <b>Y</b> coordinate of the rectangle, relative to the current object's location.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="ellipseWidth">The width of the ellipse used to draw the rounded corners (may be specified as <b>"5%width"</b> for example).</param>
            <param name="ellipseHeight">The height of the ellipse used to draw the rounded corners (may be specified as <b>"5%height"</b> for example).</param>
            <param name="shapeLine">The <see cref="T:C1.C1PreviewClient.LineDef"/> used to draw the rectangle.</param>
            <param name="shapeFillBrush">The brush used to fill the rectangle.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="ellipseWidth"></param>
            <param name="ellipseHeight"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.#ctor(C1.C1PreviewClient.C1PrintDocument,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit,C1.C1PreviewClient.LineDef,System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="ellipseWidth"></param>
            <param name="ellipseHeight"></param>
            <param name="shapeLine"></param>
            <param name="shapeFillBrush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderRoundRectangle.CreateProps">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderRoundRectangle.RoundRectangle">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RoundRectangleProps"/> object describing the geometric rectangle
            represented by the current <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> object.
            The coordinates of the rectangle are relative to the left top corner
            of the current <see cref="T:C1.C1PreviewClient.RenderRoundRectangle"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ThreeStateEnum">
            <summary>
            Defines a value which can be in one of three states: <b>undefined</b>, <b>true</b> or <b>false</b>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ThreeStateEnum.Undefined">
            <summary>
            The value is <b>undefined</b>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ThreeStateEnum.True">
            <summary>
            The value is <b>true</b>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ThreeStateEnum.False">
            <summary>
            The value is <b>false</b>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TableSizingModeEnum">
            <summary>
            Enumerates the sizing modes of a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableSizingModeEnum.Default">
            <summary>
            At table level, default is <see cref="F:C1.C1PreviewClient.TableSizingModeEnum.Auto"/> for rows,
            and <see cref="F:C1.C1PreviewClient.TableSizingModeEnum.Fixed"/> for columns;
            at row/column level, default inherits from the table.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableSizingModeEnum.Fixed">
            <summary>
            Size (height for rows, width for columns) should be explicitly
            specified (if omitted, it is determined by the available space
            and row/column count).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableSizingModeEnum.Auto">
            <summary>
            Size (height for rows, width for columns) is calculated
            automatically based on the content.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.CellSplitBehaviorEnum">
            <summary>
            Enumerates the possible handling of a <see cref="T:C1.C1PreviewClient.RenderTable"/> cell's content
            when the cell is split between pages.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.CellSplitBehaviorEnum.Split">
            <summary>
            The content of a cell should be split if the cell is split.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.CellSplitBehaviorEnum.Copy">
            <summary>
            The content of a cell should be copied each time the cell is split.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.CellSplitBehaviorEnum.Cut">
            <summary>
            The content of a cell should be printed just once,
            and cut if the cell is split and not all content fits.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.PageBreakBehaviorEnum">
            <summary>
            Enumerates page break options available for elements of a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageBreakBehaviorEnum.Default">
            <summary>
            A page break may be inserted if needed.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageBreakBehaviorEnum.MustBreak">
            <summary>
            A page break is always inserted.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageBreakBehaviorEnum.PreferredBreak">
            <summary>
            If a page break is needed, it should be inserted here.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageBreakBehaviorEnum.PrefferedBreak">
            <summary>
            Obsolete (spelling error), use <see cref="F:C1.C1PreviewClient.PageBreakBehaviorEnum.PreferredBreak"/> instead.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.PageBreakBehaviorEnum.NoBreak">
            <summary>
            A page break can not be inserted.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TableVector">
            <summary>
            The abstract base class for rows and columns of a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.TableRow"/>
            <seealso cref="T:C1.C1PreviewClient.TableCol"/>
        </member>
        <member name="M:C1.C1PreviewClient.TableVector.ShouldSerializeSize">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.TableVector.Size"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.TableVector.Size"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVector.ShouldSerializeStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.TableVector.Style"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.TableVector.Style"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVector.ShouldSerializeCellStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.TableVector.CellStyle"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.TableVector.CellStyle"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVector.AssignFrom(C1.C1PreviewClient.TableVector)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TableVector"/> to the current object.
            (The <see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/> property is not copied.)
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableVectorCollection"/> object containing the current vector.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.Table">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderTable"/> object containing the current vector.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.Ordinal">
            <summary>
            Gets the 0-based index of the current vector in the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>
            (i.e. the row index for rows, the column index for columns).
            </summary>
            <remarks>
            In <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> tables, elements (cells, rows and columns)
            are physically created only if they contain data, or if their style differs from default.
            Hence the physical position of a <see cref="T:C1.C1PreviewClient.TableVector"/> object (i.e. a row or a column)
            in the containing <see cref="T:C1.C1PreviewClient.TableVectorCollection"/> (accessible via the vector's
            <see cref="P:C1.C1PreviewClient.TableVector.Owner"/> property) is not the same as the logical index of that row or column
            in the table. The <b>Ordinal</b> property allows to retrieve that logical position.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.Number">
            <summary>
            Obsolete, use <see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/> instead.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.Size">
            <summary>
            Gets or sets the size of the current vector
            (height if the vector is a <see cref="T:C1.C1PreviewClient.TableRow"/>,
            width if the vector is a <see cref="T:C1.C1PreviewClient.TableCol"/>).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.PageBreakBehavior">
            <summary>
            Gets or sets a value determining how page breaks are inserted before
            the current vector
            (regular, horizontal page breaks if the vector is a <see cref="T:C1.C1PreviewClient.TableRow"/>,
            vertical page breaks if the vector is a <see cref="T:C1.C1PreviewClient.TableCol"/>).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.CanSplit">
            <summary>
            Gets or sets a value indicating whether the current vector
            (row or column) can split between pages.
            The default value is <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.Visible">
            <summary>
            Gets or sets a value indicating whether the current vector
            (row or column) is visible.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.Style">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> of the current vector (row or column).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.CellStyle">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> of objects contained in the cells
            of the current vector (row or column).
            See <see cref="P:C1.C1PreviewClient.TableCell.CellStyle"/> for details.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVector.SizingMode">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.TableSizingModeEnum"/> value determining
            how the size of the current vector (height for rows, width for columns)
            is calculated.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.StretchRowEnum">
            <summary>
            Describes how the height of a row in a <see cref="T:C1.C1PreviewClient.RenderTable"/>
            can be adjusted if required by adjustments to the height of the
            containing table.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchRowEnum.Default">
            <summary>
            The behavior depends on the <see cref="P:C1.C1PreviewClient.RenderTable.StretchRows"/> property
            of the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchRowEnum.Yes">
            <summary>
            The row can be stretched as needed.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchRowEnum.No">
            <summary>
            The row can not be stretched.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchRowEnum.IfLastOnPage">
            <summary>
            The row can be stretched if it is the last row on the page.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TableRow">
            <summary>
            Represents a row of a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.TableCol"/>
            <seealso cref="T:C1.C1PreviewClient.TableCell"/>
        </member>
        <member name="M:C1.C1PreviewClient.TableRow.AssignFrom(C1.C1PreviewClient.TableVector)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TableVector"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TableRow.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableRowCollection"/> containing the current row.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableRow.Height">
            <summary>
            Gets or sets the height of the current row.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableRow.Stretch">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.StretchRowEnum"/> mode of the current row.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableRow.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableCell"/> at the specified column index.
            This property always returns a non-<b>null</b> <see cref="T:C1.C1PreviewClient.TableCell"/> object.
            </summary>
            <param name="col">The index of the cell in the current row (i.e. the column index).</param>
            <returns>The cell at the specified index.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.StretchColumnEnum">
            <summary>
            Describes how the width of a column in a <see cref="T:C1.C1PreviewClient.RenderTable"/>
            can be adjusted if required by adjustments to the width of the
            containing table.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchColumnEnum.Default">
            <summary>
            The behavior depends on the <see cref="P:C1.C1PreviewClient.RenderTable.StretchColumns"/> property
            of the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchColumnEnum.Yes">
            <summary>
            The column can be stretched as needed.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchColumnEnum.No">
            <summary>
            The column can not be stretched.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchColumnEnum.IfLastOnPage">
            <summary>
            The column can be stretched if it is the last row on the page.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TableCol">
            <summary>
            Represents a column of a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.TableRow"/>
            <seealso cref="T:C1.C1PreviewClient.TableCell"/>
        </member>
        <member name="M:C1.C1PreviewClient.TableCol.AssignFrom(C1.C1PreviewClient.TableVector)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TableVector"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TableCol.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableColCollection"/> containing the current column.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCol.Width">
            <summary>
            Gets or sets the width of the current column.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCol.Stretch">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.StretchColumnEnum"/> mode of the current column.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCol.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableCell"/> at the specified row index. 
            This property always returns a non-<b>null</b> <see cref="T:C1.C1PreviewClient.TableCell"/> object.
            </summary>
            <param name="row">The index of the cell in the current column (i.e. the row index).</param>
            <returns>The cell at the specified index.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TableVectorCollection">
            <summary>
            The abstract base class representing a collection of <see cref="T:C1.C1PreviewClient.TableVector"/> objects.
            This is the base class for collections of table rows and columns,
            accessible as <see cref="P:C1.C1PreviewClient.RenderTable.Rows"/> and <see cref="P:C1.C1PreviewClient.RenderTable.Cols"/>
            on a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.TableRowCollection"/>
            <seealso cref="T:C1.C1PreviewClient.TableColCollection"/>
            <seealso cref="T:C1.C1PreviewClient.RenderTable"/>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.DeleteCells(System.Int32,System.Int32)">
            <summary>
            Deletes the contents of all cells in a range of rows or columns in the current collection.
            </summary>
            <param name="ordinal">The <see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/> of the first row or column in the range.</param>
            <param name="count">The number of rows or columns in the range.</param>
            <remarks>
            This method physically removes all cell data and custom styles in the specified range.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.DeleteUserCellGroups(System.Int32,System.Int32)">
            <summary>
            Deletes any user cell groups in a range of rows or columns in the current collection.
            </summary>
            <param name="ordinal">The <see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/> of the first row or column in the range.</param>
            <param name="count">The number of rows or columns in the range.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.InsertCells(System.Int32,System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.InsertUserCellGroups(System.Int32,System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetMaxCell">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetMaxUserCellGroup">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.CreateVector(System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetDefaultSizingMode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetMaxVectorOrdinal">
            <summary>
            Returns the vector with maximum ordinal or -1 if collection does not contains vectors.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.FindVector(System.Int32)">
            <summary>
            For internal use.
            Returns the specified vector if it has been accessed (and hence initialized) already,
            or <b>null</b>.
            </summary>
            <param name="ordinal">The ordinal of the vector to get.</param>
            <returns>The specified vector, or <b>null</b> if it has not been initialized.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetVectorSize(System.Int32)">
            <summary>
            Returns the size (height for rows, width for columns) of a <see cref="T:C1.C1PreviewClient.TableVector"/>
            (row or column) identified by its index in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            This method does not create the specified vector if it has not been initialized
            (see <b>remarks</b> for details).
            </summary>
            <param name="index">The 0-based index (<see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/>) of the row or column.</param>
            <returns>The height or width of the row or column.</returns>
            <remarks>
            <para>
            Because elements of a <see cref="T:C1.C1PreviewClient.RenderTable"/>'s collections (cells, rows and columns)
            are physically created "on demand" only when they are accessed via collections'
            indexer properties, using this method is more efficient when you only need
            to test the height/width of a row/column without creating it.
            </para>
            <para>
            For instance, the following code physically creates a <see cref="T:C1.C1PreviewClient.TableRow"/> object
            before testing its height:
            </para>
            <code>
              RenderTable rt = new RenderTable();
              if (rt.Rows[10].Height == Unit.Auto)
                doSomething();
            </code>
            At the same time, the following code does not cause a physical row object to be created,
            while being functionally identical to the code above:
            <code>
              RenderTable rt = new RenderTable();
              if (rt.Rows.GetVectorSize(10) == Unit.Auto)
                doSomething();
            </code>
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetVectorCanSplit(System.Int32)">
            <summary>
            Returns the value of the <see cref="P:C1.C1PreviewClient.TableVector.CanSplit"/> property of a <see cref="T:C1.C1PreviewClient.TableVector"/>
            (row or column) identified by its index in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            This method does not create the specified vector if it has not been initialized yet
            (see <b>remarks</b> in <see cref="M:C1.C1PreviewClient.TableVectorCollection.GetVectorSize(System.Int32)"/> for details).
            </summary>
            <param name="index">The 0-based index (<see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/>) of the row or column.</param>
            <returns>The value of the specified vector's <see cref="P:C1.C1PreviewClient.TableVector.CanSplit"/> property,
            or <b>false</b> if the vector has not been initialized.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetVectorVisible(System.Int32)">
            <summary>
            Returns the value of the <see cref="P:C1.C1PreviewClient.TableVector.Visible"/> property of a <see cref="T:C1.C1PreviewClient.TableVector"/>
            (row or column) identified by its index in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            This method does not create the specified vector if it has not been initialized yet
            (see <b>remarks</b> in <see cref="M:C1.C1PreviewClient.TableVectorCollection.GetVectorSize(System.Int32)"/> for details).
            </summary>
            <param name="index">The 0-based index (<see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/>) of the row or column.</param>
            <returns>The value of the specified vector's <see cref="P:C1.C1PreviewClient.TableVector.Visible"/> property,
            or <b>true</b> if the vector has not been initialized.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetVectorPageBreakBehavior(System.Int32)">
            <summary>
            Returns the value of the <see cref="P:C1.C1PreviewClient.TableVector.PageBreakBehavior"/> property of a <see cref="T:C1.C1PreviewClient.TableVector"/>
            (row or column) identified by its index in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            This method does not create the specified vector if it has not been initialized yet
            (see <b>remarks</b> in <see cref="M:C1.C1PreviewClient.TableVectorCollection.GetVectorSize(System.Int32)"/> for details).
            </summary>
            <param name="index">The 0-based index (<see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/>) of the row or column.</param>
            <returns>The value of the specified vector's <see cref="P:C1.C1PreviewClient.TableVector.PageBreakBehavior"/> property,
            or <see cref="F:C1.C1PreviewClient.PageBreakBehaviorEnum.Default"/> if the vector has not been initialized.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.GetVectorSizingMode(System.Int32)">
            <summary>
            Returns the effective <see cref="T:C1.C1PreviewClient.TableSizingModeEnum"/> of a <see cref="T:C1.C1PreviewClient.TableVector"/>
            (row or column) identified by its index in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            This method does not create the specified vector if it has not been initialized yet
            (see <b>remarks</b> in <see cref="M:C1.C1PreviewClient.TableVectorCollection.GetVectorSize(System.Int32)"/> for details).
            </summary>
            <param name="index">The 0-based index (<see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/>) of the row or column.</param>
            <returns>The effective sizing mode of the specified vector (row or column).</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.AssignFrom(C1.C1PreviewClient.TableVectorCollection)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TableVectorCollection"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts a range of rows or columns into the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <param name="position">The position where to insert rows or columns.</param>
            <param name="count">The number of rows or columns to insert.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes a range of rows or columns from the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <param name="position">The index of the first row or column to delete.</param>
            <param name="count">The number of rows or columns to delete.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.Delete(System.Int32)">
            <summary>
            Deletes a row or column from the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <param name="position">The index of the row or column to delete.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorCollection.Insert(System.Int32)">
            <summary>
            Inserts a row or column into the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <param name="position">The position where to insert the row or column.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorCollection.Cells">
            <summary>
            Gets the containing table's <see cref="P:C1.C1PreviewClient.RenderTable.Cells"/> collection.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorCollection.UserGroups">
            <summary>
            Gets the containing table's <see cref="P:C1.C1PreviewClient.RenderTable.UserCellGroups"/> collection.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorCollection.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderTable"/> object containing the current collection.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorCollection.Groups">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableVectorGroupCollection"/> object representing
            the groups of vectors (rows or columns) defined on the current collection.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorCollection.Count">
            <summary>
            Gets or sets the logical count of vectors (rows or columns) in the current collection.
            Setting this property to <b>-1</b> (which is the default) ensures that <b>Count</b>
            is calculated automatically.
            </summary>
            <remarks>
            <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> tables are logically infinite. Simply accessing an element
            at any position expands the table to include that position. Hence by default the <b>Count</b>
            property returns the maximum row or column number that has been accessed so far.
            Assigning a non-negative value to this property allows to increase or decrease the number of rows or columns
            (if the number of vectors is decreased, elements with greater indices are cleared).
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorCollection.VectorCount">
            <summary>
            Gets the physical count of vectors (rows or columns)
            currently stored in this <see cref="T:C1.C1PreviewClient.TableVectorCollection"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TableRowCollection">
            <summary>
            Represents a collection of rows (objects of the <see cref="T:C1.C1PreviewClient.TableRow"/> type)
            in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.DeleteCells(System.Int32,System.Int32)">
            <summary>
            For internal  use only.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.DeleteUserCellGroups(System.Int32,System.Int32)">
            <summary>
            For internal  use only.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.GetMaxCell">
            <summary>
            For internal  use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.GetMaxUserCellGroup">
            <summary>
            For internal  use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.CreateVector(System.Int32)">
            <summary>
            For internal  use only.
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.InsertCells(System.Int32,System.Int32)">
            <summary>
            For internal  use only.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.InsertUserCellGroups(System.Int32,System.Int32)">
            <summary>
            For internal  use only.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.GetDefaultSizingMode">
            <summary>
            For internal  use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableRowCollection.FindRow(System.Int32)">
            <summary>
            Returns the <see cref="T:C1.C1PreviewClient.TableRow"/> with the specified index
            (the <see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/> of the row),
            or <b>null</b> if that <see cref="T:C1.C1PreviewClient.TableRow"/> object
            has not been initialized.
            </summary>
            <param name="index">The 0-based index of the row in the containing table.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.TableRow"/> object or <b>null</b>.</returns>
            <remarks>
            Physically, rows in a <see cref="T:C1.C1PreviewClient.RenderTable"/> are created
            when they are accessed using the indexer property on the
            <see cref="P:C1.C1PreviewClient.RenderTable.Rows"/> collection. This method may be used
            to test whether a physical <see cref="T:C1.C1PreviewClient.TableRow"/> object exists
            for a particular row index.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.TableRowCollection.Groups">
            <summary>
            Gets the collection of row groups defined on the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableRowCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableRow"/> object corresponding to the row
            at the specified index in the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            Note that a <see cref="T:C1.C1PreviewClient.TableRow"/> will be created if it has not been
            initialized for that row index yet.
            Use <see cref="M:C1.C1PreviewClient.TableRowCollection.FindRow(System.Int32)"/> to get a row without creating it.
            </summary>
            <param name="index">The row index in the containing table.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.TableRow"/> at the specified index in the table.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TableColCollection">
            <summary>
            Represents a collection of columns (objects of the <see cref="T:C1.C1PreviewClient.TableCol"/> type)
            in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.DeleteCells(System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.DeleteUserCellGroups(System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.GetMaxCell">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.GetMaxUserCellGroup">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.CreateVector(System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.InsertCells(System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.InsertUserCellGroups(System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="ordinal"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.GetDefaultSizingMode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableColCollection.FindCol(System.Int32)">
            <summary>
            Returns the <see cref="T:C1.C1PreviewClient.TableCol"/> with the specified index
            (the <see cref="P:C1.C1PreviewClient.TableVector.Ordinal"/> of the column),
            or <b>null</b> if that <see cref="T:C1.C1PreviewClient.TableCol"/> object
            has not been initialized.
            </summary>
            <param name="index">The 0-based index of the column in the containing table.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.TableCol"/> object or <b>null</b>.</returns>
            <remarks>
            Physically, columns in a <see cref="T:C1.C1PreviewClient.RenderTable"/> are created
            when they are accessed using the indexer property on the
            <see cref="P:C1.C1PreviewClient.RenderTable.Cols"/> collection. This method may be used
            to test whether a physical <see cref="T:C1.C1PreviewClient.TableCol"/> object exists
            for a particular column index.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.TableColCollection.Groups">
            <summary>
            Gets the collection of column groups defined on the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableColCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableCol"/> object corresponding to the column
            at the specified index in the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            Note that a <see cref="T:C1.C1PreviewClient.TableCol"/> will be created if it has not been
            initialized for that column index yet.
            Use <see cref="M:C1.C1PreviewClient.TableColCollection.FindCol(System.Int32)"/> to get a column without creating it.
            </summary>
            <param name="index">The column index in the containing table.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.TableCol"/> at the specified index in the table.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TableCell">
            <summary>
            Represents a cell in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.TableRow"/>
            <seealso cref="T:C1.C1PreviewClient.TableCol"/>
        </member>
        <member name="M:C1.C1PreviewClient.TableCell.ShouldSerializeSplitVertBehavior">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableCell.ShouldSerializeSplitHorzBehavior">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableCell.ShouldSerializeStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.TableCell.Style"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.TableCell.Style"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableCell.ShouldSerializeCellStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.TableCell.CellStyle"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.TableCell.CellStyle"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableCell.AssignFrom(C1.C1PreviewClient.TableCell)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TableCell"/> to the current object.
            The <see cref="P:C1.C1PreviewClient.TableCell.Row"/> and <see cref="P:C1.C1PreviewClient.TableCell.Col"/> properties
            are not copied.
            A "deep" copy of the <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> is made, i.e. a copy
            of the <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> is created and assigned to the
            newly created cell's <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> property.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TableCell.IsVisible">
            <summary>
            Determines whether the current cell is visible in the containing table.
            A cell is visible if it spans at least one visible row and column
            (see <see cref="P:C1.C1PreviewClient.TableVector.Visible"/>).
            </summary>
            <returns><b>true</b> if the current cell is visible, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Tag">
            <summary>
            Gets or sets arbitrary data associated with the current cell.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableCellCollection"/> containing the current cell.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Table">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderTable"/> containing the current cell.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Row">
            <summary>
            Gets the 0-based index in the table of the row containing the current cell.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.RenderTable.Rows"/>
            <seealso cref="T:C1.C1PreviewClient.TableRow"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Col">
            <summary>
            Gets the 0-based index in the table of the column containing the current cell.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.RenderTable.Cols"/>
            <seealso cref="T:C1.C1PreviewClient.TableCol"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.RowNo">
            <summary>
            Obsolete, use Row instead.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.ColNo">
            <summary>
            Obsolete, use Col instead.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.SpanCols">
            <summary>
            Gets or sets the number of columns spanned by the current cell.
            Cannot be less than <b>1</b>, which is the default.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.SpanRows">
            <summary>
            Gets or sets the number of rows spanned by the current cell.
            Cannot be less than <b>1</b>, which is the default.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.LastCol">
            <summary>
            Gets the index of the last column spanned by the current cell.
            If <see cref="P:C1.C1PreviewClient.TableCell.SpanCols"/> is <b>1</b>, the value of this property is equal to <see cref="P:C1.C1PreviewClient.TableCell.Col"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.LastRow">
            <summary>
            Gets the index of the last row spanned by the current cell.
            If <see cref="P:C1.C1PreviewClient.TableCell.SpanRows"/> is <b>1</b>, the value of this property is equal to <see cref="P:C1.C1PreviewClient.TableCell.Row"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.RenderObject">
            <summary>
            Gets or sets the <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> contained in the current cell.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Text"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Image"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Text">
            <summary>
            Gets or sets the text contained in the current cell.
            </summary>
            <remarks>
            <para>
            Setting this property checks the current value of the <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> property.
            If it is a <see cref="T:C1.C1PreviewClient.RenderText"/>, the <paramref name="value"/> is assigned to that object's
            <see cref="P:C1.C1PreviewClient.RenderText.Text"/>.
            </para>
            <para>
            Otherwise, a new <see cref="T:C1.C1PreviewClient.RenderText"/> initialized with <paramref name="value"/>
            is created and assigned to <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/>.
            Note that properties from the old <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> are copied
            to the newly created <see cref="T:C1.C1PreviewClient.RenderText"/> using the
            <see cref="!:C1.C1Preview.RenderObject.AssignFrom(RenderObject)"/> method.
            In particular, this copies the style from the old object to the new one.
            </para>
            <para>
            Getting this property returns <see cref="P:C1.C1PreviewClient.RenderText.Text"/> of <see cref="T:C1.C1PreviewClient.RenderText"/>
            assigned to the <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> on the current cell, or an empty string
            if the current value of <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> is not a <see cref="T:C1.C1PreviewClient.RenderText"/>.
            </para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.TableCell.RenderObject"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Image"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Area"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Image">
            <summary>
            Gets or sets the image contained in the current cell.
            </summary>
            <remarks>
            <para>
            Setting this property checks the current value of the <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> property.
            If it is a <see cref="T:C1.C1PreviewClient.RenderImage"/>, the <paramref name="value"/> is assigned to that object's
            <see cref="P:C1.C1PreviewClient.RenderImage.Image"/>.
            </para>
            <para>
            Otherwise, a new <see cref="T:C1.C1PreviewClient.RenderImage"/> initialized with <paramref name="value"/>
            is created and assigned to <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/>.
            Note that properties from the old <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> are copied
            to the newly created <see cref="T:C1.C1PreviewClient.RenderImage"/> using the
            <see cref="!:C1.C1Preview.RenderObject.AssignFrom(RenderObject)"/> method.
            In particular, this copies the style from the old object to the new one.
            </para>
            <para>
            Getting this property returns <see cref="P:C1.C1PreviewClient.RenderImage.Image"/> of <see cref="T:C1.C1PreviewClient.RenderImage"/>
            assigned to the <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> on the current cell, or <b>null</b>
            if the current value of <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> is not a <see cref="T:C1.C1PreviewClient.RenderImage"/>.
            </para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.TableCell.RenderObject"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Text"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Area"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Area">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderArea"/> contained in the current cell.
            </summary>
            <remarks>
            <para>
            Getting this property checks the current value of the <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> property.
            If it is a <see cref="T:C1.C1PreviewClient.RenderArea"/>, it is returned.
            </para>
            <para>
            Otherwise, a new <see cref="T:C1.C1PreviewClient.RenderArea"/> is created, assigned to <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/>,
            and returned.
            </para>
            <para>
            Note that properties from the old <see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/> are copied
            to the newly created <see cref="T:C1.C1PreviewClient.RenderArea"/> using the
            <see cref="!:C1.C1Preview.RenderObject.AssignFrom(RenderObject)"/> method.
            In particular, this copies the style from the old object to the new one.
            </para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.TableCell.RenderObject"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Text"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Image"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Style">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> of the current cell.
            </summary>
            <remarks>
            <para>
            The value of this property affects both ambient and non-ambient
            style attributes of the cell itself and, through object containment,
            ambient attributes of the cell's content.
            </para>
            <para>
            For example, because <see cref="!:C1.C1Preview.Style.Spacing"/> is ignored
            for table cells, the following code does not affect the look of a table:
            <code>
              RenderTable rt = new RenderTable();
              rt.Cells[1, 2].Text = "My text.";
              rt.Cells[1, 2].Style.Spacing.All = "3mm";
            </code>
            while the following code adds 3mm of whie space around the text in the
            cell:
            <code>
              RenderTable rt = new RenderTable();
              rt.Cells[1, 2].Text = "My text.";
              rt.Cells[1, 2].CellStyle.Spacing.All = "3mm";
            </code>
            </para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.TableCell.CellStyle"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.CellStyle">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> that is used to render the content of the current cell.
            </summary>
            <remarks>
            This style is not applied to the current cell itself,
            rather it is applied to the cell's content (<see cref="P:C1.C1PreviewClient.TableCell.RenderObject"/>),
            affecting both ambient and non-ambient style attributes of that object.
            <para>For an example, see <b>remarks</b> in <see cref="P:C1.C1PreviewClient.TableCell.Style"/>.</para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Style"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.Bounds">
            <summary>
            Gets a <see cref="T:System.Drawing.Rectangle"/> describing the geometry of the current cell in the table.
            <para>
            The location of the returned rectangle defines the location (column and row) of the current cell,
            while its size defines the number of columns and rows spanned by the current cell.
            </para>
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Col"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.Row"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.SpanCols"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.SpanRows"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.HorzSplitBehavior">
            <summary>
            Gets or sets a value indicating how the content of the current cell is treated
            when the cell is split vertically between two horizontal (extension,
            created when the document is too wide) pages.
            (<see cref="P:C1.C1PreviewClient.TableVector.CanSplit"/> should be <b>true</b> for this to happen).
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableVector.CanSplit"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.VertSplitBehavior"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.VertSplitBehavior">
            <summary>
            Gets or sets a value indicating how the content of the current cell is treated
            when the cell is split horizontally between two vertical (regular) pages
            (<see cref="P:C1.C1PreviewClient.TableVector.CanSplit"/> should be <b>true</b> for this to happen).
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableVector.CanSplit"/>
            <seealso cref="P:C1.C1PreviewClient.TableCell.HorzSplitBehavior"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.RepeatGridLinesVert">
            <summary>
            Gets or sets a value indicating whether horizontal gridlines should
            be drawn when the cell is split between two vertical (regular) pages.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableCell.VertSplitBehavior"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCell.RepeatGridLinesHorz">
            <summary>
            Gets or sets a value indicating whether vertical gridlines should
            be drawn when the cell is split between two horizontal (extension,
            created when the document is too wide) pages.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableCell.HorzSplitBehavior"/>
        </member>
        <member name="T:C1.C1PreviewClient.TableCellCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1PreviewClient.RenderTable"/> cells
            (objects of the type <see cref="T:C1.C1PreviewClient.TableCell"/>).
            A collection of this type is returned by the <see cref="P:C1.C1PreviewClient.RenderTable.Cells"/> property
            of a table.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.IC1SerializableObject">
            <summary>
            For internal use.
            This interface is used to allow objects to receive notifications from Serializer.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.IC1SerializableObject.SetParent(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.IC1SerializableObject.AfterDeserialization">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TableCellCollection.FindCell(System.Int32,System.Int32)">
            <summary>
            Returns the <see cref="T:C1.C1PreviewClient.TableCell"/> object at the specified row and column in the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>,
            or <b>null</b> if that object has not been initialized.
            </summary>
            <param name="row">The 0-based row index of the cell.</param>
            <param name="col">The 0-based column index of the cell.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.TableCell"/> object at the specified row and column, or <b>null</b>.</returns>
            <remarks>
            The cells of a table are not initialized unless they are accessed via the indexer property
            on the cells collection. Unlike the indexer, this method can be used to test whether
            a <see cref="T:C1.C1PreviewClient.TableCell"/> object has been created for a cell, without initializing it.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.TableCellCollection.GetRightBottomBounds">
            <summary>
            Gets the bounds of the initialized cells area.
            The returned <see cref="T:System.Drawing.Size"/> structure's <see cref="P:System.Drawing.Size.Width"/>
            contains the column index of the rightmost initialized cell + 1,
            while <see cref="P:System.Drawing.Size.Height"/>
            contains the row index of the bottommost initialized cell + 1.
            </summary>
            <returns>The size of the initialized cells area.</returns>
            <seealso cref="M:C1.C1PreviewClient.TableCellCollection.FindCell(System.Int32,System.Int32)"/>
        </member>
        <member name="M:C1.C1PreviewClient.TableCellCollection.AssignFrom(C1.C1PreviewClient.TableCellCollection)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TableCellCollection"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TableCellCollection.Count">
            <summary>
            Gets the count of cells in the current collection.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCellCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableCell"/> object at the specified index.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCellCollection.MaxCol">
            <summary>
            Contains the number of rightmost column.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCellCollection.MaxRow">
            <summary>
            Contains the number of bottommost row.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableCellCollection.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderTable"/> containing the current collection of cells.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.RenderTable.Cells"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableCellCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableCell"/> at the intersection of the specified row and column.
            This property always returns a non-<b>null</b> <see cref="T:C1.C1PreviewClient.TableCell"/> object.
            </summary>
            <param name="row">The 0-based row index.</param>
            <param name="col">The 0-based column index.</param>
            <returns>The cell at the intersection of the specified row and column.</returns>
            <seealso cref="M:C1.C1PreviewClient.TableCellCollection.FindCell(System.Int32,System.Int32)"/>
        </member>
        <member name="T:C1.C1PreviewClient.TableHeaderEnum">
            <summary>
            Flags specifying how a table header is repeated in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            This is the type of <see cref="P:C1.C1PreviewClient.TableVectorGroup.Header"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableHeaderEnum.None">
            <summary>
            The header is printed once at the top of the table.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableHeaderEnum.Page">
            <summary>
            The header is repeated at the top of each page. If there are multiple columns
            per page, the header is repeated only at the top of the first column on the page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableHeaderEnum.Column">
            <summary>
            The header is repeated only if there are multiple columns per page, at the top
            of each column except the first on the page. If there is only one column,
            the header is not printed at all.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableHeaderEnum.All">
            <summary>
            The header is repeated at the top of all pages. If there are multiple columns per page,
            the header is repeated at the top of each column.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TableFooterEnum">
            <summary>
            Flags specifying how a table footer is repeated in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            This is the type of <see cref="P:C1.C1PreviewClient.TableVectorGroup.Footer"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableFooterEnum.None">
            <summary>
            The footer is printed once at the end of the table.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableFooterEnum.Page">
            <summary>
            The footer is repeated at the bottom of each page. If there are multiple columns
            per page, the footer is repeated only at the bottom of the last column on the page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableFooterEnum.Column">
            <summary>
            The footer is repeated only if there are multiple columns per page, at the bottom
            of each column except the last on the page. If there is only one column,
            the footer is not printed at all.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TableFooterEnum.All">
            <summary>
            The footer is repeated at the bottom of all pages. If there are multiple columns per page,
            the footer is repeated at the bottom of each column.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TableVectorGroup">
            <summary>
            Represents a group of <see cref="T:C1.C1PreviewClient.RenderTable"/> rows or columns
            (see <see cref="P:C1.C1PreviewClient.RenderTable.RowGroups"/> and <see cref="P:C1.C1PreviewClient.RenderTable.ColGroups"/>).
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroup.ShouldSerializeStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.TableVectorGroup.Style"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.TableVectorGroup.Style"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroup.ShouldSerializeCellStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.TableVectorGroup.CellStyle"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.TableVectorGroup.CellStyle"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroup.AssignFrom(C1.C1PreviewClient.TableVectorGroup)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TableVectorGroup"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.TableVectorGroupCollection"/> containing the current group.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.Table">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderTable"/> containing the current group.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.Position">
            <summary>
            Gets the 0-based index in the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>
            of the first row or column in the current group.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.Count">
            <summary>
            Gets the number of rows or columns in the current group.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.LastPosition">
            <summary>
            Gets the 0-based index in the containing <see cref="T:C1.C1PreviewClient.RenderTable"/>
            of the last row or column in the current group.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.CanSplit">
            <summary>
            Gets or sets a value indicating whether the current group can split between pages.
            The default is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.PageHeader">
            <summary>
            Gets or sets a value indicating whether the current group
            should be repeated as a table header on each page where
            the containing table is printed.
            <para>
            Only one row and column group in a table can has this property set to <b>true</b>.
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.PageFooter">
            <summary>
            Gets or sets a value indicating whether the current group
            should be repeated as a table footer on each page where
            the containing table is printed.
            <para>
            Only one row and column group in a table can has this property set to <b>true</b>.
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.ColumnHeader">
            <summary>
            Gets or sets a value indicating whether the current group
            should be repeated as a table header on each column where
            the containing table is printed.
            <para>
            Only one row and column group in a table can has this property set to <b>true</b>.
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.ColumnFooter">
            <summary>
            Gets or sets a value indicating whether the current group
            should be repeated as a table footer on each column where
            the containing table is printed.
            <para>
            Only one row and column group in a table can has this property set to <b>true</b>.
            </para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.Header">
            <summary>
            Gets or sets flags indicating whether the current group
            should be treated as a table header repeated on each
            page and/or column.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.PageHeader"/>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.ColumnHeader"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.Footer">
            <summary>
            Gets or sets flags indicating whether the current group
            should be treated as a table footer repeated on each
            page and/or column.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.PageFooter"/>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.ColumnFooter"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.MinVectorsBefore">
            <summary>
            Gets or sets the minimum number of rows or columns that must be printed
            on the same page before the current group, to allow a page break to be inserted.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.MinVectorsAfter">
            <summary>
            Gets or sets the minimum number of rows or columns that must be printed
            on the same page after the current group, to allow a page break to be inserted.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.Style">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> associated with the current group.
            This style affects ambient and non-ambient attributes of the group as a whole,
            and ambient properties of the elements contained in the group.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.CellStyle"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.CellStyle">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> that is used to initialize <see cref="P:C1.C1PreviewClient.TableCell.CellStyle"/>
            of cells in the current group.
            </summary>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.Style"/>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.StartNumber">
            <summary>
            Obsolete. Use Position instead.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroup.LastNumber">
            <summary>
            Obsolete. Use LastPosition instead.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TableVectorGroupCollection">
            <summary>
            Represents a collection of row or column groups in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            This is the type of <see cref="P:C1.C1PreviewClient.RenderTable.RowGroups"/> and <see cref="P:C1.C1PreviewClient.RenderTable.ColGroups"/>
            collections.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroupCollection.AssignFrom(C1.C1PreviewClient.TableVectorGroupCollection)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TableVectorGroupCollection"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroupCollection.GetPageHeader">
            <summary>
            Gets the group of rows or columns which has the <see cref="P:C1.C1PreviewClient.TableVectorGroup.PageHeader"/>
            property set to <b>true</b>.
            </summary>
            <returns>The <see cref="T:C1.C1PreviewClient.TableVectorGroup"/> which is a table header repeated on each page,
            or <b>null</b> if such group does not exist.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroupCollection.GetPageFooter">
            <summary>
            Gets the group of rows or columns which has the <see cref="P:C1.C1PreviewClient.TableVectorGroup.PageFooter"/>
            property set to <b>true</b>.
            </summary>
            <returns>The <see cref="T:C1.C1PreviewClient.TableVectorGroup"/> which is a table footer repeated on each page,
            or <b>null</b> if such group does not exist.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroupCollection.GetColumnHeader">
            <summary>
            Gets the group of rows or columns which has the <see cref="P:C1.C1PreviewClient.TableVectorGroup.ColumnHeader"/>
            property set to <b>true</b>.
            </summary>
            <returns>The <see cref="T:C1.C1PreviewClient.TableVectorGroup"/> which is a table header repeated on each column,
            or <b>null</b> if such group does not exist.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroupCollection.GetColumnFooter">
            <summary>
            Gets the group of rows or columns which has the <see cref="P:C1.C1PreviewClient.TableVectorGroup.ColumnFooter"/>
            property set to <b>true</b>.
            </summary>
            <returns>The <see cref="T:C1.C1PreviewClient.TableVectorGroup"/> which is a table footer repeated on each column,
            or <b>null</b> if such group does not exist.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroupCollection.GetBound">
            <summary>
            Gets the bound of the current group collection,
            i.e. the index of the last row or column in the contained groups plus 1.
            </summary>
            <returns>The bound of the current group collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroupCollection.FindGroup(System.Int32,System.Int32)">
            <summary>
            Searches the current collection for a group with the specified
            position (row or column index) in the containing table, and count of elements.
            </summary>
            <param name="position">The starting position (row or column index) of the group in the containing table.</param>
            <param name="count">The count of rows or columns in the group.</param>
            <returns>The group matching the search criteria, or <b>null</b> if such group does not exist.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TableVectorGroupCollection.FindGroupsAtPos(System.Int32)">
            <summary>
            Searches the current collection for all groups that contain
            the row or column with the specified index in the containing table,
            returns the array of all groups that were found.
            </summary>
            <param name="position">The row or column index.</param>
            <returns>The array of <see cref="T:C1.C1PreviewClient.TableVectorGroup"/> objects that were found.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroupCollection.Table">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderTable"/> containing the current collection of row or column groups.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TableVectorGroupCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the row or column group that has the specified position in the containing table and element count.
            This property always returns a <see cref="T:C1.C1PreviewClient.TableVectorGroup"/> object. If the group with the specified
            parameters did not exist, it is created and added to the current collection.
            </summary>
            <param name="position">The index in the containing table of the first row or column in the group.</param>
            <param name="count">The number of rows or columns in the group.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.TableVectorGroup"/> with the specified criteria.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.UserCellGroup">
            <summary>
            Represents a (possibly sparse) user-defined group of cells
            (objects of type <see cref="T:C1.C1PreviewClient.TableCell"/>) in a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.UserCellGroup"/> class,
            includes a range of cells identified by a rectangular area, in the group.
            </summary>
            <param name="range">Identifies a rectangluar range of cells as follows:
            <list type="bullet">
            <item><paramref name="range.X"/> is the column index of the top left cell;</item>
            <item><paramref name="range.Y"/> is the row index of the top left cell;</item>
            <item><paramref name="range.Width"/> is the number of columns;</item>
            <item><paramref name="range.X"/> is the number of rows.</item>
            </list>
            </param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.UserCellGroup"/> class,
            includes a single cell identified by its coordinates, in the group.
            </summary>
            <param name="cell">Identifies a cell as follows:
            <list type="bullet">
            <item><paramref name="cell.X"/> is the column index of the cell;</item>
            <item><paramref name="cell.Y"/> is the row index of the cell.</item>
            </list>
            </param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.#ctor(System.Drawing.Rectangle[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.UserCellGroup"/> class,
            includes a range of cells identified by a list of rectangular areas, in the group.
            </summary>
            <param name="ranges">The list of rectangular areas to include in the group,
            each area is identified by a <see cref="T:System.Drawing.Rectangle"/> structure as follows:
            <list type="bullet">
            <item><see cref="P:System.Drawing.Rectangle.X"/> is the column index of the top left cell;</item>
            <item><see cref="P:System.Drawing.Rectangle.Y"/> is the row index of the top left cell;</item>
            <item><see cref="P:System.Drawing.Rectangle.Width"/> is the number of columns;</item>
            <item><see cref="P:System.Drawing.Rectangle.X"/> is the number of rows.</item>
            </list>
            </param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.#ctor(System.Drawing.Point[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.UserCellGroup"/> class,
            includes a range of cells identified by a list of cell coordinates, in the group.
            </summary>
            <param name="cells">The list of cell coordinates to include in the group,
            each cell is identified by a <see cref="T:System.Drawing.Point"/> structure as follows:
            <list type="bullet">
            <item><see cref="P:System.Drawing.Point.X"/> is the column index of the cell;</item>
            <item><see cref="P:System.Drawing.Point.Y"/> is the row index of the cell.</item>
            </list>
            </param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.UserCellGroup"/> class,
            includes a range of cells identified by a list of rectangular areas or individual cell coordnates, in the group.
            </summary>
            <param name="areas">
            <para>
            The list of rectangular areas or individual cell coordnates to include in the group,
            each item in the list may be either a <see cref="T:System.Drawing.Rectangle"/> or a <see cref="T:System.Drawing.Point"/> structure.
            </para>
            If the item is a <see cref="T:System.Drawing.Rectangle"/>, it identifies an area to include as follows:
            <list type="bullet">
            <item><see cref="P:System.Drawing.Rectangle.X"/> is the column index of the top left cell;</item>
            <item><see cref="P:System.Drawing.Rectangle.Y"/> is the row index of the top left cell;</item>
            <item><see cref="P:System.Drawing.Rectangle.Width"/> is the number of columns;</item>
            <item><see cref="P:System.Drawing.Rectangle.X"/> is the number of rows.</item>
            </list>
            If the item is a <see cref="T:System.Drawing.Point"/>, it identifies a cell to include as follows:
            <list type="bullet">
            <item><see cref="P:System.Drawing.Point.X"/> is the column index of the cell;</item>
            <item><see cref="P:System.Drawing.Point.Y"/> is the row index of the cell.</item>
            </list>
            </param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.ShouldSerializeStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.UserCellGroup.Style"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.UserCellGroup.Style"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.ShouldSerializeCellStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.UserCellGroup.CellStyle"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.UserCellGroup.CellStyle"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.AssignFrom(C1.C1PreviewClient.UserCellGroup)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.UserCellGroup"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroup.ContainsCell(System.Int32,System.Int32)">
            <summary>
            Tests whether the current cell group contains a cell with the specified row and column indices.
            </summary>
            <param name="row">The row index of the cell.</param>
            <param name="col">The column index of the cell.</param>
            <returns><b>true</b> if the current group contains the specified cell, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.UserCellGroup.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.UserCellGroupCollection"/> containing the current cell group.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.UserCellGroup.Table">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderTable"/> containing the current cell group.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.UserCellGroup.Style">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> of the current cell group.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.UserCellGroup.CellStyle">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> of objects contained in the cells
            of the current cell group.
            See <see cref="P:C1.C1PreviewClient.TableCell.CellStyle"/> for details.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.UserCellGroup.Ranges">
            <summary>
            Gets an array of <see cref="T:System.Drawing.Rectangle"/> structures identifying all cells
            included in the current group.
            For details, <see cref="M:C1.C1PreviewClient.UserCellGroup.#ctor(System.Drawing.Rectangle)"/>
            (lone cells are represented by rectangles with both dimensions set to <b>1</b>).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.UserCellGroupCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1PreviewClient.UserCellGroup"/> objects.
            This is the type of the <see cref="P:C1.C1PreviewClient.RenderTable.UserCellGroups"/> property of a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroupCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroupCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroupCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroupCollection.AssignFrom(C1.C1PreviewClient.UserCellGroupCollection)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroupCollection.Add(C1.C1PreviewClient.UserCellGroup)">
            <summary>
            Adds a <see cref="T:C1.C1PreviewClient.UserCellGroup"/> to the current collection.
            </summary>
            <param name="cellGroup">The user cell group to add.</param>
            <returns>The index of the newly added group in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroupCollection.FindGroupsAtPos(System.Int32,System.Int32)">
            <summary>
            Finds all user cell groups (objects of type <see cref="T:C1.C1PreviewClient.UserCellGroup"/>)
            that contain the cell at the specified row and column indices.
            </summary>
            <param name="row">The row index of the cell.</param>
            <param name="col">The column index of the cell.</param>
            <returns>A <see cref="T:System.Collections.ArrayList"/> containing all <see cref="T:C1.C1PreviewClient.UserCellGroup"/> objects from the current collection
            that contain the cell at the specified position in the table.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.UserCellGroupCollection.GetRightBottomBounds">
            <summary>
            Gets the bounding rectangle that includes all cells in all groups in the current collection.
            </summary>
            <returns>
            A <see cref="T:System.Drawing.Size"/> structure, the <see cref="P:System.Drawing.Size.Width"/> of which contains the column index + 1
            of the rightmost cell, while the <see cref="P:System.Drawing.Size.Height"/> contains the row index + 1
            of the bottommost cell.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.UserCellGroupCollection.Owner">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.RenderTable"/> object containing the current collection of user cell groups.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.UserCellGroupCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.UserCellGroup"/> at the specified index in the current collection.
            </summary>
            <param name="index">The index in the current collection.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.UserCellGroup"/> at the specified index.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.StretchTableEnum">
            <summary>
            Enumerates the modes of stretching the rows or columns of a <see cref="T:C1.C1PreviewClient.RenderTable"/>
            when filling an empty space below or on the right of the table.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchTableEnum.None">
            <summary>
            Rows or columns of a table do no stretch.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchTableEnum.AllVectors">
            <summary>
            All rows or columns of a table are stretched equally to fill the page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchTableEnum.AllColumns">
            <summary>
            All columns of a table are stretched equally to fill the page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchTableEnum.LastVectorOnPage">
            <summary>
            Only the last row or column on a page is stretched to fill it.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.StretchTableEnum.LastColumnOnPage">
            <summary>
            Only the last column on a page is stretched to fill it.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderTable">
            <summary>
            Represents a table in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
            <seealso cref="T:C1.C1PreviewClient.TableVector"/>
            <seealso cref="T:C1.C1PreviewClient.TableRow"/>
            <seealso cref="T:C1.C1PreviewClient.TableCol"/>
            <seealso cref="T:C1.C1PreviewClient.TableCell"/>
            <seealso cref="T:C1.C1PreviewClient.TableVectorGroup"/>
            <seealso cref="T:C1.C1PreviewClient.UserCellGroup"/>
            <seealso cref="T:C1.C1PreviewClient.TableRowCollection"/>
            <seealso cref="T:C1.C1PreviewClient.TableColCollection"/>
            <seealso cref="T:C1.C1PreviewClient.TableCellCollection"/>
            <seealso cref="T:C1.C1PreviewClient.TableVectorGroupCollection"/>
            <seealso cref="T:C1.C1PreviewClient.UserCellGroupCollection"/>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderTable"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderTable"/> class,
            assigning the row and column counts
            (see <see cref="P:C1.C1PreviewClient.TableVectorCollection.Count"/>).
            </summary>
            <param name="rowCount">The count assigned to <see cref="P:C1.C1PreviewClient.TableVectorCollection.Count"/> on the <see cref="P:C1.C1PreviewClient.RenderTable.Rows"/> collection.</param>
            <param name="colCount">The count assigned to <see cref="P:C1.C1PreviewClient.TableVectorCollection.Count"/> on the <see cref="P:C1.C1PreviewClient.RenderTable.Cols"/> collection.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.#ctor(C1.C1PreviewClient.C1PrintDocument,System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.ShouldSerializeCellStyle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.RenderTable.CellStyle"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.RenderTable.CellStyle"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.OnChildRemove(C1.C1PreviewClient.RenderObject)">
            <summary>
            For internal use only.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.InitRenderObject">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.GetDefaultWidth">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.GetDefaultFlags">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.GetDefaultSplitVertBehavior">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.GetAmbientPropValueForChild(C1.C1PreviewClient.RenderObject,System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            For internal use only.
            </summary>
            <param name="roChild"></param>
            <param name="propKey"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.GetNonAmbientPropValueForChild(C1.C1PreviewClient.RenderObject,System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            For internal use only.
            </summary>
            <param name="roChild"></param>
            <param name="propKey"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.GetAssignChildren">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderTable"/>, also copies <see cref="T:C1.C1PreviewClient.RenderTable"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignElements">Indicates whether rows, columns, cells, row, column and user cell groups should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTable.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderTable"/>, also copies <see cref="T:C1.C1PreviewClient.RenderTable"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.SerializeColCount">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.SerializeRowCount">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.RowSizingMode">
            <summary>
            Gets or sets a value determining how the heights of table rows are
            calculated. The default is <see cref="F:C1.C1PreviewClient.TableSizingModeEnum.Auto"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.ColumnSizingMode">
            <summary>
            Gets or sets a value determining how the widths of table columns are
            calculated. The default is <see cref="F:C1.C1PreviewClient.TableSizingModeEnum.Fixed"/>.
            </summary>
            <remarks>
            To make a table with automatically calculated columns' widths,
            set this property to <see cref="F:C1.C1PreviewClient.TableSizingModeEnum.Auto"/>,
            and the <see cref="P:C1.C1PreviewClient.RenderObject.Width"/> on the <see cref="T:C1.C1PreviewClient.RenderTable"/>
            to <see cref="P:C1.C1PreviewClient.Unit.Auto"/>, e.g.:
            <code>
              RenderTable rt = new RenderTable();
              rt.ColumnSizingMode = TableSizingModeEnum.Auto;
              rt.Width = Unit.Auto;
            </code>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.Rows">
            <summary>
            Gets the collection of rows of the current <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            Getting a row with an arbitrary index on this collection
            always returns a <see cref="T:C1.C1PreviewClient.TableRow"/> object, initializing it if necessary.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.Cols">
            <summary>
            Gets the collection of columns of the current <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            Getting a column with an arbitrary index on this collection
            always returns a <see cref="T:C1.C1PreviewClient.TableCol"/> object, initializing it if necessary.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.RowGroups">
            <summary>
            Gets the collection of row groups defined on the current <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.ColGroups">
            <summary>
            Gets the collection of column groups defined on the current <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.Cells">
            <summary>
            Gets the collection of cells of the current <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            Getting a cell with arbitrary row and column indices on this collection
            always returns a <see cref="T:C1.C1PreviewClient.TableCell"/> object, initializing it if necessary.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.UserCellGroups">
            <summary>
            Gets the collection of <see cref="T:C1.C1PreviewClient.UserCellGroup"/> objects defined on the current table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.Stretch">
            <summary>
            Obsolete. Use <see cref="P:C1.C1PreviewClient.RenderTable.StretchColumns"/> instead.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.StretchColumns">
            <summary>
            Gets or sets the mode of stretching the columns of the current table
            when filling an empty space on the right of the table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.StretchRows">
            <summary>
            Gets or sets the mode of stretching the rows of the current table
            when filling an empty space below the table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.CellStyle">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> of objects contained in the cells
            of the current table.
            See <see cref="P:C1.C1PreviewClient.TableCell.CellStyle"/> for details.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.VertPageHeaderOnFirstPage">
            <summary>
            Gets or sets a value indicating whether a vertical page header, if defined (see <b>remarks</b>),
            should be printed on the first of the horizontal pages spanned by the current table.
            </summary>
            <remarks>
            To define a vertical page header, create a column group on the current table,
            and mark it as a page or column header, e.g. like this:
            <code>
              RenderTable rt = new RenderTable();
              rt.ColGroups[0, 2].Header = TableHeaderEnum.All;
            </code>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.RenderTable.ColGroups"/>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.Header"/>
            <seealso cref="T:C1.C1PreviewClient.TableHeaderEnum"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.HorzPageHeaderOnFirstPage">
            <summary>
            Gets or sets a value indicating whether a horizontal page header, if defined (see <b>remarks</b>),
            should be printed on the first of the pages spanned by the current table.
            </summary>
            <remarks>
            To define a horizontal page header, create a row group on the current table,
            and mark it as a page or column header, e.g. like this:
            <code>
              RenderTable rt = new RenderTable();
              rt.RowGroups[0, 2].Header = TableHeaderEnum.All;
            </code>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.RenderTable.RowGroups"/>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.Header"/>
            <seealso cref="T:C1.C1PreviewClient.TableHeaderEnum"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.VertPageFooterOnLastPage">
            <summary>
            Gets or sets a value indicating whether a vertical page footer, if defined (see <b>remarks</b>),
            should be printed on the last of the horizontal pages spanned by the current table.
            </summary>
            <remarks>
            To define a vertical page footer, create a column group on the current table,
            and mark it as a page or column footer, e.g. like this:
            <code>
              RenderTable rt = new RenderTable();
              rt.ColGroups[10, 2].Footer = TableFooterEnum.All;
            </code>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.RenderTable.ColGroups"/>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.Footer"/>
            <seealso cref="T:C1.C1PreviewClient.TableFooterEnum"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.HorzPageFooterOnLastPage">
            <summary>
            Gets or sets a value indicating whether a horizontal page footer, if defined (see <b>remarks</b>),
            should be printed on the last of the pages spanned by the current table.
            </summary>
            <remarks>
            To define a horizontal page footer, create a row group on the current table,
            and mark it as a page or column footer, e.g. like this:
            <code>
              RenderTable rt = new RenderTable();
              rt.RowGroups[10, 2].Footer = TableFooterEnum.All;
            </code>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.RenderTable.RowGroups"/>
            <seealso cref="P:C1.C1PreviewClient.TableVectorGroup.Footer"/>
            <seealso cref="T:C1.C1PreviewClient.TableFooterEnum"/>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.RepeatGridLinesVert">
            <summary>
            Gets or sets a value indicating whether vertical gridlines (see <see cref="!:C1.C1Preview.Style.GridLines"/>)
            should be drawn when the current table is split between two or more horizontal (extender) pages.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTable.RepeatGridLinesHorz">
            <summary>
            Gets or sets a value indicating whether horizontal gridlines (see <see cref="!:C1.C1Preview.Style.GridLines"/>)
            should be drawn when the current table is split between two or more pages.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderText">
            <summary>
            Represents a run of text in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            Text is drawn using a single style (see <see cref="T:C1.C1PreviewClient.RenderParagraph"/> for multi-style text).
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(System.String,C1.C1PreviewClient.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property and style.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.</param>
            <param name="style">A <see cref="!:C1.C1Preview.Style"/> to use
            (the <see cref="!:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)"/> method
            is used to copy the specified style to the current object's <see cref="P:C1.C1PreviewClient.RenderObject.Style"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(System.String,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property and font.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.</param>
            <param name="font">The font used to render the text.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property,
            font and text color.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.</param>
            <param name="font">The font used to render the text.</param>
            <param name="textColor">The text color used to render the text.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property,
            font, text color and alignment.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.</param>
            <param name="font">The font used to render the text.</param>
            <param name="textColor">The text color used to render the text.</param>
            <param name="horzAlign">The horizontal text alignment.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(System.String,System.Drawing.Font,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property,
            font and text alignment.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.</param>
            <param name="font">The font used to render the text.</param>
            <param name="horzAlign">The horizontal text alignment.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(System.String,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property,
            and text alignment.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.</param>
            <param name="horzAlign">The horizontal text alignment.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(System.String,C1.C1PreviewClient.Style,C1.C1PreviewClient.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderText"/> class,
            assigning the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property,
            and the parent styles.
            </summary>
            <param name="text">A string assigned to the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.</param>
            <param name="parentStyle">The style assigned to the <see cref="!:C1.C1Preview.Style.Parent"/> property of the current object's style.</param>
            <param name="ambientParentStyle">The style assigned to the <see cref="!:C1.C1Preview.Style.AmbientParent"/> property of the current object's style.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,C1.C1PreviewClient.Style)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="text"></param>
            <param name="style"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="text"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,System.Drawing.Font)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="text"></param>
            <param name="font"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="textColor"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,System.Drawing.Font,System.Drawing.Color,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="textColor"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,System.Drawing.Font,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,C1.C1PreviewClient.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="text"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.#ctor(C1.C1PreviewClient.C1PrintDocument,System.String,C1.C1PreviewClient.Style,C1.C1PreviewClient.Style)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="text"></param>
            <param name="parentStyle"></param>
            <param name="ambientParentStyle"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.ShouldSerializeText">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.RenderText.Text"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderText.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderText"/>, also copies <see cref="T:C1.C1PreviewClient.RenderText"/>-specific properties.
            </summary>
            <param name="source"></param>
            <param name="assignDataBinding"></param>
            <param name="assignChildren"></param>
            <param name="assignAnchors"></param>
            <param name="assignHyperlink"></param>
            <param name="assignName"></param>
            <param name="assignStyle"></param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderText.Text">
            <summary>
            Gets or sets the text of the current object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderText.HasText">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property of the current object is
            not <b>null</b> and has a greater than zero length.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderText.TextLength">
            <summary>
            Gets the length of the string returned by the <see cref="P:C1.C1PreviewClient.RenderText.Text"/> property.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TabAlignmentEnum">
            <summary>
            Specifies the text alignment on a tab position.
            See <see cref="P:C1.C1PreviewClient.RenderTextBase.TabPositions"/> for details.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TabAlignmentEnum.Left">
            <summary>
            Text is left-aligned on the tab position (text starts at the tab stop).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TabAlignmentEnum.Center">
            <summary>
            Text is centered around the tab position.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TabAlignmentEnum.Right">
            <summary>
            Text is right-aligned on the tab position (text ends at the tab stop).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TabPosition">
            <summary>
            Represents a tab stop in a text in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            To set a tab stop, add it to the <see cref="P:C1.C1PreviewClient.RenderTextBase.TabPositions"/>
            collection on the text or paragraph.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TabPosition.#ctor(C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TabPosition"/> class,
            at the specified position, with the default (<see cref="F:C1.C1PreviewClient.TabAlignmentEnum.Left"/>) text alignment.
            </summary>
            <param name="position">The tab position, relative to the left edge of the text area.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TabPosition.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.TabAlignmentEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TabPosition"/> class,
            at the specified position and with the specified text alignment.
            </summary>
            <param name="position">The tab position, relative to the left edge of the text area.</param>
            <param name="alignment">The text alignment at this tab position.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TabPosition.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.TabAlignmentEnum,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TabPosition"/> class,
            at the specified position and with the specified text alignment and fill character.
            </summary>
            <param name="position">The tab position, relative to the left edge of the text area.</param>
            <param name="alignment">The text alignment at this tab position.</param>
            <param name="fillChar">The character used to fill the area between the preceding and the current tab stops.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TabPosition.AssignFrom(C1.C1PreviewClient.TabPosition)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.TabPosition"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TabPosition.Position">
            <summary>
            Gets or sets the tab stop position, relative to the left of the text area.
            </summary>
            <remarks>
            The tab stop position is relative to the left edge of the text area.
            That area does not include any padding or borders, so for example
            if a <see cref="T:C1.C1PreviewClient.RenderText"/> has a 1 inch left padding,
            and the first <see cref="T:C1.C1PreviewClient.TabPosition"/> is set to 1 inch,
            any text after the first tab char will be positioned 2 inches
            to the right of the <see cref="T:C1.C1PreviewClient.RenderText"/>'s X coordinate.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.TabPosition.Alignment">
            <summary>
            Gets or sets the text alignment at the current tab.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TabPosition.FillChar">
            <summary>
            Gets or sets the char used to fill the space between the current and the preceding tabs.
            </summary>
            <remarks>
            This feature's main use is in <see cref="T:C1.C1PreviewClient.RenderToc"/>, where it fills the space
            between left-aligned TOC entries and right-aligned page numbers.
            </remarks>
        </member>
        <member name="T:C1.C1PreviewClient.TabPositionCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1PreviewClient.TabPosition"/> objects.
            This is the type of <see cref="P:C1.C1PreviewClient.RenderTextBase.TabPositions"/> property.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TabPositionCollection.Add(C1.C1PreviewClient.Unit)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.TabPosition"/> object,
            initializes it with the specified tab stop position,
            and adds it to the current collection.
            </summary>
            <param name="tabPosition">The position of the tab stop relative to the left edge of the text area.</param>
            <returns>The index of the added <see cref="T:C1.C1PreviewClient.TabPosition"/> object in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TabPositionCollection.Add(C1.C1PreviewClient.Unit,C1.C1PreviewClient.TabAlignmentEnum)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.TabPosition"/> object,
            initializes it with the specified tab stop position and text alignment,
            and adds it to the current collection.
            </summary>
            <param name="tabPosition">The position of the tab stop relative to the left edge of the text area.</param>
            <param name="tabAlignment">The text alignment at the specified tab stop.</param>
            <returns>The index of the added <see cref="T:C1.C1PreviewClient.TabPosition"/> object in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TabPositionCollection.Add(C1.C1PreviewClient.Unit,C1.C1PreviewClient.TabAlignmentEnum,System.Char)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.TabPosition"/> object,
            initializes it with the specified tab stop position, text alignment and fill char,
            and adds it to the current collection.
            </summary>
            <param name="tabPosition">The position of the tab stop relative to the left edge of the text area.</param>
            <param name="tabAlignment">The text alignment at the specified tab stop.</param>
            <param name="fillChar">The fill char between the preceding and the added tab stop.</param>
            <returns>The index of the added <see cref="T:C1.C1PreviewClient.TabPosition"/> object in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TabPositionCollection.Add(C1.C1PreviewClient.TabPosition)">
            <summary>
            Adds a <see cref="T:C1.C1PreviewClient.TabPosition"/> object to the current collection.
            </summary>
            <param name="tabPosition">The object to add.</param>
            <returns>The index of <paramref name="tabPosition"/> in the current collection.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TabPositionCollection.Insert(System.Int32,C1.C1PreviewClient.TabPosition)">
            <summary>
            Inserts a <see cref="T:C1.C1PreviewClient.TabPosition"/> object at the specified position into the current collection.
            </summary>
            <param name="index">The index at which to insert <paramref name="tabPosition"/>.</param>
            <param name="tabPosition">The object to insert.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TabPositionCollection.Remove(C1.C1PreviewClient.TabPosition)">
            <summary>
            Removes a <see cref="T:C1.C1PreviewClient.TabPosition"/> object from the current collection.
            </summary>
            <param name="tabPosition">The object to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TabPositionCollection.IndexOf(C1.C1PreviewClient.TabPosition)">
            <summary>
            Gets the index of a <see cref="T:C1.C1PreviewClient.TabPosition"/> object in the current collection.
            </summary>
            <param name="tabPosition">The object to get the index of.</param>
            <returns>The index of <paramref name="tabPosition"/> in the current collection.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.TabPositionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.TabPosition"/> at the specified index. 
            </summary>
            <param name="index">The index in the current collection.</param>
            <returns>The TabPosition at the specified index.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.RenderTocItem">
            <summary>
            Represents a single entry in the table of contents (TOC; <see cref="P:C1.C1PreviewClient.RenderTocItem.RenderToc"/>) in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTocItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderTocItem"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTocItem.#ctor(C1.C1PreviewClient.RenderToc)">
            <summary>
            For internal use only.
            </summary>
            <param name="renderToc"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderTocItem.OnParentAdd(C1.C1PreviewClient.RenderObject)">
            <summary>
            For internal use only.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTocItem.PageNumberTag">
            <summary>
            Gets a string containing the page number tag enclosed in tag parentheses
            (<b>"[LPN]"</b> by default).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTocItem.RenderToc">
            <summary>
            Gets the <see cref="P:C1.C1PreviewClient.RenderTocItem.RenderToc"/> object containing the current TOC entry.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTocItem.HasText">
            <summary>
            Gets a value indicating whether the current TOC entry will produce visible
            output in the generated document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTocItem.TextLength">
            <summary>
            Gets the count of characters in the current TOC entry.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderTocItem.Level">
            <summary>
            Gets or sets the level of the current entry in the TOC.
            This value is 1-based, and determines the indentation of the current item in the generated TOC.
            The default value is <b>1</b>, which does not indent the entry.
            Nested levels are indented by the <see cref="!:C1.C1Preview.RenderToc.LevelSpacing"/> amount.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.RenderToc">
            <summary>
            Represents a table of contents (TOC) in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            Individual TOC entries are represented by <see cref="T:C1.C1PreviewClient.RenderTocItem"/> objects.
            This object may also contain other types of render objects
            (this may be used e.g. to show a TOC header).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.RenderToc.c_DefFillChar">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.RenderToc.c_DefLevelSpacing">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.RenderToc"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.#ctor(C1.C1PreviewClient.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.ShouldSerializeLevelSpacing">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.RenderToc.LevelSpacing"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.RenderToc.LevelSpacing"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.InitRenderObject">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.GetDefaultFlags">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.GetDefaultSplitVertBehavior">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.OnChildAdd(C1.C1PreviewClient.RenderObject)">
            <summary>
            For internal use only.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.C1PreviewClient.RenderObject"/> to the current object.
            Calls the base <see cref="M:C1.C1PreviewClient.RenderObject.AssignFrom(C1.C1PreviewClient.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> method.
            If <paramref name="source"/> is a <see cref="T:C1.C1PreviewClient.RenderToc"/>, also copies <see cref="T:C1.C1PreviewClient.RenderToc"/>-specific properties.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="assignDataBinding">Indicates whether the <see cref="!:DataBinding"/> property should be copied.</param>
            <param name="assignChildren">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Children"/> collection should be copied.</param>
            <param name="assignAnchors">Indicates whether the elements of the <see cref="P:C1.C1PreviewClient.RenderObject.Anchors"/> collection should be copied.</param>
            <param name="assignHyperlink">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Hyperlink"/> property should be copied.</param>
            <param name="assignName">Indicates whether the <see cref="P:C1.C1PreviewClient.RenderObject.Name"/> property should be copied.</param>
            <param name="assignStyle">Indicates whether the <see cref="T:C1.C1PreviewClient.Style"/> property should be copied.</param>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AddItem(System.String,C1.C1PreviewClient.C1Hyperlink)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.RenderTocItem"/> initialized with the specified
            text and hyperlink, and adds it to the current TOC.
            </summary>
            <param name="text">A text representing the TOC item that is being added.</param>
            <param name="hyperlink">A <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> which is the target of the TOC item.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.RenderTocItem"/> that was created and added to the current TOC.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AddItem(System.String,C1.C1PreviewClient.C1Hyperlink,System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.RenderTocItem"/> initialized with the specified
            text, hyperlink and level, and adds it to the current TOC.
            </summary>
            <param name="text">A text representing the TOC item that is being added.</param>
            <param name="hyperlink">A <see cref="T:C1.C1PreviewClient.C1Hyperlink"/> which is the target of the TOC item.</param>
            <param name="level">The <see cref="P:C1.C1PreviewClient.RenderTocItem.Level"/> of the TOC item.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.RenderTocItem"/> that was created and added to the current TOC.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AddItem(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.RenderTocItem"/> initialized with the specified
            text and target page number, and adds it to the current TOC.
            </summary>
            <param name="text">A text representing the TOC item that is being added.</param>
            <param name="pageNo">The page number which is the target of the TOC item.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.RenderTocItem"/> that was created and added to the current TOC.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AddItem(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.RenderTocItem"/> initialized with the specified
            text, target page number and level, and adds it to the current TOC.
            </summary>
            <param name="text">A text representing the TOC item that is being added.</param>
            <param name="pageNo">The page number which is the target of the TOC item.</param>
            <param name="level">The <see cref="P:C1.C1PreviewClient.RenderTocItem.Level"/> of the TOC item.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.RenderTocItem"/> that was created and added to the current TOC.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AddItem(System.String,C1.C1PreviewClient.RenderObject)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.RenderTocItem"/> initialized with the specified
            text and target <see cref="T:C1.C1PreviewClient.RenderObject"/>, and adds it to the current TOC.
            </summary>
            <param name="text">A text representing the TOC item that is being added.</param>
            <param name="target">A <see cref="T:C1.C1PreviewClient.RenderObject"/> which is the target of the TOC item.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.RenderTocItem"/> that was created and added to the current TOC.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AddItem(System.String,C1.C1PreviewClient.RenderObject,System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.RenderTocItem"/> initialized with the specified
            text, target <see cref="T:C1.C1PreviewClient.RenderObject"/> and level, and adds it to the current TOC.
            </summary>
            <param name="text">A text representing the TOC item that is being added.</param>
            <param name="target">A <see cref="T:C1.C1PreviewClient.RenderObject"/> which is the target of the TOC item.</param>
            <param name="level">The <see cref="P:C1.C1PreviewClient.RenderTocItem.Level"/> of the TOC item.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.RenderTocItem"/> that was created and added to the current TOC.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AddItem(System.String,C1.C1PreviewClient.ParagraphObject)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.RenderTocItem"/> initialized with the specified
            text and target <see cref="T:C1.C1PreviewClient.ParagraphObject"/>, and adds it to the current TOC.
            </summary>
            <param name="text">A text representing the TOC item that is being added.</param>
            <param name="target">A <see cref="T:C1.C1PreviewClient.ParagraphObject"/> which is the target of the TOC item.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.RenderTocItem"/> that was created and added to the current TOC.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.RenderToc.AddItem(System.String,C1.C1PreviewClient.ParagraphObject,System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1PreviewClient.RenderTocItem"/> initialized with the specified
            text, target <see cref="T:C1.C1PreviewClient.ParagraphObject"/> and level, and adds it to the current TOC.
            </summary>
            <param name="text">A text representing the TOC item that is being added.</param>
            <param name="target">A <see cref="T:C1.C1PreviewClient.ParagraphObject"/> which is the target of the TOC item.</param>
            <param name="level">The <see cref="P:C1.C1PreviewClient.RenderTocItem.Level"/> of the TOC item.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.RenderTocItem"/> that was created and added to the current TOC.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.RenderToc.ShowPageNumbers">
            <summary>
            Gets or sets a value indicating whether page numbers should be displayed in the current TOC.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderToc.PageNumbersAtRight">
            <summary>
            Gets or sets a value indicating whether page numbers should be right-aligned within the current TOC.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderToc.LinksOnPageNumbersOnly">
            <summary>
            Gets or sets a value indicating whether only the page numbers in the
            rendered TOC represent clickable hyperlinks (otherwise, the entire
            area between an entry's caption and page number can be clicked).
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderToc.FillChar">
            <summary>
            Gets or sets a character used to fill empty spaces between TOC items and corresponding page numbers.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.RenderToc.LevelSpacing">
            <summary>
            Gets or sets the indentation step of TOC items.
            Items with <see cref="P:C1.C1PreviewClient.RenderTocItem.Level"/> equal to 1 are not indented,
            each next level is indented by this value.
            The default value is <b>10mm</b>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Scripting.IScriptContext">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1TypeSerializationEnum">
            <summary>
            For internal use.
            Determines how item types are serialized
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.C1TypeSerializationEnum.None">
            <summary>
            Name of type will NOT be serialized.
            On deserialization object will be created and assigned to the field or property,
            Type of created object will be determinated by the type of field or property.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.C1TypeSerializationEnum.Default">
            <summary>
            Item type is serialized with using of aliases, 
            if alias is not found type will be serialized with assembly name.
            On deserialization object will be created and assigned to the field or property.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.C1TypeSerializationEnum.Content">
            <summary>
            Indicates that:
            Item's type should not be serialized and on deserialization
            value of property should be read from object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1TypeSerializationAttribute">
            <summary>
            For internal use.
            Forces the serializer to serialize the type name of a property or field.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1TypeSerializationAttribute.#ctor(C1.C1PreviewClient.Serialization.C1TypeSerializationEnum)">
            <summary>
            For internal use.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1TypeSerializationAttribute.ToString">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1TypeSerializationAttribute.Type">
            <summary>
            For internal use.
            Defines how the type name of a property of field will be serialized.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1CollectionSerializationAttribute">
            <summary>
            For internal use.
            This attribute defines additional properties for collections properties or fields.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1CollectionSerializationAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="itemsAreReferences"></param>
            <param name="itemsAreReferencesDest"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1CollectionSerializationAttribute.#ctor(System.Boolean,System.Boolean,System.Object[])">
            <summary>
            For internal use.
            </summary>
            <param name="itemsAreReferences"></param>
            <param name="itemsAreReferencesDest"></param>
            <param name="typesTable"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1CollectionSerializationAttribute.#ctor(System.String,System.Type)">
            <summary>
            For internal use.
            </summary>
            <param name="alias"></param>
            <param name="type"></param>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1CollectionSerializationAttribute.ItemsAreReferences">
            <summary>
            For internal use.
            Collection's items are references.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1CollectionSerializationAttribute.ItemsAreReferencesDest">
            <summary>
            For internal use.
            Collection's items can be referenced by other properties.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1CollectionSerializationAttribute.Aliases">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1CollectionSerializationAttribute.Types">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1ParentReferenceAttribute">
            <summary>
            For internal use.
            Allows to mark field or property as "parent reference".
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1ParentReferenceAttribute.#ctor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1ClassSerializationAttribute">
            <summary>
            For internal use.
            Allows to define additional properties for class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1ClassSerializationAttribute.#ctor(System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="defaultSerializationOff"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1ClassSerializationAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="defaultSerializationOff"></param>
            <param name="ignoreTypeConverter"></param>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1ClassSerializationAttribute.DefaultSerializationOff">
            <summary>
            For internal use.
            Indicates that by default the public fields or properties are not serialized.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1ClassSerializationAttribute.IgnoreTypeConverter">
            <summary>
            For internal use.
            Indicates that the type converter specified for class should be ignored
            and not used during serialization.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1ReferenceAttribute">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1ReferenceAttribute.#ctor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1ReferenceDestAttribute">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1ReferenceDestAttribute.#ctor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1CheckSerializableAttribute">
            <summary>
            For internal use.
            Indicates that the object should be serialized only if it supports deserialization.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1CheckSerializableAttribute.#ctor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1IgnoreDeserializeErrorAttribute">
            <summary>
            For internal use.
            Indicates that the error occurs on deserialization value of this property should be ignored.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1IgnoreDeserializeErrorAttribute.#ctor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1C1dOnlySerializableAttribute">
            <summary>
            For internal use.
            Indicates that the property or field is serializable only in C1D format.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1C1dOnlySerializableAttribute.#ctor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1OpenXmlSerializationAttribute">
            <summary>
            For internal use.
            Defines options for serialization in Open Xml format.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1OpenXmlSerializationAttribute.#ctor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1OpenXmlSerializationAttribute.#ctor(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="partName"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1OpenXmlSerializationAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="autoPartName"></param>
            <param name="autoPartNamePath"></param>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1OpenXmlSerializationAttribute.PartName">
            <summary>
            For internal use.
            Gets the name of part in open xml file.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1OpenXmlSerializationAttribute.AutoPartName">
            <summary>
            For internal use.
            Gets the value indicating that the name of part
            should be autogenerated in the path defined by Path property.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1OpenXmlSerializationAttribute.AutoPartNamePath">
            <summary>
            For internal use.
            Gets the path where part name shoulbe auto generated.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.IC1SerializeContext">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.IC1SerializeContext.Serializer">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1FormatVersion">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1FormatVersion.#ctor(System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="formatVersion"></param>
            <param name="minAssemblyVersion"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1FormatVersion.ToString">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1FormatVersion.Parse(System.String,System.Boolean)">
            <summary>
            For internal use.
            Converts a string to the C1FormatVersion object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="throwException">Indicates the exception should be thrown if string can not be converted to C1FormatVersion.</param>
            <returns>Returns instance of C1FormatVersion object or null.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1FormatVersion.FormatVersion">
            <summary>
            For internal use.
            Gets the version of C1D document format.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1FormatVersion.AssemblyVersion">
            <summary>
            For internal use.
            Gets the AssemblyVersion of C1.C1Preview.2.dll assemly
            that supports this FormatVersion.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1FormatVersion.TypeConverter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1FormatVersion.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1FormatVersion.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.Serializer">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.IsReference(System.String,System.Int64@)">
            <summary>
            Checks is passed string a reference on some object or not.
            </summary>
            <param name="s">The string to check.</param>
            <param name="referenceId">Contains the reference value if string is a reference.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.OnLongOperation(System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="complete"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.GetTypeName(System.Type,System.Boolean)">
            <summary>
            For internal use only.
            </summary>
            <param name="type"></param>
            <param name="assemblyQualified"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.GetAssemblyQualifiedTypeName(System.Type)">
            <summary>
            Returns the "almost" fully qualified type name - i.e. with assembly name,
            but without version, culture, and public key.
            </summary>
            <param name="type">Type</param>
            <returns>Type name, assembly name</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.IsTypeAliasValid(System.Type,System.String)">
            <summary>
            For internal use.
            Checks the type's alias can be registered the or not.
            </summary>
            <param name="type">Type object.</param>
            <param name="alias">Alias for type.</param>
            <returns>Returns true if alias is valid and can be registered.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.RegisterTypeAlias(System.Type,System.String)">
            <summary>
            For internal use.
            Registers new type's alias.
            </summary>
            <param name="type">Type object.</param>
            <param name="alias">Alias for type.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.String,System.Object)">
            <summary>
            For internal use.
            Serializes an object to a file, the format (C1D or C1DX)
            is determinated by the file extension. If the file does not have an
            extension or the extension is not C1D/C1DX, the C1D format is used.
            </summary>
            <param name="fileName">The target file name.</param>
            <param name="o">The object to serialize.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            For internal use.
            Serializes an object to a stream in C1D format.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="o">The object to serialize.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.String,System.Object,C1.C1PreviewClient.C1DocumentFormatEnum)">
            <summary>
            For internal use.
            Serializes an object to a file.
            </summary>
            <param name="fileName">The target file name.</param>
            <param name="o">The object to serialize.</param>
            <param name="format">The document persistence format to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,C1.C1PreviewClient.C1DocumentFormatEnum)">
            <summary>
            For internal use.
            Serializes an object to a stream.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="o">The object to serialize.</param>
            <param name="format">The document persistence format to use.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.String,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            For internal use.
            Serializes the specified Object and writes the XML-document instance to a file. 
            </summary>
            <param name="fileName">Name of destination file.</param>
            <param name="o">The Object to serialize.</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlTextWriter@)">
            <summary>
            For internal use.
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream. 
            DOES NOT close the underlying stream. Useful for copying objects.
            Caller is responsible to call out writer.Close() to close writer and underlying stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
            <param name="writer">The XmlWriter object reference. Call writer.Close after working with stream/writer.</param> 
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            For internal use.
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.Xml.XmlTextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            For internal use.
            Serializes the specified Object and writes the XML-document instance to a file using the specified XmlWriter
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize.</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            For internal use.
            Serializes the specified object to an XML formatted string.
            </summary>
            <param name="o">The Object to serialize.</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
            <returns>String with results of serialization.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.CreateFormattedSerializer">
            <summary>
            For internal use.
            Creates a Serializer class instances that formats the output XML.
            </summary>
            <returns>The created Serializer object.</returns>
        </member>
        <member name="E:C1.C1PreviewClient.Serialization.Serializer.LongOperation">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.Serializer.Formatting">
            <summary>
            For internal use.
            Sets or returns formatting used by the XML writer.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.Serializer.Indentation">
            <summary>
            For internal use.
            Sets or returns indentation used by the XML writer.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.Serializer.ProgressMax">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.Serializer.ProgressTypes">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.TypeInfoCache.GetTypeInfo(System.Type)">
            <summary>
            Gets information about a type, if type does not exist in cache
            then the new TypeInfo object is created for it.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IsCollection">
            <summary>
            Indicates that the property/field is a collection.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IsArray">
            <summary>
            Indicates that the property/field is an array.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IsAttribute">
            <summary>
            Indicates that the property/field must be serialized as attribute.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IsReference">
            <summary>
            Indicates that the property/field should be serialized as reference.
            This field can be true only for *non* value properties/fields.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IsReferenceDest">
            <summary>
            Indicates that the property/field contains an object
            on which can reference properties/fields of other objects.
            This field can be true only for non value fields/properties,
            also these properties / fields should be serialized as XML elements (IsAttribute = false).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IsItemsAreReferences">
            <summary>
            Like IsReference but for items in collection.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IsItemsAreReferencesDest">
            <summary>
            Like IsReferenceDest but for items in collection.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.CheckSerializable">
            <summary>
            Indicates that the property should be serialized only if sit supports deserialzation.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IgnoreDeserializeError">
            <summary>
            Indicates that the error occurs during deserialization value of this property should be ignored.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.TypeSerialization">
            <summary>
            Defines how the type name of property/field should be serialized.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.IsSerializationNeeded(System.Object,System.Object@)">
            <summary>
            Checks is serialization of the field/property needed or not.
            Serialization is needed if:
            2. ShouldSerializeXXX method is not defined in obj for member described by this TypeInfoItem object
            or this method returns true for value specified by propValue parameter.
            1. propValue does not equal DefaultValue for member described by this TypeInfoItem object.
            </summary>
            <param name="obj">Object containing property or field described by this TypeInfoItem object.</param>
            <param name="propValue">Contains value of property on exit.</param>
            <returns>Returns true if property of obj must be serialized.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.Serializer.TypeInfoItem.GetValue(System.Object)">
            <summary>
            Returns the value of the field/property described by this TypeInfoItem class.
            </summary>
            <param name="obj">Object property/field of that is described by this TypeInfoItem object.</param>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1DBrush">
            <summary>
            For internal use only.
            Serializes the Brush class as XmlElement.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.#ctor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.#ctor(System.Drawing.Brush)">
            <summary>
            For internal use only.
            </summary>
            <param name="brush"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeColor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeHatchStyle">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeForegroundColor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeBackgroundColor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeGammaCorrection">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeWrapMode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeCenterColor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeImage">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeCenterPoint">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeRectangle">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.ShouldSerializeFocusScales">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DBrush.BuildBrush">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.BlendFactors">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.BlendPositions">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.InterpolationColorsColors">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.InterpolationColorsPositions">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.LinearColors">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.Rectangle">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.Transform">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.CenterPoint">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.FocusScales">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.SurroundColors">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DBrush.Image">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1DImageData">
            <summary>
            For internal use only.
            Class with the only purpose in life - serialize images.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DImageData.#ctor(System.Drawing.Image)">
            <summary>
            For internal use only.
            </summary>
            <param name="image"></param>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DImageData.Image">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1DImageData.TypeConverter">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DImageData.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DImageData.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1DIconData">
            <summary>
            For internal use only.
            Class with the only purpose in life - serialize icons.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DIconData.#ctor(System.Drawing.Icon)">
            <summary>
            For internal use only.
            </summary>
            <param name="icon"></param>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DIconData.Icon">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1DIconData.TypeConverter">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DIconData.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DIconData.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1DData">
            <summary>
            For internal use only.
            Class with the only purpose in life - serialize images.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DData.#ctor(System.Byte[])">
            <summary>
            For internal use only.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:C1.C1PreviewClient.Serialization.C1DData.Data">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Serialization.C1DData.TypeConverter">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DData.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Serialization.C1DData.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.FlowAlignEnum">
            <summary>
            Specifies the alignment within their container of objects in the block flow
            (see <see cref="P:C1.C1PreviewClient.RenderObject.Stacking"/>).
            This is the type of <see cref="P:C1.C1PreviewClient.Style.FlowAlignChildren"/> and <see cref="P:C1.C1PreviewClient.Style.FlowAlign"/>
            properties.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.FlowAlignEnum.Default">
            <summary>
            <para>
            If specified for a child object's <see cref="P:C1.C1PreviewClient.Style.FlowAlign"/>,
            indicates that the parent's <see cref="P:C1.C1PreviewClient.Style.FlowAlignChildren"/> value is used.
            </para>
            <para>
            If specified for a <see cref="P:C1.C1PreviewClient.Style.FlowAlignChildren"/>, equivalent to
            <see cref="F:C1.C1PreviewClient.FlowAlignEnum.Near"/>.
            </para>
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.FlowAlignEnum.Near">
            <summary>
            Objects are left-aligned for top to bottom flow (<see cref="F:C1.C1PreviewClient.StackingRulesEnum.BlockTopToBottom"/>),
            and top-aligned for left to right flow (<see cref="F:C1.C1PreviewClient.StackingRulesEnum.BlockLeftToRight"/>).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.FlowAlignEnum.Center">
            <summary>
            Objects are centered horizontally for top to bottom flow (<see cref="F:C1.C1PreviewClient.StackingRulesEnum.BlockTopToBottom"/>),
            and vertically for left to right flow (<see cref="F:C1.C1PreviewClient.StackingRulesEnum.BlockLeftToRight"/>).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.FlowAlignEnum.Far">
            <summary>
            Objects are right-aligned for top to bottom flow (<see cref="F:C1.C1PreviewClient.StackingRulesEnum.BlockTopToBottom"/>),
            and bottom-aligned for left to right flow (<see cref="F:C1.C1PreviewClient.StackingRulesEnum.BlockLeftToRight"/>).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.HyphenationModeEnum">
            <summary>
            Specifies how text is split when wrapping long lines.
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.HyphenationModeEnum.None">
            <summary>
            Words are not split.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.HyphenationModeEnum.SplitWord">
            <summary>
            Words can be split at any pos.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.AlignHorzEnum">
            <summary>
            Specifies the horizontal alignment of text within a containing object.
            
            This is the type of <see cref="P:C1.C1PreviewClient.Style.TextAlignHorz"/> property.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignHorzEnum.Left">
            <summary>
            The text is left-aligned.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignHorzEnum.Center">
            <summary>
            The text is centered horizontally.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignHorzEnum.Right">
            <summary>
            The text is right-aligned.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignHorzEnum.Justify">
            <summary>
            The text is justified horizontally by widening the white spaces existing in the text.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignHorzEnum.JustifyChars">
            <summary>
            The text is justified horizontally by adding white spaces between all characters in the text.
            <!-- TODO: remove this limitation: -->
            (Note that if <see cref="P:C1.C1PreviewClient.C1PrintDocument.UseGdiPlusTextRendering"/> is <c>false</c>,
            this mode is not supported, and <see cref="F:C1.C1PreviewClient.AlignHorzEnum.Justify"/> is used instead.)
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.AlignVertEnum">
            <summary>
            Specifies the vertical alignment of text within a containing object.
            
            This is the type of <see cref="P:C1.C1PreviewClient.Style.TextAlignVert"/> property.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignVertEnum.Top">
            <summary>
            The text is top-aligned.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignVertEnum.Center">
            <summary>
            The text is centered vertically.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignVertEnum.Bottom">
            <summary>
            The text is bottom-aligned.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignVertEnum.Justify">
            <summary>
            The text is justified vertically.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.AlignVertEnum.JustifyChars">
            <summary>
            When applied to vertical text (<see cref="!:RenderVerticalText"/>, <see cref="!:RenderVerticalParagraph"/>),
            justifies text vertically by adding white spaces between all characters.
            <!-- TODO: remove this limitation: -->
            (Note that if <see cref="P:C1.C1PreviewClient.C1PrintDocument.UseGdiPlusTextRendering"/> is <c>false</c>,
            this mode is not supported, and <see cref="F:C1.C1PreviewClient.AlignVertEnum.Justify"/> is used instead.)
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ImageAlignHorzEnum">
            <summary>
            Specifies the horizontal alignment of foreground and background images.
            
            This is the type of <see cref="P:C1.C1PreviewClient.ImageAlign.AlignHorz"/> property
            on <see cref="P:C1.C1PreviewClient.Style.ImageAlign"/> and <see cref="P:C1.C1PreviewClient.Style.BackgroundImageAlign"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ImageAlignHorzEnum.Left">
            <summary>
            The image is left-aligned.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ImageAlignHorzEnum.Center">
            <summary>
            The image is centered horizontally.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ImageAlignHorzEnum.Right">
            <summary>
            The image is right-aligned.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ImageAlignVertEnum">
            <summary>
            Specifies the vertical alignment of foreground and background images.
            
            This is the type of <see cref="P:C1.C1PreviewClient.ImageAlign.AlignVert"/> property
            on <see cref="P:C1.C1PreviewClient.Style.ImageAlign"/> and <see cref="P:C1.C1PreviewClient.Style.BackgroundImageAlign"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ImageAlignVertEnum.Top">
            <summary>
            The image is top-aligned.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ImageAlignVertEnum.Center">
            <summary>
            The image is centered vertically.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ImageAlignVertEnum.Bottom">
            <summary>
            The image is bottom-aligned.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TextPositionEnum">
            <summary>
            Specifies the subscript and superscript properties of text.
            
            This is the type of <see cref="P:C1.C1PreviewClient.Style.TextPosition"/> property.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TextPositionEnum.Normal">
            <summary>
            The text is positioned and sized normally.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TextPositionEnum.Subscript">
            <summary>
            The text is positioned and sized as subscript.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TextPositionEnum.Superscript">
            <summary>
            The text is positioned and sized as superscript.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IImageAlign">
            <summary>
            Defines image alignment properties.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.AlignVert">
            <summary>
            Gets or sets the vertical alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.StretchHorz">
            <summary>
            Gets or sets a value indicating whether an image is stretched horizontally to fill its container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.StretchVert">
            <summary>
            Gets or sets a value indicating whether an image is stretched vertically to fill its container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether the original aspect ratio is preserved when rendering an image.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.TileHorz">
            <summary>
            Gets or sets a value indicating whether an image is tiled horizontally within its container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.TileVert">
            <summary>
            Gets or sets a value indicating whether an image is tiled vertically within its container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.BestFit">
            <summary>
            Gets or sets a value indicating whether an image should be resized to best fit within its container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.AlignHorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IImageAlign.AlignHorz"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.AlignVertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IImageAlign.AlignVert"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.StretchHorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IImageAlign.StretchHorz"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.StretchVertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IImageAlign.StretchVert"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.KeepAspectRatioExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IImageAlign.KeepAspectRatio"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.TileHorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IImageAlign.TileHorz"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IImageAlign.TileVertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IImageAlign.TileVert"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ImageAlign">
            <summary>
            Represents the alignment of an image within its container.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.ImageAlign.#ctor(C1.C1PreviewClient.ImageAlignHorzEnum,C1.C1PreviewClient.ImageAlignVertEnum,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.ImageAlign"/> class.
            </summary>
            <param name="alignHorz">A value assigned to <see cref="P:C1.C1PreviewClient.ImageAlign.AlignHorz"/>.</param>
            <param name="alignVert">A value assigned to <see cref="P:C1.C1PreviewClient.ImageAlign.AlignVert"/>.</param>
            <param name="stretchHorz">A value assigned to <see cref="P:C1.C1PreviewClient.ImageAlign.StretchHorz"/>.</param>
            <param name="stretchVert">A value assigned to <see cref="P:C1.C1PreviewClient.ImageAlign.StretchVert"/>.</param>
            <param name="keepAspectRatio">A value assigned to <see cref="P:C1.C1PreviewClient.ImageAlign.KeepAspectRatio"/>.</param>
            <param name="tileHorz">A value assigned to <see cref="P:C1.C1PreviewClient.ImageAlign.TileHorz"/>.</param>
            <param name="tileVert">A value assigned to <see cref="P:C1.C1PreviewClient.ImageAlign.TileVert"/>.</param>
        </member>
        <member name="M:C1.C1PreviewClient.ImageAlign.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:C1.C1PreviewClient.ImageAlign"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:C1.C1PreviewClient.ImageAlign"/>.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.AlignVert">
            <summary>
            Gets or sets the vertical alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.StretchHorz">
            <summary>
            Gets or sets a value indicating whether an image is stretched horizontally to fill its container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.StretchVert">
            <summary>
            Gets or sets a value indicating whether an image is stretched vertically to fill its container.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether the original aspect ratio is preserved when rendering an image.
            Used when <see cref="P:C1.C1PreviewClient.ImageAlign.StretchHorz"/> or <see cref="P:C1.C1PreviewClient.ImageAlign.StretchVert"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.TileHorz">
            <summary>
            Gets or sets a value indicating whether an image is tiled horizontally within its container.
            Ignored if <see cref="P:C1.C1PreviewClient.ImageAlign.StretchHorz"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.TileVert">
            <summary>
            Gets or sets a value indicating whether an image is tiled vertically within its container.
            Ignored if <see cref="P:C1.C1PreviewClient.ImageAlign.StretchVert"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.BestFit">
            <summary>
            Gets or sets a value indicating whether an image should be resized to best fit within its container.
            See <b>remarks</b> for details.
            </summary>
            <remarks>
            <para>
            Getting this property returns a Boolean conjunction (<b>AND</b>) of the
            <see cref="P:C1.C1PreviewClient.ImageAlign.StretchHorz"/>, <see cref="P:C1.C1PreviewClient.ImageAlign.StretchVert"/> and <see cref="P:C1.C1PreviewClient.ImageAlign.KeepAspectRatio"/> values.
            </para>
            <para>
            Setting this property to a <b>true</b> value sets
            <see cref="P:C1.C1PreviewClient.ImageAlign.StretchHorz"/>, <see cref="P:C1.C1PreviewClient.ImageAlign.StretchVert"/> and <see cref="P:C1.C1PreviewClient.ImageAlign.KeepAspectRatio"/> to <b>true</b>.
            </para>
            <para>
            Setting this property to a <b>false</b> value sets
            <see cref="P:C1.C1PreviewClient.ImageAlign.KeepAspectRatio"/> only to <b>false</b>.
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.AlignHorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.ImageAlign.AlignHorz"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.AlignVertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.ImageAlign.AlignVert"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.StretchHorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.ImageAlign.StretchHorz"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.StretchVertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.ImageAlign.StretchVert"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.KeepAspectRatioExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.ImageAlign.KeepAspectRatio"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.TileHorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.ImageAlign.TileHorz"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.TileVertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.ImageAlign.TileVert"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.ImageAlign.Default">
            <summary>
            Gets the default image alignment.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Offsets">
            <summary>
            A structure representing four <see cref="T:C1.C1PreviewClient.Unit"/> values
            corresponding to the four sides of a rectangluar area.
            Used by <see cref="P:C1.C1PreviewClient.Style.Padding"/> and <see cref="P:C1.C1PreviewClient.Style.Spacing"/> properties.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IOffsets">
            <summary>
            Describes four <see cref="T:C1.C1PreviewClient.Unit"/> values
            corresponding to the four sides of a rectangluar area.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.Left">
            <summary>
            Gets or sets the left offset value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.Top">
            <summary>
            Gets or sets the top offset value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.Right">
            <summary>
            Gets or sets the right offset value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.Bottom">
            <summary>
            Gets or sets the bottom offset value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.All">
            <summary>
            Sets all four offset values.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.LeftExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IOffsets.Left"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.TopExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IOffsets.Top"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.RightExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IOffsets.Right"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IOffsets.BottomExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IOffsets.Bottom"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Offsets.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Offsets"/> structure,
            assigning the <see cref="P:C1.C1PreviewClient.Offsets.Left"/>, <see cref="P:C1.C1PreviewClient.Offsets.Top"/>, <see cref="P:C1.C1PreviewClient.Offsets.Right"/> and <see cref="P:C1.C1PreviewClient.Offsets.Bottom"/>
            values.
            </summary>
            <param name="left">A string representing the <see cref="T:C1.C1PreviewClient.Unit"/> value assigned to the <see cref="P:C1.C1PreviewClient.Offsets.Left"/> property.</param>
            <param name="top">A string representing the <see cref="T:C1.C1PreviewClient.Unit"/> value assigned to the <see cref="P:C1.C1PreviewClient.Offsets.Top"/> property.</param>
            <param name="right">A string representing the <see cref="T:C1.C1PreviewClient.Unit"/> value assigned to the <see cref="P:C1.C1PreviewClient.Offsets.Right"/> property.</param>
            <param name="bottom">A string representing the <see cref="T:C1.C1PreviewClient.Unit"/> value assigned to the <see cref="P:C1.C1PreviewClient.Offsets.Bottom"/> property.</param>
            <remarks>
            Only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.Offsets.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Offsets"/> structure,
            assigning a single value to all four offset properties.
            </summary>
            <param name="all">A string representing the <see cref="T:C1.C1PreviewClient.Unit"/> value assigned to all four offsets.</param>
            <remarks>
            Only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.Offsets.#ctor(C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Offsets"/> structure,
            assigning a single value to all four offset properties.
            </summary>
            <param name="all">A <see cref="T:C1.C1PreviewClient.Unit"/> value assigned to all four offsets.</param>
            <remarks>
            Only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.Left">
            <summary>
            Gets or sets the left offset value.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.Top">
            <summary>
            Gets or sets the top offset value.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.Right">
            <summary>
            Gets or sets the right offset value.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.Bottom">
            <summary>
            Gets or sets the bottom offset value.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.All">
            <summary>
            Sets all four offset values.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.LeftExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Offsets.Left"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.TopExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Offsets.Top"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.RightExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Offsets.Right"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Offsets.BottomExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Offsets.Bottom"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LineDef">
            <summary>
            Represents a set of attributes used to draw lines.
            This class is immutable.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LineDef"/> class
            with default values (1pt wide black line).
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LineDef"/> class,
            assigning line color.
            </summary>
            <param name="color">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.#ctor(C1.C1PreviewClient.Unit,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LineDef"/> class,
            assigning line width and color.
            </summary>
            <param name="width">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.#ctor(C1.C1PreviewClient.Unit,System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LineDef"/> class,
            assigning line width, color and dash style.
            </summary>
            <param name="width">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="style">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.DashStyle"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.#ctor(C1.C1PreviewClient.Unit,System.Drawing.Color,System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LineDef"/> class,
            assigning line width, color and dash pattern.
            <see cref="P:C1.C1PreviewClient.LineDef.DashStyle"/> is set to <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom"/>.
            </summary>
            <param name="width">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="dashPattern">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.DashPattern"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.#ctor(C1.C1PreviewClient.Unit,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LineDef"/> class,
            assigning line width, color, dash background color and dash style.
            </summary>
            <param name="width">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="backColor">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.BackColor"/> property.</param>
            <param name="style">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.DashStyle"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.#ctor(C1.C1PreviewClient.Unit,System.Drawing.Color,System.Drawing.Color,System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LineDef"/> class,
            assigning line width, color, dash background color and dash pattern.
            <see cref="P:C1.C1PreviewClient.LineDef.DashStyle"/> is set to <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom"/>.
            </summary>
            <param name="width">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.Color"/> property.</param>
            <param name="backColor">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.BackColor"/> property.</param>
            <param name="dashPattern">A value assigned to the <see cref="P:C1.C1PreviewClient.LineDef.DashPattern"/> property.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.IsSameStyle(C1.C1PreviewClient.LineDef)">
            <summary>
            Tests whether the current and another <see cref="T:C1.C1PreviewClient.LineDef"/> objects define
            same line styles - i.e. whether the values of <see cref="P:C1.C1PreviewClient.LineDef.Color"/>,
            <see cref="P:C1.C1PreviewClient.LineDef.BackColor"/>, <see cref="P:C1.C1PreviewClient.LineDef.DashStyle"/> and
            <see cref="P:C1.C1PreviewClient.LineDef.DashPattern"/> properties are the same.
            Note that this method does NOT compare the lines' widths.
            </summary>
            <param name="line">A <see cref="T:C1.C1PreviewClient.LineDef"/> to compare to the current one.</param>
            <returns><b>true</b> if the two lines have same styles, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:C1.C1PreviewClient.LineDef"/> object is equal to the current object.
            This method compares the property values on the objects.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><b>true</b> if the specified object's properties are equal to the current one's, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:C1.C1PreviewClient.LineDef"/> type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.Parse(System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:C1.C1PreviewClient.LineDef"/> object, and initialises it with values
            acquired by parsing a string representation of a <see cref="T:C1.C1PreviewClient.LineDef"/>.
            </summary>
            <param name="s">A string representing a <see cref="T:C1.C1PreviewClient.LineDef"/> (see <see cref="M:C1.C1PreviewClient.LineDef.ToString"/>).</param>
            <param name="throwOnError">If <b>true</b>, an exception is thrown if an error occurs while parsing; otherwise, errors are ignored.</param>
            <returns>The new <see cref="T:C1.C1PreviewClient.LineDef"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.Parse(System.String,System.Boolean,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            For internal use only.
            </summary>
            <param name="s"></param>
            <param name="throwOnError"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.LineDef.Color">
            <summary>
            Gets the line color.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineDef.Width">
            <summary>
            Gets the line width (thickness).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineDef.BackColor">
            <summary>
            Gets the the background color of spaces between the dashes of a dashed line.
            Not used if <see cref="P:C1.C1PreviewClient.LineDef.DashStyle"/> is <see cref="F:System.Drawing.Drawing2D.DashStyle.Solid"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineDef.DashStyle">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.DashStyle"/> of the current <see cref="T:C1.C1PreviewClient.LineDef"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineDef.DashPattern">
            <summary>
            Gets an array of custom dashes and spaces.
            </summary>
            <remarks>
            This property is used only if
            <see cref="P:C1.C1PreviewClient.LineDef.DashStyle"/> is set to <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom"/>.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.LineDef.Empty">
            <summary>
            Represents an empty line (with emtpy color and zero width).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineDef.Default">
            <summary>
            Represents the default regular line (solid black, 1pt wide).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LineDef.DefaultBold">
            <summary>
            Represents the default bold line (solid black, 2pt wide).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LineDef.TypeConverter">
            <summary>
            Used to convert objects of <see cref="T:C1.C1PreviewClient.LineDef"/> type.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.LineDef"/>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>The converted <see cref="T:C1.C1PreviewClient.LineDef"/> object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LineDef.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.Borders">
            <summary>
            A structure defining the four borders around a rectangular area.
            Each border is represented by a <see cref="T:C1.C1PreviewClient.LineDef"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IBorders">
            <summary>
            Describes four borders around a rectangular area.
            Each border is represented by a <see cref="T:C1.C1PreviewClient.LineDef"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.Left">
            <summary>
            Gets or sets the left border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.Top">
            <summary>
            Gets or sets the top border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.Right">
            <summary>
            Gets or sets the right border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.Bottom">
            <summary>
            Gets or sets the bottom border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.All">
            <summary>
            Sets all four borders.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.RadiusX">
            <summary>
            Gets or sets the width of the ellipse used to draw the rounded corners of the border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.RadiusY">
            <summary>
            Gets or sets the height of the ellipse used to draw the rounded corners of the border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.IsRound">
            <summary>
            Gets a value indicating whether the current borders is rounded
            (i.e. whether both <see cref="P:C1.C1PreviewClient.IBorders.RadiusX"/> and <see cref="P:C1.C1PreviewClient.IBorders.RadiusY"/> have non-zero values).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.LeftExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IBorders.Left"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.TopExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IBorders.Top"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.RightExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IBorders.Right"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.BottomExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IBorders.Bottom"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.RadiusXExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IBorders.RadiusX"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IBorders.RadiusYExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IBorders.RadiusY"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.Left">
            <summary>
            Gets or sets the left border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.Top">
            <summary>
            Gets or sets the top border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.Right">
            <summary>
            Gets or sets the right border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.Bottom">
            <summary>
            Gets or sets the bottom border.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.All">
            <summary>
            Sets all four borders to a single value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse used to draw the rounded corners of the border.
            </summary>
            <remarks>
            If both this and <see cref="P:C1.C1PreviewClient.Borders.RadiusY"/> are non-zero, all borders are drawn using the 
            same (<see cref="P:C1.C1PreviewClient.Borders.Top"/>) border thickness.
            <para>
            If this value is less than the border thickness, border thickness is used as the radius.
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse used to draw the rounded corners of the border.
            </summary>
            <remarks>
            If both this and <see cref="P:C1.C1PreviewClient.Borders.RadiusX"/> are non-zero, all borders are drawn using the 
            same (<see cref="P:C1.C1PreviewClient.Borders.Top"/>) border thickness.
            <para>
            If this value is less than the border thickness, border thickness is used as the radius.
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.IsRound">
            <summary>
            Gets a value indicating whether the current <see cref="T:C1.C1PreviewClient.Borders"/> structure
            defines rounded borders (i.e. whether both <see cref="P:C1.C1PreviewClient.Borders.RadiusX"/> and
            <see cref="P:C1.C1PreviewClient.Borders.RadiusY"/> have non-zero values).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.LeftExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Borders.Left"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.TopExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Borders.Top"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.RightExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Borders.Right"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.BottomExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Borders.Bottom"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.RadiusXExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Borders.RadiusX"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Borders.RadiusYExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Borders.RadiusY"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.GridLines">
            <summary>
            A structure defining the grid lines (four borders and two internal lines) 
            used to draw a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            Each line is represented by a <see cref="T:C1.C1PreviewClient.LineDef"/> object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IGridLines">
            <summary>
            Describes the grid lines used to draw a <see cref="T:C1.C1PreviewClient.RenderTable"/>.
            Each line is represented by a <see cref="T:C1.C1PreviewClient.LineDef"/> object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.Left">
            <summary>
            Gets or sets the left outer border of a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.Top">
            <summary>
            Gets or sets the top outer border of a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.Right">
            <summary>
            Gets or sets the right outer border of a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.Bottom">
            <summary>
            Gets or sets the bottom outer border of a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.Vert">
            <summary>
            Gets or sets the vertical inner lines in a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.Horz">
            <summary>
            Gets or sets the horizontal inner lines in a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.All">
            <summary>
            Sets all six lines to a single value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.LeftExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IGridLines.Left"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.TopExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IGridLines.Top"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.RightExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IGridLines.Right"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.BottomExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IGridLines.Bottom"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.VertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IGridLines.Vert"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IGridLines.HorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IGridLines.Horz"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.Left">
            <summary>
            Gets or sets the left outer border of a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.Top">
            <summary>
            Gets or sets the top outer border of a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.Right">
            <summary>
            Gets or sets the right outer border of a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.Bottom">
            <summary>
            Gets or sets the bottom outer border of a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.Vert">
            <summary>
            Gets or sets the vertical inner lines in a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.Horz">
            <summary>
            Gets or sets the horizontal inner lines in a table.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.All">
            <summary>
            Sets all six lines to a single value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.LeftExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.GridLines.Left"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.TopExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.GridLines.Top"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.RightExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.GridLines.Right"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.BottomExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.GridLines.Bottom"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.VertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.GridLines.Vert"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.GridLines.HorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.GridLines.Horz"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.C1HyperlinkAttrs">
            <summary>
            Represents the visual attributes of a hyperlink in a certain state.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkAttrs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1HyperlinkAttrs"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkAttrs.IsDefault">
            <summary>
            Checks whether the current <see cref="T:C1.C1PreviewClient.C1HyperlinkAttrs"/> has all default values.
            </summary>
            <returns><b>true</b> if all properties on the current object have default values, <b>false</b> otherwise.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.C1HyperlinkTextAttrs">
            <summary>
            Represents the visual attributes of a text hyperlink in a certain state.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkTextAttrs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1HyperlinkTextAttrs"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkTextAttrs.#ctor(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1HyperlinkTextAttrs"/> class,
            assigning background and foreground colors and <see cref="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.Underline"/> property.
            </summary>
            <param name="backColor">The background color of the hyperlink text.</param>
            <param name="foreColor">The foreground color of the hyperlink text.</param>
            <param name="underline">A value indicating whether the hyperlink text should be underlined.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkTextAttrs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.C1HyperlinkTextAttrs"/> class,
            assigning <see cref="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.Underline"/> property.
            </summary>
            <param name="underline">A value indicating whether the hyperlink text should be underlined.</param>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkTextAttrs.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.BackColor"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.BackColor"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkTextAttrs.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.ForeColor"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.ForeColor"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkTextAttrs.IsDefault">
            <summary>
            Checks whether the current <see cref="T:C1.C1PreviewClient.C1HyperlinkTextAttrs"/> has all default values.
            </summary>
            <returns><b>true</b> if all properties on the current object have default values, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkTextAttrs.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            This method compares properties on the two objects.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><b>true</b> if the specified Object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.C1HyperlinkTextAttrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:C1.C1PreviewClient.C1HyperlinkTextAttrs"/>.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.BackColor">
            <summary>
            Gets the background color.
            If this value indicates an empty or transparent color,
            the background color of a hyperlink is not changed.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.ForeColor">
            <summary>
            Gets the foreground (text) color.
            If this value indicates an empty or transparent color,
            the text color of a hyperlink is not changed.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.Underline">
            <summary>
            Gets a value indicating whether the text of a hyperlink is underlined.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.VisitedDefault">
            <summary>
            Gets the default attributes of visited hyperlinks.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.NormalDefault">
            <summary>
            Gets the default attributes of "normal" (neither visited nor highlighted) hyperlinks.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.C1HyperlinkTextAttrs.HoverDefault">
            <summary>
            Gets the default attributes of highlighted hyperlinks.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Shadow">
            <summary>
            Represents the shadow cast by a <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.IShadow">
            <summary>
            Represents the shadow cast by a <see cref="T:C1.C1PreviewClient.RenderObject"/>.
            This interface is implemented by <see cref="T:C1.C1PreviewClient.Shadow"/> structure.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.Transparency">
            <summary>
            Gets or sets the transparency of the shadow, in percent.
            A value of <b>0</b> defines a solid (non-transparent) shadow,
            a value of <b>100</b> (which is the default) defines a fully transparent (invisible) shadow.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.Size">
            <summary>
            Gets or sets the size of the shadow relative to the size of the object, in percent.
            A value of 100 (which is the default) indicates that the shadow has the same size
            as the object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.Distance">
            <summary>
            Gets or sets the distance that the shadow's center is offset from the the object's center.
            Note that only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "0.5in" or "4mm") can
            be assigned to this property.
            <para>The default is <b>2mm</b>.</para>
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.Angle">
            <summary>
            Gets or sets the angle, in degrees, of the shadow. The angle is measured relative
            to the three o'clock position clockwise. The default is <b>45</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.Color">
            <summary>
            Gets or sets the color of the shadow. The default is <b>Black</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.TransparencyExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IShadow.Transparency"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.SizeExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IShadow.Size"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.DistanceExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IShadow.Distance"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.AngleExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IShadow.Angle"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.IShadow.ColorExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.IShadow.Color"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Shadow.#ctor(System.Single,System.Single,C1.C1PreviewClient.Unit,System.Single,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Shadow"/> structure,
            assigning <see cref="P:C1.C1PreviewClient.Shadow.Transparency"/>, <see cref="P:C1.C1PreviewClient.Shadow.Size"/>, <see cref="P:C1.C1PreviewClient.Shadow.Distance"/> and <see cref="P:C1.C1PreviewClient.Shadow.Angle"/>
            values.
            </summary>
            <param name="transparency">A value assigned to the <see cref="P:C1.C1PreviewClient.Shadow.Transparency"/> property.</param>
            <param name="size">A value assigned to the <see cref="P:C1.C1PreviewClient.Shadow.Size"/> property.</param>
            <param name="distance">An absolute <see cref="T:C1.C1PreviewClient.Unit"/> value assigned to the <see cref="P:C1.C1PreviewClient.Shadow.Distance"/> property.</param>
            <param name="angle">A value assigned to the <see cref="P:C1.C1PreviewClient.Shadow.Angle"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.C1PreviewClient.Shadow.Color"/> property.</param>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.Transparency">
            <summary>
            Gets or sets the transparency of the shadow, in percent.
            A value of <b>0</b> defines a solid (non-transparent) shadow,
            a value of <b>100</b> defines a fully transparent (invisible) shadow.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.Size">
            <summary>
            Gets or sets the size of the shadow relative to the size of the object, in percent.
            A value of 100 indicates that the shadow has the same size
            as the object.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.Distance">
            <summary>
            Gets or sets the distance that the shadow's center is offset from the the object's center.
            Note that only absolute <see cref="T:C1.C1PreviewClient.Unit"/> values (such as "0.5in" or "4mm") can
            be assigned to this property.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.Angle">
            <summary>
            Gets or sets the angle, in degrees, of the shadow. The angle is measured relative
            to the three o'clock position clockwise.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.Color">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.TransparencyExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Shadow.Transparency"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.SizeExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Shadow.Size"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.DistanceExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Shadow.Distance"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.AngleExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Shadow.Angle"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Shadow.ColorExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Shadow.Color"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Style">
            <summary>
            Represents the style of an object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeParent">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.Parent"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.Parent"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeAmbientParent">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.AmbientParent"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.AmbientParent"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeChildren">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.Children"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.Children"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeSpacingLeft">
            <summary>
            Indicates whether the left spacing should be serialized.
            </summary>
            <returns><b>true</b> if left spacing should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeSpacingRight">
            <summary>
            Indicates whether the right spacing should be serialized.
            </summary>
            <returns><b>true</b> if right spacing should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeSpacingTop">
            <summary>
            Indicates whether the top spacing should be serialized.
            </summary>
            <returns><b>true</b> if top spacing should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeSpacingBottom">
            <summary>
            Indicates whether the bottom spacing should be serialized.
            </summary>
            <returns><b>true</b> if bottom spacing should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializePaddingLeft">
            <summary>
            Indicates whether the left padding should be serialized.
            </summary>
            <returns><b>true</b> if left padding should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializePaddingRight">
            <summary>
            Indicates whether the right padding should be serialized.
            </summary>
            <returns><b>true</b> if right padding should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializePaddingTop">
            <summary>
            Indicates whether the top padding should be serialized.
            </summary>
            <returns><b>true</b> if top padding should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializePaddingBottom">
            <summary>
            Indicates whether the bottom padding should be serialized.
            </summary>
            <returns><b>true</b> if bottom padding should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBorderLeft">
            <summary>
            Indicates whether the left border should be serialized.
            </summary>
            <returns><b>true</b> if left border should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBorderRight">
            <summary>
            Indicates whether the right border should be serialized.
            </summary>
            <returns><b>true</b> if right border should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBorderTop">
            <summary>
            Indicates whether the top border should be serialized.
            </summary>
            <returns><b>true</b> if top border should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBorderBottom">
            <summary>
            Indicates whether the bottom border should be serialized.
            </summary>
            <returns><b>true</b> if bottom border should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBorderRadiusX">
            <summary>
            Indicates whether <b>BorderRadiusX</b> should be serialized.
            </summary>
            <returns><b>true</b> if <b>BorderRadiusX</b> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBorderRadiusY">
            <summary>
            Indicates whether <b>BorderRadiusY</b> should be serialized.
            </summary>
            <returns><b>true</b> if <b>BorderRadiusY</b> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeIA_AlignHorz">
            <summary>
            Indicates whether the horizontal image alignment should be serialized.
            </summary>
            <returns><b>true</b> if horizontal image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeIA_AlignVert">
            <summary>
            Indicates whether the vertical image alignment should be serialized.
            </summary>
            <returns><b>true</b> if vertical image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeIA_StretchHorz">
            <summary>
            Indicates whether the horizontal stretch image alignment should be serialized.
            </summary>
            <returns><b>true</b> if horizontal stretch image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeIA_StretchVert">
            <summary>
            Indicates whether the vertical stretch image alignment should be serialized.
            </summary>
            <returns><b>true</b> if vertical stretch image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeIA_KeepAspectRatio">
            <summary>
            Indicates whether the keep aspect image alignment should be serialized.
            </summary>
            <returns><b>true</b> if keep aspect image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeIA_TileHorz">
            <summary>
            Indicates whether the horizontal tile image alignment should be serialized.
            </summary>
            <returns><b>true</b> if horizontal tile image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeIA_TileVert">
            <summary>
            Indicates whether the vertical tile image alignment should be serialized.
            </summary>
            <returns><b>true</b> if vertical tile image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBIA_AlignHorz">
            <summary>
            Indicates whether the horizontal background image alignment should be serialized.
            </summary>
            <returns><b>true</b> if horizontal background image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBIA_AlignVert">
            <summary>
            Indicates whether the vertical background image alignment should be serialized.
            </summary>
            <returns><b>true</b> if vertical background image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBIA_StretchHorz">
            <summary>
            Indicates whether the horizontal stretch background image alignment should be serialized.
            </summary>
            <returns><b>true</b> if horizontal stretch background image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBIA_StretchVert">
            <summary>
            Indicates whether the vertical stretch background image alignment should be serialized.
            </summary>
            <returns><b>true</b> if vertical stretch background image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBIA_KeepAspectRatio">
            <summary>
            Indicates whether the keep aspect background image alignment should be serialized.
            </summary>
            <returns><b>true</b> if keep aspect background image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBIA_TileHorz">
            <summary>
            Indicates whether the horizontal tile background image alignment should be serialized.
            </summary>
            <returns><b>true</b> if horizontal tile background image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBIA_TileVert">
            <summary>
            Indicates whether the vertical tile background image alignment should be serialized.
            </summary>
            <returns><b>true</b> if vertical tile background image alignment should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBackgroundImage">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.BackgroundImage"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.BackgroundImage"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBrush">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.Brush"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.Brush"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeTextColor">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.TextColor"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.TextColor"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeTextAngle">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.TextAngle"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.TextAngle"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeTextAlignHorz">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.TextAlignHorz"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.TextAlignHorz"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeTextAlignVert">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.TextAlignVert"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.TextAlignVert"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeLineSpacing">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.LineSpacing"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.LineSpacing"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeWordWrap">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.WordWrap"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.WordWrap"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeTextPosition">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.TextPosition"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.TextPosition"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeTreatLastLineNotEndOfParagraph">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.TreatLastLineNotEndOfParagraph"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.TreatLastLineNotEndOfParagraph"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeEolIsEndOfParagraph">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.EolIsEndOfParagraph"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.EolIsEndOfParagraph"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeMeasureTrailingSpaces">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.MeasureTrailingSpaces"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.MeasureTrailingSpaces"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.BackColor"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.BackColor"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeActiveHyperlinkAttrs">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.ActiveHyperlinkAttrs"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.ActiveHyperlinkAttrs"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeHyperlinkAttrs">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.HyperlinkAttrs"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.HyperlinkAttrs"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeVisitedHyperlinkAttrs">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.VisitedHyperlinkAttrs"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.VisitedHyperlinkAttrs"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeHoverHyperlinkAttrs">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.HoverHyperlinkAttrs"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.HoverHyperlinkAttrs"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeMinOrphanLines">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.MinOrphanLines"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.MinOrphanLines"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeClientAreaOnly">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.ClientAreaOnly"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.ClientAreaOnly"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeShapeFillColor">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.ShapeFillColor"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.ShapeFillColor"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeShapeFillBrush">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.ShapeFillBrush"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.ShapeFillBrush"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeShapeLine">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.ShapeLine"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.ShapeLine"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFlowAlign">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.FlowAlign"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.FlowAlign"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFlowAlignChildren">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.FlowAlignChildren"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.FlowAlignChildren"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeTextIndent">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.TextIndent"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.TextIndent"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeCharSpacing">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.CharSpacing"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.CharSpacing"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeCharWidth">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.CharWidth"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.CharWidth"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeHyphenationMode">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.HyphenationMode"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.HyphenationMode"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeShadowTransparency">
            <summary>
            Indicates whether the Shadow.Transparency property should be serialized.
            </summary>
            <returns><b>true</b> if Shadow.Transparency should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeShadowSize">
            <summary>
            Indicates whether the Shadow.Size property should be serialized.
            </summary>
            <returns><b>true</b> if Shadow.Size should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeShadowDistance">
            <summary>
            Indicates whether the Shadow.Distance property should be serialized.
            </summary>
            <returns><b>true</b> if Shadow.Distance should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeShadowAngle">
            <summary>
            Indicates whether the Shadow.Angle property should be serialized.
            </summary>
            <returns><b>true</b> if Shadow.Angle should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeGridLineLeft">
            <summary>
            Indicates whether the left grid line property should be serialized.
            </summary>
            <returns><b>true</b> if left grid line should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeGridLineRight">
            <summary>
            Indicates whether the right grid line property should be serialized.
            </summary>
            <returns><b>true</b> if right grid line should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeGridLineTop">
            <summary>
            Indicates whether the top grid line property should be serialized.
            </summary>
            <returns><b>true</b> if top grid line should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeGridLineBottom">
            <summary>
            Indicates whether the bottom grid line property should be serialized.
            </summary>
            <returns><b>true</b> if bottom grid line should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeGridLineVert">
            <summary>
            Indicates whether the vertical grid line property should be serialized.
            </summary>
            <returns><b>true</b> if vertical grid line should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeGridLineHorz">
            <summary>
            Indicates whether the horizontal grid line property should be serialized.
            </summary>
            <returns><b>true</b> if horizontal grid line should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFont">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.Font"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.Font"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFontName">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.FontName"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.FontName"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFontSize">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.FontSize"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.FontSize"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFontBold">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.FontBold"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.FontBold"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFontItalic">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.FontItalic"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.FontItalic"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFontUnderline">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.FontUnderline"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.FontUnderline"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.ShouldSerializeFontStrikeout">
            <summary>
            Indicates whether the <see cref="P:C1.C1PreviewClient.Style.FontStrikeout"/> property should be serialized.
            </summary>
            <returns><b>true</b> if <see cref="P:C1.C1PreviewClient.Style.FontStrikeout"/> should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Style.GetPropValueNoDef(System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            Gets value of "style" property.
            If style has no this property and all its parents has no this property
            then null is returned (NOT DEFAULT VALUE).
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
            <param name="context"><see cref="T:C1.C1PreviewClient.Scripting.IScriptContext"/> that should be used to get calculated properties.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Style.GetPropValueNoDefTable(System.Int32,C1.C1PreviewClient.Scripting.IScriptContext)">
            <summary>
            This method used only in RenderTable objects and its subobjects TableCell,
            TableVector etc.
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
            <param name="context"><see cref="T:C1.C1PreviewClient.Scripting.IScriptContext"/> that should be used to get calculated properties.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Style.IsEmpty">
            <summary>
            Returns true if style has no properties.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Style.Clear">
            <summary>
            Clears the current style, resets all properties so that they
            inherit from the parent style.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Style.AssignNonInheritedFrom(C1.C1PreviewClient.Style)">
            <summary>
            Copies to the current style all properties of another <see cref="!:C1.C1Preview.Style"/> object
            that have been explicitly set on that other style,
            plus the values of the <see cref="P:C1.C1PreviewClient.Style.Parent"/> and <see cref="P:C1.C1PreviewClient.Style.AmbientParent"/> properties.
            </summary>
            <param name="source">The source <see cref="!:C1.C1Preview.Style"/> object to copy properties from.</param>
            <remarks>
            Effectively, this method makes the current <see cref="!:C1.C1Preview.Style"/>
            a complete copy of the <paramref name="source"/> style.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.HasExprs">
            <summary>
            Gets a value indicating whether the current style has calculated properties.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Owner">
            <summary>
            Gets the owner of the current style.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Parent">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.Style"/> that is the parent of the current style.
            <para>
            If non-<b>null</b>, that style provides the values for non-ambient properties
            of the current style that have not been explicitly set.
            </para>
            <para>
            If <b>null</b>, such properties have default values.
            </para>
            <para>
            This property is <b>null</b> by default.
            </para>
            </summary>
            <remarks>
            Initially a <see cref="T:C1.C1PreviewClient.Style"/> object does not have any
            explicitly set properties. This means that the effective
            values of all ambient properties (such as font) are inherited from
            the style of the containing object, while the effective values
            of all non-ambient properties (such as borders) are inherited
            from the style specified by this property.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Parents">
            <summary>
            Sets both parents (<see cref="P:C1.C1PreviewClient.Style.Parent"/> and <see cref="P:C1.C1PreviewClient.Style.AmbientParent"/>) to the same value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Children">
            <summary>
            Gets the collection of child styles
            (i.e. <see cref="T:C1.C1PreviewClient.Style"/> objects that have their <see cref="P:C1.C1PreviewClient.Style.Parent"/>
            set to the current style).
            </summary>
            <remarks>
            This method always returns a non-<b>null</b> collection of child styles,
            initializing it if it did not exist.
            To test whether a style already has child styles
            without creating the <see cref="P:C1.C1PreviewClient.Style.Children"/> collection,
            use the <see cref="P:C1.C1PreviewClient.Style.HasChildren"/> property.
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.HasChildren">
            <summary>
            Gets a value indicating whether the current style's <see cref="P:C1.C1PreviewClient.Style.Children"/>
            collection has been initialized and contains one or more elements.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.AmbientParent">
            <summary>
            Gets or sets the <see cref="T:C1.C1PreviewClient.Style"/> that is the ambient parent of the current style.
            <para>
            If non-<b>null</b>, that style provides the values for ambient properties
            of the current style that have not been explicitly set.
            </para>
            <para>
            If <b>null</b>, such properties are inherited from the style of the containing object.
            </para>
            <para>
            This property is <b>null</b> by default.
            </para>
            </summary>
            <remarks>
            Initially a <see cref="T:C1.C1PreviewClient.Style"/> object does not have any
            explicitly set properties. This means that the effective
            values of all ambient properties (such as font) are inherited from
            the style of the containing object, unless this property has
            been set to a non-<b>null</b> value, in which case they are
            inherited from that style.
            <para>
            Note that even if an <b>AmbientParent</b> has been specified,
            only ambient properties that have been explicitly set on
            that style or any of its own ambient parents (styles or containing objects)
            propagate to the current style. See example below for details.
            </para>
            </remarks>
            <example>
            For instance, the following code:
            <code>
                C1PrintDocument doc = new C1PrintDocument();
                RenderArea ra = new RenderArea();
                ra.Style.FontBold = true;
                RenderText rt = new RenderText("my text");
                ra.Style.AmbientParent = doc.Style;
                ra.Children.Add(rt);
                doc.Body.Children.Add(ra);
            </code>
            still prints "my text" in bold, while this code:
            <code>
                C1PrintDocument doc = new C1PrintDocument();
                doc.Style.FontBold = false; // this line makes the difference!
                RenderArea ra = new RenderArea();
                ra.Style.FontBold = true;
                RenderText rt = new RenderText("my text");
                ra.Style.AmbientParent = doc.Style;
                ra.Children.Add(rt);
                doc.Body.Children.Add(ra);
            </code>
            prints "my text" using regular (non-bold) font. This is because
            <see cref="!:C1.C1Preview.Style.FontBold"/> has been explicitly set to <b>false</b>
            on the style assigned to the <b>AmbientParent</b> on the text object.
            </example>
        </member>
        <member name="P:C1.C1PreviewClient.Style.BackgroundImage">
            <summary>
            Gets or sets the background image.
            The image is aligned using <see cref="P:C1.C1PreviewClient.Style.BackgroundImageAlign"/>.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no image.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.BackgroundImageName">
            <summary>
            Gets or sets the name of the background image
            in <see cref="P:C1.C1PreviewClient.C1PrintDocument.Dictionary"/> on the current document.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is emtpy string.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Brush">
            <summary>
            Gets or sets the brush used to fill the background.
            If both this and <see cref="P:C1.C1PreviewClient.Style.BackColor"/> properties are specified for a style,
            the <b>BackColor</b> takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no brush.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextColor">
            <summary>
            Gets or sets the text (foreground) color.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is black color.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextAngle">
            <summary>
            Gets or sets the text rotation angle,
            in degrees counterclockwise from the <b>X</b> axis.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextAlignHorz">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is left alignment.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextAlignVert">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is top alignment.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.LineSpacing">
            <summary>
            Gets or sets the line spacing of a text in percent.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 100% (normal line spacing).</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.WordWrap">
            <summary>
            Gets or sets a value indicating whether text automatically
            wraps to the next line when there is not enough space left on the current line.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextPosition">
            <summary>
            Gets or sets a value indicating whether text is rendered
            normally, or as superscript or subscript.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is normal text.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.HyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.C1HyperlinkAttrs"/> for "normal" (neither visited nor highlighted) hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to highlight hyperlinks with blue text color.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.VisitedHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.C1HyperlinkAttrs"/> for visited hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to highlight visited hyperlinks with magenta text color.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.HoverHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.C1HyperlinkAttrs"/> for highlighted hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to underline text on a hyperlinks under mouse.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ActiveHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.C1HyperlinkAttrs"/> for active hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to not highlight active hyperlinks.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TreatLastLineNotEndOfParagraph">
            <summary>
            Obsolete. Use <see cref="P:C1.C1PreviewClient.Style.JustifyLastLine"/> instead.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.EolIsEndOfParagraph">
            <summary>
            Obsolete. Use <see cref="P:C1.C1PreviewClient.Style.JustifyEndOfLines"/> instead.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.MeasureTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether spaces at ends of text lines
            are taken into account when measuring the text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Padding">
            <summary>
            Gets or sets the padding (white space added between the style owner's content and borders).
            </summary>
            <remarks>
            Padding is within <see cref="P:C1.C1PreviewClient.Style.Borders"/> (if any), while <see cref="P:C1.C1PreviewClient.Style.Spacing"/> is added outside of borders.
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no padding.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Spacing">
            <summary>
            Gets or sets the spacing between the the current style's owner and the surrounding objects.
            </summary>
            <remarks>
            Spacing is outside of <see cref="P:C1.C1PreviewClient.Style.Borders"/> (which, in turn, contain <see cref="P:C1.C1PreviewClient.Style.Padding"/>).
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no spacing.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Borders">
            <summary>
            Gets or sets the borders drawn around the current style's owner object.
            </summary>
            <remarks>
            Borders are drawn within the <see cref="P:C1.C1PreviewClient.Style.Spacing"/> area, and contain <see cref="P:C1.C1PreviewClient.Style.Padding"/>.
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no borders.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Shadow">
            <summary>
            Gets or sets properties of the shadow cast by the current object.
            By default the shadow is invisible due to being 100% transparent.
            Set <b>Shadow.Transparency</b> to a value less than 100, to show shadow.
            Other properties can be adjusted as needed.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.GridLines">
            <summary>
            Gets or sets the grid lines used to draw tables.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no grid lines.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ImageAlign">
            <summary>
            Gets or sets the foreground image alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to align to left/top, stretch horizontally and vertically, and keep aspect ratio.</para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.Style.BackgroundImageAlign"/>
        </member>
        <member name="P:C1.C1PreviewClient.Style.BackgroundImageAlign">
            <summary>
            Gets or sets the background image alignment.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is to align to left/top, stretch horizontally and vertically, and keep aspect ratio.</para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.Style.ImageAlign"/>
        </member>
        <member name="P:C1.C1PreviewClient.Style.BackColor">
            <summary>
            Gets or sets the background color.
            If both this and <see cref="P:C1.C1PreviewClient.Style.Brush"/> properties are specified for a style,
            this property takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is transparent background color.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.MinOrphanLines">
            <summary>
            Gets or sets the minimum number of orphan text lines allowed on a page
            before or after a page break.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ClientAreaOnly">
            <summary>
            Gets or sets a value indicating whether just the client area of a <see cref="T:System.Windows.Forms.Control"/>,
            or the whole control, is rendered by the <see cref="T:C1.C1PreviewClient.RenderImage"/> object owning the current style.
            </summary>
            <remarks>
            <para>
            A <see cref="T:C1.C1PreviewClient.RenderImage"/> can render an image of a <see cref="T:System.Windows.Forms.Control"/>
            if it is assigned to the <b>RenderImage</b>'s <see cref="!:RenderImage.Control"/> property.
            <b>ClientAreaOnly</b> can be used to indicate that only the client area of that control should be rendered.
            </para>
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ShapeFillBrush">
            <summary>
            Gets or sets the brush used to fill internal areas of shapes
            (objects derived from <see cref="T:C1.C1PreviewClient.RenderShapeBase"/>).
            If for a style both this and <see cref="P:C1.C1PreviewClient.Style.ShapeFillColor"/> are specified,
            <b>ShapeFillColor</b> takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no brush.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ShapeFillColor">
            <summary>
            Gets or sets the color used to fill internal areas of shapes
            (objects derived from <see cref="T:C1.C1PreviewClient.RenderShapeBase"/>).
            If for a style both this and <see cref="P:C1.C1PreviewClient.Style.ShapeFillBrush"/> are specified,
            this property takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is transparent fill color.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ShapeLine">
            <summary>
            Gets or sets the style of lines used to draw shape objects (RenderLine, RenderRectangle etc).
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is a black line, 1pt thick.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FlowAlign">
            <summary>
            Gets or sets the alignment of the current style's owner object within its container in a block flow.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is <see cref="F:C1.C1PreviewClient.FlowAlignEnum.Default"/>.</para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.Style.FlowAlignChildren"/>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.Stacking"/>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FlowAlignChildren">
            <summary>
            Gets or sets the alignment of children of the current style's owner object in a block flow.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is <see cref="F:C1.C1PreviewClient.FlowAlignEnum.Near"/>.</para>
            </remarks>
            <seealso cref="P:C1.C1PreviewClient.Style.FlowAlign"/>
            <seealso cref="P:C1.C1PreviewClient.RenderObject.Stacking"/>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextIndent">
            <summary>
            Gets or sets the indentation of the first line in a block of text.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.C1PreviewClient.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.CharSpacing">
            <summary>
            Gets or sets the spacing between characters in a text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 0 (normal spacing).</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.CharWidth">
            <summary>
            Gets or sets the amount (in percent) by which to increase or decrease
            the widths of characters in a text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 100 (normal width).</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.JustifyLastLine">
            <summary>
            Gets or sets a value indicating whether the last line of text should be justified
            if the current style has <see cref="P:C1.C1PreviewClient.Style.TextAlignHorz"/> set to
            <see cref="F:C1.C1PreviewClient.AlignHorzEnum.Justify"/> or <see cref="F:C1.C1PreviewClient.AlignHorzEnum.JustifyChars"/>.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.JustifyEndOfLines">
            <summary>
            Gets or sets a value indicating whether lines of text
            ending with a newline character should be justified
            if the current style has <see cref="P:C1.C1PreviewClient.Style.TextAlignHorz"/> set to
            <see cref="F:C1.C1PreviewClient.AlignHorzEnum.Justify"/> or <see cref="F:C1.C1PreviewClient.AlignHorzEnum.JustifyChars"/>.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.HyphenationMode">
            <summary>
            Gets or sets a mode of words' splitting during text wrapping.
            at any pos.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <remarks>
            Note that setting this property resets properies specifying individual font attributes:
            <see cref="P:C1.C1PreviewClient.Style.FontName"/>,
            <see cref="P:C1.C1PreviewClient.Style.FontSize"/>,
            <see cref="P:C1.C1PreviewClient.Style.FontBold"/>,
            <see cref="P:C1.C1PreviewClient.Style.FontItalic"/>,
            <see cref="P:C1.C1PreviewClient.Style.FontUnderline"/> and
            <see cref="P:C1.C1PreviewClient.Style.FontStrikeout"/>.
            <para>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            </para>
            <para>The default is Arial, 10pt.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontName">
            <summary>
            Gets or sets the face name of the font.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is Arial.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontSize">
            <summary>
            Gets or sets the em-size of the font.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 10.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontBold">
            <summary>
            Gets or sets a value indicating whether the font is bold.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontItalic">
            <summary>
            Gets or sets a value indicating whether the font is italic.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontUnderline">
            <summary>
            Gets or sets a value indicating whether the font is underlined.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontStrikeout">
            <summary>
            Gets or sets a value indicating whether the font is strikeout.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.Style.BackColorExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.BackColor"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.BackgroundImageExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.BackgroundImage"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.BrushExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.Brush"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextColorExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.TextColor"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextAngleExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.TextAngle"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextAlignHorzExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.TextAlignHorz"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextAlignVertExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.TextAlignVert"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.LineSpacingExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.LineSpacing"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.WordWrapExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.WordWrap"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextPositionExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.TextPosition"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.HyperlinkAttrsExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.HyperlinkAttrs"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.VisitedHyperlinkAttrsExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.VisitedHyperlinkAttrs"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.HoverHyperlinkAttrsExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.HoverHyperlinkAttrs"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ActiveHyperlinkAttrsExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.ActiveHyperlinkAttrs"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.MeasureTrailingSpacesExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.MeasureTrailingSpaces"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.MinOrphanLinesExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.MinOrphanLines"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ClientAreaOnlyExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.ClientAreaOnly"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ShapeFillBrushExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.ShapeFillBrush"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ShapeFillColorExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.ShapeFillBrush"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.ShapeLineExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.ShapeLine"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FlowAlignExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.FlowAlign"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FlowAlignChildrenExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.FlowAlignChildren"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.TextIndentExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.TextIndent"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.CharSpacingExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.CharSpacing"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.CharWidthExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.CharWidth"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.JustifyLastLineExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.JustifyLastLine"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.JustifyEndOfLinesExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.JustifyEndOfLines"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.HyphenationModeExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.HyphenationMode"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontNameExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.FontName"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontSizeExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.FontSize"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontBoldExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.FontBold"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontItalicExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.FontItalic"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontUnderlineExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.FontUnderline"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Style.FontStrikeoutExpr">
            <summary>
            Gets or sets the expression used to calculate <see cref="P:C1.C1PreviewClient.Style.FontStrikeout"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.StyleCollection">
            <summary>
            Represents a collection of <see cref="!:C1.C1Preview.Style"/> objects.
            This is the type of the <see cref="!:C1.C1Preview.Style.Children"/> collection
            on a <see cref="!:C1.C1Preview.Style"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.StyleCollection.Add">
            <summary>
            Creates a new <see cref="!:C1.C1Preview.Style"/> object and adds it to the current collection.
            </summary>
            <returns>The created <see cref="!:C1.C1Preview.Style"/> object.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.StyleCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:C1.C1Preview.Style"/> object at the specified index in the current collection.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.SystemInfo">
            <summary>
            Represents operating system related information in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.SystemInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.SystemInfo"/> class.
            Note that the property values are not updated by this constructor,
            the <see cref="M:C1.C1PreviewClient.SystemInfo.Initialize"/> method should be used to actually
            fill the current object with system info data.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.SystemInfo.Initialize">
            <summary>
            Updates the properties of the current <see cref="T:C1.C1PreviewClient.SystemInfo"/> object
            with the current system info data.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.ScreenCount">
            <summary>
            Gets the number of system screens.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.LogicalDpiX">
            <summary>
            Gets the logical horizontal resolution (DPI) of the screen.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.LogicalDpiY">
            <summary>
            Gets the logical vertical resolution (DPI) of the screen.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.PhysicalDpiX">
            <summary>
            Gets the physical horizontal resolution (DPI) of the screen.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.PhysicalDpiY">
            <summary>
            Gets the physical vertical resolution (DPI) of the screen.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.PrimaryScreenBounds">
            <summary>
            Gets the bounds of the screen as returned by <see cref="P:System.Windows.Forms.Screen.Bounds"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.MeasurementDevice">
            <summary>
            Gets the measurement device as returned by <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDevice"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.MeasurementPrinterName">
            <summary>
            Gets the measurement printer name as returned by <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementPrinterName"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.MeasurementDpi">
            <summary>
            Gets the measurement resolution as returned by <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDpi"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.MeasurementDeviceDescription">
            <summary>
            Gets the <see cref="P:C1.C1PreviewClient.SystemInfo.MeasurementPrinterName"/> if <see cref="P:C1.C1PreviewClient.SystemInfo.MeasurementDevice"/> is a printer,
            or the word <b>"Screen"</b> if it is the screen.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.DocumentFormatVersion">
            <summary>
            Gets a string representing the format version used to serialize a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            Format versions are backward-compatible, but not necessarily forward-compatible.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.AssemblyVersion">
            <summary>
            Gets the assembly version of the assembly containing the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> class.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.Culture">
            <summary>
            Gets the current culture.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.SystemInfo.OSVersion">
            <summary>
            Gets the OS version as returned by <see cref="P:System.OperatingSystem.VersionString"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagBase">
            <summary>
            The abstract base class for system (<see cref="T:C1.C1PreviewClient.TagSys"/>) and user defined (<see cref="T:C1.C1PreviewClient.Tag"/>) tags.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagBase.Document">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> object containing the current tag.
            Can return <b>null</b> if the tag has not been added to a document.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagBase.Value">
            <summary>
            Gets or sets the value of the current tag.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagSys">
            <summary>
            The abstract base class for system defined tags such as <see cref="T:C1.C1PreviewClient.TagPageNo"/> and <see cref="T:C1.C1PreviewClient.TagPageCount"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagSys.GetName">
            <summary>
            Gets the name of the current tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.TagSys.SetName(System.String)">
            <summary>
            Sets the name of the current tag.
            </summary>
            <param name="newName">The new tag name.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagSys.AssignFrom(C1.C1PreviewClient.NamedCollectionItem)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TagSys.Value">
            <summary>
            Gets or sets the value of the current tag.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagPage">
            <summary>
            The abstract base class for system tags that evaluate to a page number or count.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagPageNo">
            <summary>
            Represents the current page number system tag.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagPageNo.GetName">
            <summary>
            Returns the name of the current tag ("PageNo").
            </summary>
            <returns>"PageNo".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagPageCount">
            <summary>
            Represents the total page count system tag.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagPageCount.GetName">
            <summary>
            Returns the name of the current tag ("PageCount").
            </summary>
            <returns>"PageCount".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagPageX">
            <summary>
            Represents the current horizontal page number system tag.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagPageX.GetName">
            <summary>
            Returns the name of the current tag ("PageX").
            </summary>
            <returns>"PageX".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagPageXCount">
            <summary>
            Represents the horizontal page count system tag.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagPageXCount.GetName">
            <summary>
            Returns the name of the current tag ("PageXCount").
            </summary>
            <returns>"PageXCount".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagPageY">
            <summary>
            Represents the current vertical page number system tag.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagPageY.GetName">
            <summary>
            Returns the name of the current tag ("PageY").
            </summary>
            <returns>"PageY".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagPageYCount">
            <summary>
            Represents the vertical page count system tag.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagPageYCount.GetName">
            <summary>
            Returns the name of the current tag ("PageYCount").
            </summary>
            <returns>"PageYCount".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagHyperlinkPageNo">
            <summary>
            Represents a system tag that is replaced by the page number of a hyperlink target.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagHyperlinkPageNo.GetName">
            <summary>
            Returns the name of the current tag ("HyperlinkPageNo").
            </summary>
            <returns>"HyperlinkPageNo".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagUsageInfo">
            <summary>
            The abstract base class for system tags that return
            data from <see cref="!:C1PrintDocument.UsageInfo"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagGeneratedDateTime">
            <summary>
            Represents a system tag returning the date and time when the document was last generated.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagGeneratedDateTime.GetName">
            <summary>
            Returns the name of the current tag ("GeneratedDateTime").
            </summary>
            <returns>"GeneratedDateTime".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagPrintedDateTime">
            <summary>
            Represents a system tag returning the date and time when the document was last printed.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagPrintedDateTime.GetName">
            <summary>
            Returns the name of the current tag ("PrintedDateTime").
            </summary>
            <returns>"PrintedDateTime".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagLastFileName">
            <summary>
            Represents a system tag returning the file name last used to save or load the document.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagLastFileName.GetName">
            <summary>
            Returns the name of the current tag ("LastFileName").
            </summary>
            <returns>"LastFileName".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagLastPrinterName">
            <summary>
            Represents a system tag returning the name of the printer last used to print the document.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagLastPrinterName.GetName">
            <summary>
            Returns the name of the current tag ("LastPrinterName").
            </summary>
            <returns>"LastPrinterName".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.Tag">
            <summary>
            Represents a user-defined tag.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Tag"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Tag"/> class with the specified name and value.
            </summary>
            <param name="name">The name of the tag.</param>
            <param name="value">The value of the tag.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Tag"/> class with the specified name.
            </summary>
            <param name="name">The name of the tag.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Tag"/> class with the specified name, value and type.
            </summary>
            <param name="name">The name of the tag.</param>
            <param name="value">The value of the tag.</param>
            <param name="type">The type of the tag.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.SetName(System.String)">
            <summary>
            Sets the name of the current tag.
            </summary>
            <param name="newName">The new tag name.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.AssignFrom(C1.C1PreviewClient.NamedCollectionItem)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.Tag.SerializeValue">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:C1.C1PreviewClient.Tag.Value"/> of the current tag
            should be serialized. The default is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Tag.ShowInDialog">
            <summary>
            Gets or sets a value indicating whether to show the current tag and
            allow the user to edit its <see cref="P:C1.C1PreviewClient.Tag.Value"/> in the tags input dialog.
            The default is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Tag.Calculated">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:C1.C1PreviewClient.Tag.Value"/>
            property contains a string with a script expression
            which must be evaluated when the tag is rendered.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Tag.Description">
            <summary>
            Gets or sets the description of the tag.
            If not empty, used as the label in the tag input dialog.
            (If Description is empty, <see cref="P:C1.C1PreviewClient.NamedCollectionItem.Name"/> is shown in the input dialog instead.)
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Tag.Type">
            <summary>
            Gets or sets the current tag type.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Tag.Value">
            <summary>
            Gets or sets the current tag value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Tag.InputParams">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.TagInputParams"/> object that is used by the tag input dialog
            to customize the editor for the current tag. By default, this property is null.
            </summary>
            <remarks>
            The <see cref="T:C1.C1PreviewClient.TagInputParams"/> class is abstract, the following types derived from it
            can be used, depending on the current tag's type:
            <list type="bullet">
            <item><term><see cref="T:C1.C1PreviewClient.TagStringInputParams"/></term>
            <description>Used to customize input of a string value.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.TagDateTimeInputParams"/></term>
            <description>Used to customize input of a <see cref="T:System.DateTime"/> value.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.TagListInputParams"/></term>
            <description>Allows to use a <see cref="T:System.Windows.Forms.ListBox"/> or <see cref="T:System.Windows.Forms.ComboBox"/> for input of the tag's value.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.TagBoolInputParams"/></term>
            <description>Allows to input a Boolean value using a check box.</description></item>
            <item><term><see cref="T:C1.C1PreviewClient.TagNumericInputParams"/></term>
            <description>Used to customize input of a numeric value.</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:C1.C1PreviewClient.Tag.TagConverter">
            <summary>
            Converts <see cref="T:C1.C1PreviewClient.Tag"/> objects to/from other types.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.TagConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An <b>ITypeDescriptorContext</b> that provides a format context.</param>
            <param name="type">The target type.</param>
            <returns><b>true</b> if the conversion can be performed, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.TagConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <b>ITypeDescriptorContext</b> that provides a format context.</param>
            <param name="culture">The culture into which <paramref name="value"/> will be converted.</param>
            <param name="value">The object to convert.</param>
            <param name="type">The target type.</param>
            <returns>An object representing the converted value.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.Tag.TagValueConverter">
            <summary>
            Converts <see cref="T:C1.C1PreviewClient.Tag"/> values to/from other types.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Tag.TagValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to a <see cref="T:C1.C1PreviewClient.Tag"/> object.
            </summary>
            <param name="context">An <b>ITypeDescriptorContext</b> that provides a format context.</param>
            <param name="culture">The culture into which <paramref name="value"/> will be converted.</param>
            <param name="value">The object to convert.</param>
            <returns>An object representing the converted value.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1PreviewClient.Tag"/> objects.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagCollection.#ctor(C1.C1PreviewClient.ICollectionOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagCollection"/> class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.C1PreviewClient.TagCollection.Add(C1.C1PreviewClient.Tag)">
            <summary>
            Adds a <see cref="T:C1.C1PreviewClient.Tag"/> object to the current collection.
            </summary>
            <param name="tag">The object to add.</param>
            <returns>The index of the newly added object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TagCollection.Remove(C1.C1PreviewClient.Tag)">
            <summary>
            Removes a <see cref="T:C1.C1PreviewClient.Tag"/> object from the current collection.
            </summary>
            <param name="tag">The object to remove.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagCollection.IndexByName(System.String)">
            <summary>
            Finds the index of the object with the specified name in the collection.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The index of the found object.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.TagCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:C1.C1PreviewClient.Tag"/> in the current collection by its index.
            </summary>
            <param name="index">The index of the <see cref="T:C1.C1PreviewClient.Tag"/> in the current collection.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.Tag"/> with the specified index.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.TagCollection.Item(System.String)">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.Tag"/> in the current collection by its <see cref="P:C1.C1PreviewClient.NamedCollectionItem.Name"/>.
            </summary>
            <param name="tagName">The name of the <see cref="T:C1.C1PreviewClient.Tag"/>.</param>
            <returns>The <see cref="T:C1.C1PreviewClient.Tag"/> with the specified name.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagInputParams">
            <summary>
            The abstract base class for specialized classes used by the
            tag input dialog to customize input of individual tags.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagInputParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagInputParams"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagInputParams.AssignFrom(C1.C1PreviewClient.TagInputParams)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagInputParams.Clone">
            <summary>
            Creates a copy of the current object.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagStringInputParams">
            <summary>
            Represents customization parameters for input of string tag values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagStringInputParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagStringInputParams"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagStringInputParams.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagStringInputParams"/> class.
            </summary>
            <param name="maxLength">The maximum length of the input string.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagStringInputParams.AssignFrom(C1.C1PreviewClient.TagInputParams)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TagStringInputParams.MaxLength">
            <summary>
            Gets or sets the maximum length of the input string.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagDateTimeInputParams">
            <summary>
            Represents customization parameters for input of <see cref="T:System.DateTime"/> tag values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagDateTimeInputParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagDateTimeInputParams"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagDateTimeInputParams.#ctor(System.DateTime,System.DateTime,System.Windows.Forms.DateTimePickerFormat,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagDateTimeInputParams"/> class.
            </summary>
            <param name="minDate">The minimum allowed date.</param>
            <param name="maxDate">The maximum allowed date.</param>
            <param name="format">The format to use in the date/time picker.</param>
            <param name="customFormat">The custom date/time format string.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagDateTimeInputParams.#ctor(System.Windows.Forms.DateTimePickerFormat,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagDateTimeInputParams"/> class.
            </summary>
            <param name="format">The format to use in the date/time picker.</param>
            <param name="customFormat">The custom date/time format string.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagDateTimeInputParams.AssignFrom(C1.C1PreviewClient.TagInputParams)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TagDateTimeInputParams.CustomFormat">
            <summary>
            Gets or sets the custom date/time format string.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagDateTimeInputParams.MinDate">
            <summary>
            Gets or sets the minimum allowed date.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagDateTimeInputParams.MaxDate">
            <summary>
            Gets or sets the maximum allowed date.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagDateTimeInputParams.Format">
            <summary>
            Gets or sets the format to use in the date/time picker.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagListInputParamsTypeEnum">
            <summary>
            Specifies the type of list for <see cref="T:C1.C1PreviewClient.TagListInputParams"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TagListInputParamsTypeEnum.ListBox">
            <summary>
            The <see cref="T:System.Windows.Forms.ListBox"/> is used for input.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.TagListInputParamsTypeEnum.ComboBox">
            <summary>
            The <see cref="T:System.Windows.Forms.ComboBox"/> is used for input.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagListInputParams">
            <summary>
            Represents customization parameters for input of tag values that can be selected from a list.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagListInputParams"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParams.#ctor(C1.C1PreviewClient.TagListInputParamsTypeEnum,C1.C1PreviewClient.TagListInputParamsItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagListInputParams"/> class.
            </summary>
            <param name="type">The type of list input to use.</param>
            <param name="items">The collection of list items.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParams.AssignFrom(C1.C1PreviewClient.TagInputParams)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TagListInputParams.Type">
            <summary>
            Gets or sets the type of list input to use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagListInputParams.HasItems">
            <summary>
            Gets the value indicating whether the list contains any items.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagListInputParams.Items">
            <summary>
            Gets the collection of list items.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagListInputParamsItem">
            <summary>
            Represents a list item for <see cref="T:C1.C1PreviewClient.TagListInputParams"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParamsItem.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagListInputParamsItem"/> class.
            </summary>
            <param name="name">The item name.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParamsItem.AssignFrom(C1.C1PreviewClient.NamedCollectionItem)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParamsItem.ToString">
            <summary>
            Returns the string representation of the current <see cref="T:C1.C1PreviewClient.TagListInputParamsItem"/>.
            </summary>
            <returns>The string representing the current item.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.TagListInputParamsItem.Value">
            <summary>
            Gets or sets the current item's value.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.TagListInputParamsItemCollection">
            <summary>
            Represents a collection of list items for <see cref="T:C1.C1PreviewClient.TagListInputParams"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParamsItemCollection.#ctor(C1.C1PreviewClient.ICollectionOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagListInputParamsItemCollection"/> class.
            </summary>
            <param name="owner">The collection owner.</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParamsItemCollection.Add(C1.C1PreviewClient.TagListInputParamsItem)">
            <summary>
            Adds an item to the current collection.
            </summary>
            <param name="item">The item to add.</param>
            <returns>The index of the newly added item.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.TagListInputParamsItemCollection.Remove(C1.C1PreviewClient.TagListInputParamsItem)">
            <summary>
            Removes an item from the current collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TagListInputParamsItemCollection.Item(System.Int32)">
            <summary>
            Gets or set the item with the specified index.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The item with the specified index.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.TagListInputParamsItemCollection.Item(System.String)">
            <summary>
            Gets or set the item with the specified name.
            </summary>
            <param name="tagName">The name of the item.</param>
            <returns>The item with the specified name.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.TagBoolInputParams">
            <summary>
            Represents customization parameters for input of Booleand tag values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagBoolInputParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagBoolInputParams"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagBoolInputParams.AssignFrom(C1.C1PreviewClient.TagInputParams)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="T:C1.C1PreviewClient.TagNumericInputParams">
            <summary>
            Represents customization parameters for input of numeric tag values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagNumericInputParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagNumericInputParams"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.TagNumericInputParams.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.TagNumericInputParams"/> class.
            </summary>
            <param name="minimum">The minimum allowed value.</param>
            <param name="maximum">The maximum allowed value.</param>
            <param name="increment">Increment for the spin buttons.</param>
            <param name="decimalPlaces">Editor precision (decimal places).</param>
        </member>
        <member name="M:C1.C1PreviewClient.TagNumericInputParams.AssignFrom(C1.C1PreviewClient.TagInputParams)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.C1PreviewClient.TagNumericInputParams.Minimum">
            <summary>
            Gets or sets the minimum allowed value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagNumericInputParams.Maximum">
            <summary>
            Gets or sets the maximum allowed value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagNumericInputParams.Increment">
            <summary>
            Gets or sets the increment for the spin buttons.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.TagNumericInputParams.DecimalPlaces">
            <summary>
            Gets or sets the editor precision (decimal places).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.ReferenceEnum">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            Specifies a referenced object in an expression in a <see cref="T:C1.C1PreviewClient.Unit"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.Parent">
            <summary>
            The parent of the current object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.Next">
            <summary>
            The next object at the same level as the current object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.Prev">
            <summary>
            The previous object at the same level as the current object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.Self">
            <summary>
            The current object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.Name">
            <summary>
            An object with the specified name.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.Page">
            <summary>
            The current page.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.Column">
            <summary>
            The current page column.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.Id">
            <summary>
            An object with the specified Id
            (provided for backward compatibility only).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.ReferenceEnum.PageIndex">
            <summary>
            A page with the specifid index.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.DimensionEnum">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            Enumerates the single-dimensional coordinates and sizes of an object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DimensionEnum.Default">
            <summary>
            The default dimension.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DimensionEnum.Left">
            <summary>
            The left edge of an object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DimensionEnum.Top">
            <summary>
            The top edge of an object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DimensionEnum.Right">
            <summary>
            The right edge of an object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DimensionEnum.Bottom">
            <summary>
            The bottom edge of an object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DimensionEnum.Width">
            <summary>
            The width of an object.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.DimensionEnum.Height">
            <summary>
            The height of an object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.UnitTypeEnum">
            <summary>
            Enumerates units of measurement used in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>,
            used by <see cref="T:C1.C1PreviewClient.Unit"/> and related types.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Default">
            <summary>
            Units specified by a document's <see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/> are used.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Inch">
            <summary>
            Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Mm">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Pica">
            <summary>
            Specifies the pica unit (1/6 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Pixel">
            <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Twip">
            <summary>
            Specifies a twip (1/1440 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.InHs">
            <summary>
            Specifies a hundredths of an inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Display">
            <summary>
            Specifies 1/75 inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Cm">
            <summary>
            Specifies centimetre's as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Em">
            <summary>
            Measurement is relative to the height of the element's font. 
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.Ex">
            <summary>
            Measurement is relative to the height of the lowercase letter x of the element's font.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.UnitTypeEnum.LineSpacing">
            <summary>
            Measurement is relative to the spacing between two lines of element's font.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthBase">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            The abstract base class representing a single coordinate or dimension of an object.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthBase"/> class.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthBase.StringToUnitType(System.String,C1.C1PreviewClient.UnitTypeEnum@)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/> value. The string can be one of the following:
            "def", "doc", "in", "mm", "pc", "pix", "pt", "tw", "inhs".
            This method is case-insensitive.
            </summary>
            <param name="s">The string to convert. If it is null or empty, <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Default"/> is returned.</param>
            <param name="units">OUT: On exit, contains the <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/> value.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthBase.UnitTypeToString(C1.C1PreviewClient.UnitTypeEnum)">
            <summary>
            Converts a <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/> value to a string representation as in
            the following table:
            <list type="bullet">
            <item><description><term>Default</term>Empty string</description></item>
            <item><description><term>Document</term>"doc"</description></item>
            <item><description><term>Inch</term>"in"</description></item>
            <item><description><term>Millimeter</term>"mm"</description></item>
            <item><description><term>Pica</term>"pc"</description></item>
            <item><description><term>Pixel</term>"pix"</description></item>
            <item><description><term>Point</term>"pt"</description></item>
            <item><description><term>Twip</term>"tw"</description></item>
            <item><description><term>InHs</term>"inhs"</description></item>
            </list>
            </summary>
            <param name="units">A <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/> to convert.</param>
            <returns>The string representing <paramref name="units"/>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthBase.StringToDimension(System.String,C1.C1PreviewClient.DimensionEnum@)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.DimensionEnum"/> value.
            The string can be one of the following:
            "left", "top", "right", "bottom", "width", "height".
            This method is not case sensitive.
            </summary>
            <param name="s">The string to convert. If s is <b>null</b> or empty, <see cref="F:C1.C1PreviewClient.DimensionEnum.Default"/> is returned.</param>
            <param name="dimension">OUT: A <see cref="T:C1.C1PreviewClient.DimensionEnum"/> corresponding to the specified string.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthBase.Parse(System.String,System.Boolean)">
            <summary>
            Parses a string and creates a <see cref="T:C1.C1PreviewClient.LengthBase"/> instance from that string.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="throwException">Indicates whether to throw an exception if the string cannot be parsed.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.LengthBase"/> instance. Depending on <paramref name="s"/>,
            this may be a <see cref="T:C1.C1PreviewClient.LengthAbs"/>, a <see cref="T:C1.C1PreviewClient.LengthRef"/>, a <see cref="T:C1.C1PreviewClient.LengthExp"/> or a <see cref="T:C1.C1PreviewClient.LengthAuto"/>.
            If <paramref name="throwException"/> is <b>false</b>, <b>null</b> is returned if an error occurred.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.LengthBase.DependsOnAuto">
            <summary>
            Returns true if size or coordinate represented by this Unit object.
            Depends on autosize.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthBase.IsAuto">
            <summary>
            Gets a value indicating whether the current object represents an auto length.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthBase.IsEmpty">
            <summary>
            Gets a value indicating whether the current object represents a zero length.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthBase.IsAbs">
            <summary>
            Gets a value indicating whether the current object represents an absolute length.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthBase.Auto">
            <summary>
            Gets an instance of <see cref="T:C1.C1PreviewClient.LengthAuto"/> representing an auto length.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthBase.TypeConverter">
            <summary>
            Converts <see cref="T:C1.C1PreviewClient.LengthBase"/> to/from other types.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthBase.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.LengthBase"/>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>A <see cref="T:C1.C1PreviewClient.LengthBase"/> representing <paramref name="str"/>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthBase.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.LengthAuto">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            Represents an automatic dimension or coordinate.
            Only one instance of this type can be created, it can be accessed via <see cref="P:C1.C1PreviewClient.LengthBase.Auto"/>.
            The string <b>"auto"</b> can be used in expressions as an alias for this type.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthAuto.ToString">
            <summary>
            Converts the current object to a string.
            </summary>
            <returns>"auto".</returns>
        </member>
        <member name="T:C1.C1PreviewClient.LengthAbs">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            Represents an absolute length value, such as "5mm", "10in", "20" and so on.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthAbs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthAbs"/> class
            from a string representing the length value.
            </summary>
            <param name="s">The string used to initialize the value, such as "5mm" or "10in".</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthAbs.#ctor(System.Double,C1.C1PreviewClient.UnitTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthAbs"/> class
            from a value and unit of measurement.
            </summary>
            <param name="value">The length value.</param>
            <param name="units">Unit of measurement of <paramref name="value"/>.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthAbs.Equals(System.Object)">
            <summary>
            Compares the current length with another object.
            This method performs comparison by value.
            </summary>
            <param name="obj">The object to compare the current with.</param>
            <returns><b>true</b> if the two objects repesent the same length, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthAbs.GetHashCode">
            <summary>
            Gets the hash code for the current object,
            based on the length value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthAbs.ToString">
            <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1PreviewClient.Unit"/> to the same value).
            </summary>
            <returns>The string representing the current length value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthAbs.Compare(C1.C1PreviewClient.LengthAbs,C1.C1PreviewClient.C1PrintDocument,System.Object)">
            <summary>
            Compares the current object with another <see cref="T:C1.C1PreviewClient.LengthAbs"/> object.
            </summary>
            <param name="other">A <see cref="T:C1.C1PreviewClient.LengthAbs"/> object to compare the current one with.</param>
            <param name="doc">The document providing the context for comparison.</param>
            <param name="font">The font providing the context for comparison.</param>
            <returns>0 if the two objects represent equal lengths,
            -1 if the current length is less than the other,
            1 if the current length is greater than the other,
            -2 if the units of measurement cannot be compared.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.LengthAbs.Value">
            <summary>
            Gets the numeric value (expressed in <see cref="P:C1.C1PreviewClient.LengthAbs.Units"/>).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthAbs.Units">
            <summary>
            Gets the unit of measurement used by <see cref="P:C1.C1PreviewClient.LengthAbs.Value"/>.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthAbs.Predefined">
            <summary>
            Contains predefined <see cref="T:C1.C1PreviewClient.LengthAbs"/> values.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthAbs.Predefined.Empty">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthAbs"/> instance representing an empty length
            (defined as "0mm").
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthAbs.Predefined.LineWidth">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthAbs"/> instance representing the default line thickness
            (equal to 1pt).
            This is used for borders, grid lines etc.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthAbs.Predefined.BoldLineWidth">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthAbs"/> instance representing the default bold line thickness
            (equal to 2pt).
            This is used for borders, grid lines etc.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthAbs.Predefined.Values">
            <summary>
            Gets an array of predefined <see cref="T:C1.C1PreviewClient.LengthAbs"/> values
            (<see cref="P:C1.C1PreviewClient.LengthAbs.Predefined.Empty"/>, <see cref="P:C1.C1PreviewClient.LengthAbs.Predefined.LineWidth"/> and <see cref="P:C1.C1PreviewClient.LengthAbs.Predefined.BoldLineWidth"/>).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthRef">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            Represents a length value that references a coordinate or a dimension of another object.
            <para>
            (Examples of such references are "parent.width", "MyObjectName.right", "prev.height"
            or "MyObjectName.MySubObjectName.Width".)
            </para>
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthRef"/> class
            from a string representing the length reference.
            </summary>
            <param name="s">The string used to initialize the value, such as "parent.width" or "MyObject.right".</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.#ctor(C1.C1PreviewClient.LengthRef.UnitRefElem[],C1.C1PreviewClient.DimensionEnum)">
            <summary>
            <!--TBD (verify and add remarks)-->
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthRef"/> class
            from an array of nested object references and a dimension.
            </summary>
            <param name="elements">An array of <see cref="T:C1.C1PreviewClient.LengthRef.UnitRefElem"/> referencing nested objects.</param>
            <param name="dimension">The target dimension of this <b>LengthRef</b>.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.#ctor(C1.C1PreviewClient.LengthRef.UnitRefElem,C1.C1PreviewClient.DimensionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthRef"/> class
            from a nested object reference and a dimension.
            </summary>
            <param name="element">A <see cref="T:C1.C1PreviewClient.LengthRef.UnitRefElem"/> identifying the referenced object.</param>
            <param name="dimension">The target dimension of this <b>LengthRef</b>.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.#ctor(C1.C1PreviewClient.ReferenceEnum,C1.C1PreviewClient.DimensionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthRef"/> class
            from a predefined source reference and a dimension.
            </summary>
            <param name="source">A <see cref="T:C1.C1PreviewClient.ReferenceEnum"/> identifying the referenced object.</param>
            <param name="dimension">The target dimension of this <b>LengthRef</b>.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.Equals(System.Object)">
            <summary>
            Compares the current length with another object.
            This method performs comparison by value.
            </summary>
            <param name="obj">The object to compare the current with.</param>
            <returns><b>true</b> if the two objects repesent the same length, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.GetHashCode">
            <summary>
            Gets the hash code for the current object,
            based on the length value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.ToString">
            <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1PreviewClient.Unit"/> to the same value).
            </summary>
            <returns>The string representing the current length value.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Elements">
            <summary>
            Gets the array of objects composing the path to the target object of the current reference length.
            If the current reference 
            </summary>
            <remarks>
            <para>
            If the current object uses a simple (not nested) reference such as "parent.width",
            this array contains just one element, corresponding to the <b>parent</b> object.
            </para>
            <para>
            If the current object uses a nested reference such as "parent.MyChildName.width",
            this array contains a <see cref="T:C1.C1PreviewClient.LengthRef.UnitRefElem"/> element for each object in the hierarchy
            (one for <b>parent</b>, and one for <b>MyChildName</b> in this example).
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Dimension">
            <summary>
            Gets the target dimension of the referenced object.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthRef.UnitRefElem">
            <summary>
            A structure representing a single referenced object in a <see cref="T:C1.C1PreviewClient.LengthRef"/>
            (if the <b>LengthRef</b> uses a hierarchical reference, each object in the hierarchy
            of nested objects is represented by an instance of this structure).
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.LengthRef.UnitRefElem.Source">
            <summary>
            Specifies the referenced object as a <see cref="T:C1.C1PreviewClient.ReferenceEnum"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.LengthRef.UnitRefElem.SourceName">
            <summary>
            Specifies the name of the referenced object if <see cref="F:C1.C1PreviewClient.LengthRef.UnitRefElem.Source"/> is <see cref="F:C1.C1PreviewClient.ReferenceEnum.Name"/>.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.LengthRef.UnitRefElem.SourceNo">
            <summary>
            Specifies the page or column number if <see cref="F:C1.C1PreviewClient.LengthRef.UnitRefElem.Source"/> is <see cref="F:C1.C1PreviewClient.ReferenceEnum.Page"/>
            or <see cref="F:C1.C1PreviewClient.ReferenceEnum.Column"/>.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.UnitRefElem.#ctor(C1.C1PreviewClient.ReferenceEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthRef.UnitRefElem"/> structure
            with the specified source.
            </summary>
            <param name="source">A <see cref="T:C1.C1PreviewClient.ReferenceEnum"/> identifying the source of the current reference.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.UnitRefElem.#ctor(C1.C1PreviewClient.ReferenceEnum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthRef.UnitRefElem"/> structure
            with the specified source, source name and page/column number.
            </summary>
            <param name="source">A <see cref="T:C1.C1PreviewClient.ReferenceEnum"/> identifying the source of the current reference.</param>
            <param name="sourceName">The source name
            (used if <paramref name="source"/> is <see cref="F:C1.C1PreviewClient.ReferenceEnum.Name"/>).</param>
            <param name="sourceNo">The source page/column number
            (used if <paramref name="source"/> is <see cref="F:C1.C1PreviewClient.ReferenceEnum.Page"/>
            or <see cref="F:C1.C1PreviewClient.ReferenceEnum.Column"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.UnitRefElem.#ctor(C1.C1PreviewClient.ReferenceEnum,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthRef.UnitRefElem"/> structure
            with the specified source and page/column number.
            </summary>
            <param name="source">A <see cref="T:C1.C1PreviewClient.ReferenceEnum"/> identifying the source of the current reference.</param>
            <param name="sourceNo">The source page/column number
            (used if <paramref name="source"/> is <see cref="F:C1.C1PreviewClient.ReferenceEnum.Page"/>
            or <see cref="F:C1.C1PreviewClient.ReferenceEnum.Column"/>).</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.UnitRefElem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthRef.UnitRefElem"/> structure
            with the specified source name.
            </summary>
            <param name="sourceName">The source name
            (<see cref="F:C1.C1PreviewClient.LengthRef.UnitRefElem.Source"/> is set to <see cref="F:C1.C1PreviewClient.ReferenceEnum.Name"/> by this constructor).</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthRef.UnitRefElem.ToString">
            <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1PreviewClient.Unit"/> to the same value).
            </summary>
            <returns>The string representing the current length value.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.LengthRef.Predefined">
            <summary>
            Contains and provides access to a number of commonly used
            predefined <see cref="T:C1.C1PreviewClient.LengthRef"/> objects.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.ParentLeft">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Parent.Left" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.ParentTop">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Parent.Top" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.ParentWidth">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Parent.Width" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.ParentHeight">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Parent.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.PrevRight">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Prev.Right" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.PrevBottom">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Prev.Bottom" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.PrevHeight">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Prev.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.NextHeight">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Next.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.Parent">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Parent.Default" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.Self">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Self.Default" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.ParentRight">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Parent.Right" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.ParentBottom">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Parent.Bottom" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.SelfWidth">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Self.Width" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.SelfHeight">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Self.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.PageWidth">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the the "Page.Width" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.PageHeight">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.LengthRef"/> instance representing the "Page.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthRef.Predefined.Values">
            <summary>
            Gets a collection of <see cref="T:C1.C1PreviewClient.LengthRef"/> containing all lengths
            defined by the <see cref="T:C1.C1PreviewClient.LengthRef.Predefined"/> class.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            Represents a length value which is an expression comprising instances of
            <see cref="T:C1.C1PreviewClient.LengthRef"/>, <see cref="T:C1.C1PreviewClient.LengthAbs"/>, and operations on them
            (represented by static properties of <see cref="T:C1.C1PreviewClient.LengthExp.Operation"/> type, such as <b>LengthExp.Add</b>) .
            <para>
            (Examples of such expressions are "parent.width + 5mm", "80%parent.width", and so on.)
            </para>
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])">
            <summary>
            <!--TBD: this must be clarified with Alexander!!! (e.g. functions)-->
            
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.LengthExp"/> class
            with an array of operands and operations in inverse Polish notation order.
            </summary>
            <param name="elements">The operands and operations comprising the current <see cref="T:C1.C1PreviewClient.LengthExp"/>,
            in inverse Polish notation order.</param>
            <remarks>
            The <paramref name="elements"/> array should be a valid inverse Polish notation
            stack of operands and operations such as:
            <list type="bullet">
            <item>
            <see cref="T:C1.C1PreviewClient.LengthAbs"/>: represents an absolute length value;
            </item>
            <item>
            <see cref="T:C1.C1PreviewClient.LengthExp"/>: represents a coordinate or dimension of another object;
            </item>
            <item>
            A built-in function:
            <list type="bullet">
            <item><see cref="P:C1.C1PreviewClient.LengthExp.Max"/>: maximum;</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.Min"/>: minimum.</item>
            </list>
            </item>
            <item>
            An operation:
            <list type="bullet">
            <item><see cref="P:C1.C1PreviewClient.LengthExp.Add"/>: add;</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.Sub"/>: subtract;</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.Mul"/>: multiply;</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.Div"/>: divide;</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.Percent"/>: percentage;</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.UnMinus"/>: unary minus;</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.UnPlus"/>: unary plus;</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.Bracket"/>: bracket (opening or closing);</item>
            <item><see cref="P:C1.C1PreviewClient.LengthExp.EmptyArg"/>: empty argument.</item>
            </list>
            </item>
            </list>
            <!--TBD: provide concrete examples-->
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.Equals(System.Object[])">
            <summary>
            Compares the current <see cref="T:C1.C1PreviewClient.LengthExp"/> object with another stack of
            operands and operations in inverse Polish notation
            (see remarks in <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> for details).
            This method compares values of the two stacks.
            </summary>
            <param name="elements">A inverse Polish notation stack of operands and operations that are compared to the current expression.</param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.Equals(System.Object)">
            <summary>
            Compares the current length expression with another object.
            This method compares operation stacks of the two objects
            using the <see cref="M:C1.C1PreviewClient.LengthExp.Equals(System.Object[])"/> method.
            </summary>
            <param name="obj">The object to compare the current with.</param>
            <returns><b>true</b> if the two objects repesent the same length, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.GetHashCode">
            <summary>
            Gets the hash code for the current object,
            based on the values in the length expression stack.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.ToString">
            <summary>
            Converts the current object to a string.
            The returned string can be converted back to the current length object
            (e.g. it can be used to initialize a <see cref="T:C1.C1PreviewClient.Unit"/> to the same value).
            </summary>
            <returns>The string representing the current length value.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Elements">
            <summary>
            Gets the expression stack, as described in remarks
            to <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/>.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Operations">
            <summary>
            Gets an array of all registered (supported) operators.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.UnaryOperations">
            <summary>
            Gets an array of all registered (supported) unary operators.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Functions">
            <summary>
            Gets an array of all registered (supported) functions.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Add">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpAdd"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Sub">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpSub"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Mul">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpMul"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Div">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpDiv"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Percent">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpPercent"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.UnMinus">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpUnMinus"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.UnPlus">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpUnPlus"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Bracket">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpBracket"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.EmptyArg">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.OpEmptyArg"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Max">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.MaxFunction"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Min">
            <summary>
            Gets the static instance of the <see cref="T:C1.C1PreviewClient.LengthExp.MinFunction"/> class,
            can be used in the <see cref="M:C1.C1PreviewClient.LengthExp.#ctor(System.Object[])"/> constructor.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.IExecuteContext">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.IExecuteContext.TranslateIdent(System.String,System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="ident"></param>
            <param name="callbackData"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.IExecuteContext.TranslateLength(C1.C1PreviewClient.LengthBase,System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="length"></param>
            <param name="callbackData"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.FunctionAlg">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.FunctionAlg.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.MaxFunction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.MaxFunction.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.MinFunction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.MinFunction.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.LengthExp.Ident.Name">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.Ident.#ctor(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.Ident.ToString">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.Operation">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.Compiler">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.Compiler.CheckCompiledExpression(System.Object[])">
            <summary>
            For internal use.
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.Compiler.Compile(System.String,System.Object[]@,System.String@)">
            <summary>
            For internal use.
            </summary>
            <param name="s"></param>
            <param name="elements"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.Compiler.Decompile(System.Object[])">
            <summary>
            For internal use.
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Compiler.UnaryOperatorChars">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Compiler.OperatorChars">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Compiler.NumberChars">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.LengthExp.Operation.ToString">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Operation.OperandCount">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Operation.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Operation.Priority">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpAdd">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpAdd.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpAdd.Priority">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpSub">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpSub.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpSub.Priority">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpMul">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpMul.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpMul.Priority">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpDiv">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpDiv.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpDiv.Priority">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpPercent">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpPercent.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpPercent.Priority">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpUnMinus">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpUnMinus.OperandCount">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpUnMinus.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpUnMinus.Priority">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpUnPlus">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpUnPlus.OperandCount">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpUnPlus.Ident">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpUnPlus.Priority">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpFunction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpFunction.FunctionAlg">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.OpFunction.OperandCount">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpBracket">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.OpEmptyArg">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.LengthExp.Predefined">
            <summary>
            <para>For internal use.</para>
            Holds some predefined LengthExp objects.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Predefined.RightAlign">
            <summary>
            Represents "Parent.Right - Self.Width" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Predefined.BottomAlign">
            <summary>
            Represents "Parent.Bottom - Self.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Predefined.HorzCenterAlign">
            <summary>
            Represents "(Parent.Width - Self.Width) / 2" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Predefined.VertCenterAlign">
            <summary>
            Represents "(Parent.Height - Self.Height) / 2" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Predefined.HorzCenter">
            <summary>
            Represents "Self.Width / 2" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Predefined.VertCenter">
            <summary>
            Represents "Self.Height / 2" reference.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.LengthExp.Predefined.Values">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Unit">
            <summary>
            A structure representing a single coordinate or dimension of an object
            (e.g. <see cref="P:C1.C1PreviewClient.RenderObject.X"/> or <see cref="P:C1.C1PreviewClient.RenderObject.Height"/> of a <see cref="T:C1.C1PreviewClient.RenderObject"/>)
            in a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
            <remarks>
            <para>
            The value may be "auto", absolute (e.g. "5mm"), or an expression (e.g. "prev.width + 12mm").
            See <see cref="M:C1.C1PreviewClient.Unit.#ctor(System.String)"/> for more details.
            <!--TBD: add more info (copy from descriptive doc?)-->
            <!--TBD: add examples-->
            </para>
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Unit"/> structure
            from a string. See <b>remarks</b> for details.
            </summary>
            <param name="str">A string representing the value.</param>
            
            <remarks>
            <para>(In the description that follows, <b>"object"</b> means a <see cref="T:C1.C1PreviewClient.RenderObject"/>
            or another document object on which the current <b>Unit</b> represents a dimension
            or a coordinate, not the <b>Unit</b> structure itself.)
            </para>
            
            The <paramref name="str"/> string should contain a valid <see cref="T:C1.C1PreviewClient.Unit"/> value
            in one of the following forms:
            <list type="bullet">
            <item>
            Auto, represented by the string <b>"auto"</b>.
            The exact semantics depend on the type of object with which the current unit is associated.
            </item>
            
            <item>
            An unqualified numeric value, e.g. <b>"8"</b> or <b>"100.12"</b>.
            <para>In this case <see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/> determines the unit of measurement.</para>
            </item>
            
            <item>
            A numeric value qualified with unit of measurement, e.g. <b>"28mm"</b> or <b>"7in"</b>.
            
            <para>The following unit type qualifiers are supported
            (for each type, the corresponding element of the <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/> enumeration is listed):</para>
            <list type="bullet">
            <!--TODO/TBD/QQ: provide correct descriptions for each type!-->
            <item><term>def</term><description><see cref="P:C1.C1PreviewClient.C1PrintDocument.DefaultUnit"/> is used
            (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Default"/>; this is equivalent to not specifying untis at all);</description></item>
            <item><term>doc</term><description>"Document" units (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Document"/>; 1/300th of an inch);</description></item>
            <item><term>in</term><description>Inches (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Inch"/>);</description></item>
            <item><term>mm</term><description>Millimeters (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Mm"/>);</description></item>
            <item><term>pc</term><description>Picas (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pica"/>; 1/6 of an inch);</description></item>
            <item><term>pix</term><description>Device pixels (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>; depend on <see cref="P:C1.C1PreviewClient.C1PrintDocument.MeasurementDpi"/>);</description></item>
            <item><term>pt</term><description>Points (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Point"/>; 1/72 of a inch);</description></item>
            <item><term>tw</term><description>Twips (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Twip"/>; 1/1440 of a inch);</description></item>
            <item><term>inhs</term><description>1/100 of an inch (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.InHs"/>);</description></item>
            <item><term>dsp</term><description>"Display" units (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Display"/>; 1/75 of an inch);</description></item>
            <item><term>cm</term><description>Centimeters (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Cm"/>);</description></item>
            <item><term>em</term><description>"Em size" (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Em"/>; object font's height);</description></item>
            <item><term>ex</term><description>"Ex size" (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.Ex"/>; object font lowercase <b>x</b>'s height);</description></item>
            <item><term>ls</term><description>Object font's line spacing (<see cref="F:C1.C1PreviewClient.UnitTypeEnum.LineSpacing"/>).</description></item>
            </list>
            </item>
            
            <item>
            A percentage of the object's parent size, optionally qualified with the parent's dimension
            ("width" or "height"; if a dimension is not specified, the dimension the current unit referes to is assumed),
            e.g. <b>"50%width"</b> or <b>"120%"</b>.
            <para>(Percentage can only be used to specify width or height, and is not valid for coordinates.)</para>
            </item>
            
            <item>
            A reference to a dimension or coordinate of another object,
            e.g. <b>"prev.width"</b>, <b>"next.bottom"</b> or <b>"page1column2.width"</b>.
            
            <para>The referenced object may be identified by any of the following key words:</para>
            <list type="bullet">
            <item><term>self</term>
            <description>The current object. Default, may be omitted;</description></item>
            <item><term>parent</term>
            <description>The current object's parent (container);</description></item>
            <item><term>prev</term>
            <description>The previous sibling of the current object;</description></item>
            <item><term>next</term>
            <description>The next sibling of the current object;</description></item>
            <item><term>page</term>
            <description>The current page;</description></item>
            <item><term>column</term>
            <description>The current page column;</description></item>
            <item><term>page<i>N</i></term>
            <description>Page by number, <b>N</b> is 1-based
            (e.g. <b>"page8"</b>; the page must already exist - forward references using this notation are not supported);</description></item>
            <item><term>pageindex<i>N</i></term>
            <description>Page by index, <b>N</b> is 0-based
            (e.g. <b>"page0"</b>);</description></item>
            <item><term>column<i>M</i></term>
            <description>Column by number, <b>M</b> is 1-based, on the current page (e.g. <b>"column2"</b>);</description></item>
            <item><term>page<i>N</i>.column<i>M</i></term>
            <description>Column <b>M</b> on page <b>N</b>, <b>M</b> and <b>N</b> are 1-based (e.g. <b>"page8.column2"</b>);</description></item>
            <item><term><i>object name</i></term>
            <description>Object with the specified name (see <see cref="P:C1.C1PreviewClient.RenderObject.Name"/>).
            The object is first searched among the siblings of the current object, then among its children.</description></item>
            </list>
            
            The referenced dimension or coordinate may be specified using any of the following key words:
            <list type="bullet">
            <item><term>left</term><description>The <b>X</b> coordinate of the left edge of an object;</description></item>
            <item><term>top</term><description>The <b>Y</b> coordinate of the top edge of an object;</description></item>
            <item><term>right</term><description>The <b>X</b> coordinate of the right edge of an object;</description></item>
            <item><term>bottom</term><description>The <b>Y</b> coordinate of the bottom edge of an object;</description></item>
            <item><term>width</term><description>The width of an object;</description></item>
            <item><term>height</term><description>The height of an object.</description></item>
            </list>
            </item>
            
            <item>
            A <b>Max</b> or <b>Min</b> built-in function call, e.g. <b>"Max(prev.width,6cm)"</b> or <b>"Min(0.5in,next.height)"</b>.
            </item>
            
            <item>
            An expression using operands in any of the forms described above (except <b>"auto"</b>),
            combined using operators <b>+</b> (add), <b>-</b> (subtract), <b>*</b> (multiply), <b>/</b> (divide), <b>%</b> (percent),
            functions <b>Min</b> and <b>Max</b>, and parentheses <b>(</b> and <b>)</b>.
            
            <para>Examples of unit expressions are:</para>
            <list type="bullet">
            <item>
            <term>prev.width + 50%prev.width</term>
            <description>This expression can be used to specify the width of an object being 1.5 times the width of its previous sibling</description>
            </item>
            <item>
            <term>150%prev</term>
            <description>Same as above</description>
            </item>
            <item>
            <term>prev * 1.5</term>
            <description>Same as above but using multiplication instead of percentage</description>
            </item>
            </list>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.#ctor(System.Double,C1.C1PreviewClient.UnitTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.Unit"/> structure
            with an absolute length value.
            </summary>
            <param name="value">The unit value.</param>
            <param name="unitType">The unit of measurement.</param>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.#ctor(C1.C1PreviewClient.LengthBase)">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            </summary>
            <param name="lengthBase"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.#ctor(System.Double,C1.C1PreviewClient.ReferenceEnum,C1.C1PreviewClient.DimensionEnum)">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            </summary>
            <param name="percent"></param>
            <param name="source"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.#ctor(System.Double,C1.C1PreviewClient.DimensionEnum)">
            <summary>
            <para>For internal use. <!--TBD: make internal--></para>
            </summary>
            <param name="percent"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.Equals(System.Object)">
            <summary>
            Compares the current unit value with another object.
            </summary>
            <param name="obj">The object to compare the current with.</param>
            <returns><b>true</b> if the two objects repesent the same unit value, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.GetHashCode">
            <summary>
            Gets the hash code for the current unit value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.ConvertUnit(C1.C1PreviewClient.UnitTypeEnum)">
            <summary>
            Attempts to convert the current unit value to other unit of measurement.
            <para>Only absolute units can be converted.
            This method throws an exception if the conversion cannot be performed.</para>
            </summary>
            <param name="destUnitType">The target <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/>.</param>
            <returns>The value in <paramref name="destUnitType"/> units.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.ConvertUnit(C1.C1PreviewClient.UnitTypeEnum,System.Single)">
            <summary>
            Attempts to convert the current unit value to other unit of measurement.
            <para>Only absolute units can be converted.
            This method throws an exception if the conversion cannot be performed.</para>
            </summary>
            <param name="destUnitType">The target <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/>.</param>
            <param name="destDpi">The target resolution (used if <paramref name="destUnitType"/> is <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>).</param>
            <returns>The value in <paramref name="destUnitType"/> units.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.ConvertUnit(System.Single,C1.C1PreviewClient.UnitTypeEnum,System.Single)">
            <summary>
            Attempts to convert the current unit value to other unit of measurement.
            <para>Only absolute units can be converted.
            This method throws an exception if the conversion cannot be performed.</para>
            </summary>
            <param name="sourceDpi">The current unit value's resolution (used if <see cref="P:C1.C1PreviewClient.Unit.Units"/> is <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>).</param>
            <param name="destUnitType">The target <see cref="T:C1.C1PreviewClient.UnitTypeEnum"/>.</param>
            <param name="destDpi">The target resolution (used if <paramref name="destUnitType"/> is <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>).</param>
            <returns>The value in <paramref name="destUnitType"/> units.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.FromObject(System.Object)">
            <summary>
            Attempts to convert an object to a unit value.
            This method throws an exception if the conversion cannot be performed.
            </summary>
            <param name="obj">An object to convert.</param>
            <returns>A unit value representing <paramref name="obj"/>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.op_Equality(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Tests whether the two unit values are equal.
            </summary>
            <param name="u1">The first unit value.</param>
            <param name="u2">The second unit value.</param>
            <returns><b>true</b> if the two units are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.op_Inequality(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Tests whether the two unit values are not equal.
            </summary>
            <param name="u1">The first unit value.</param>
            <param name="u2">The second unit value.</param>
            <returns><b>true</b> if the two units are not equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.op_Implicit(C1.C1PreviewClient.Unit)~System.Double">
            <summary>
            Returns the absolute value of a <see cref="T:C1.C1PreviewClient.Unit"/> expressed in <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Default"/> units.
            <para>Throws exception if the operation cannot be performed.</para>
            </summary>
            <param name="value">The unit value to convert.</param>
            <returns>The absolute value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.op_Implicit(C1.C1PreviewClient.Unit)~System.String">
            <summary>
            Converts a unit value to a string.
            </summary>
            <param name="value">The unit to convert.</param>
            <returns>The string representing the unit value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.op_Implicit(System.Double)~C1.C1PreviewClient.Unit">
            <summary>
            Converts a <b>double</b> value to a <see cref="T:C1.C1PreviewClient.Unit"/> using <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Default"/> units.
            </summary>
            <param name="value">The <b>double</b> value.</param>
            <returns>The unit value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.op_Implicit(System.Int32)~C1.C1PreviewClient.Unit">
            <summary>
            Converts an integer value to a <see cref="T:C1.C1PreviewClient.Unit"/> using <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Default"/> units.
            </summary>
            <param name="value">The integer value.</param>
            <returns>The unit value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.op_Implicit(System.String)~C1.C1PreviewClient.Unit">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.Unit"/> value (see <see cref="M:C1.C1PreviewClient.Unit.#ctor(System.String)"/>.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The unit value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.op_Implicit(C1.C1PreviewClient.LengthBase)~C1.C1PreviewClient.Unit">
            <summary>
            For internal use.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.IsEmpty">
            <summary>
            Gets a value indicating whether the current unit represents an empty value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.Value">
            <summary>
            Gets the absolute value of the current unit (in <see cref="P:C1.C1PreviewClient.Unit.Units"/>).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.Units">
            <summary>
            Gets the unit of measurement of the current unit.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.IsAuto">
            <summary>
            Gets a value indicating whether the current unit represents an <b>"auto"</b> value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.IsAbs">
            <summary>
            Gets a value indicating whether the current unit represents an absolute value
            (such as "1mm", "2in", "3em" and so on).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.IsParentWidth">
            <summary>
            Gets a value indicating whether the current unit is specified as "parent.width".
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.IsParentHeight">
            <summary>
            Gets a value indicating whether the current unit is specified as "parent.height".
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.IsParent">
            <summary>
            Gets a value indicating whether the current unit is specified as "parent".
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.AsUnit">
            <summary>
            <para>For internal use.</para>
            Gets the LengthBase object representing this unit.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.Auto">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.Unit"/> representing an <b>"auto"</b> value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.Empty">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.Unit"/> representing an emtpy (zero) value.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.LineWidth">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.Unit"/> value representing the default line thickness (1 point wide).
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.Unit.BoldLineWidth">
            <summary>
            Gets a <see cref="T:C1.C1PreviewClient.Unit"/> value representing the default "bold" line thickness (2 points wide).
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Unit.TypeConverter">
            <summary>
            Provides type conversions for <see cref="T:C1.C1PreviewClient.Unit"/> values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.PageNumberingChange"/> object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether an object can be converted to the specified type.
            </summary>
            <param name="context">The conversion context.</param>
            <param name="type">The target type.</param>
            <returns><b>true</b> if the conversion can be performed, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Unit.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an object to the specified type.
            </summary>
            <param name="context">The conversion context.</param>
            <param name="culture">The culture to use.</param>
            <param name="value">The value to convert.</param>
            <param name="type">The target type.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.UnitPoint">
            <summary>
            Represents a point on a two-dimensional surface,
            with coordinates specified as <see cref="T:C1.C1PreviewClient.Unit"/> values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.UnitPoint.#ctor(C1.C1PreviewClient.Unit,C1.C1PreviewClient.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1PreviewClient.UnitPoint"/> structure.
            </summary>
            <param name="x">The <b>X</b> coordinate.</param>
            <param name="y">The <b>Y</b> coordinate.</param>
        </member>
        <member name="M:C1.C1PreviewClient.UnitPoint.ToString">
            <summary>
            Converts the current value to a human-readable string.
            </summary>
            <returns>The string representing the current value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.UnitPoint.Parse(System.String,C1.C1PreviewClient.UnitPoint@,System.Boolean)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.UnitPoint"/> structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: The <see cref="T:C1.C1PreviewClient.UnitPoint"/> structure representing <paramref name="s"/>.</param>
            <param name="throwException">Indicates whether an exception should be thrown if the conversion cannot be performed
            (if an error occurs, and this value is <b>false</b>, <paramref name="result"/> is set to <see cref="P:C1.C1PreviewClient.UnitPoint.Empty"/>).</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.C1PreviewClient.UnitPoint.X">
            <summary>
            Gets or sets the <b>X</b> coordinate of the current point.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.UnitPoint.Y">
            <summary>
            Gets or sets the <b>Y</b> coordinate of the current point.
            </summary>
        </member>
        <member name="P:C1.C1PreviewClient.UnitPoint.Empty">
            <summary>
            Represents a <see cref="T:C1.C1PreviewClient.UnitPoint"/> with zero coordinates.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.UnitPoint.TypeConverter">
            <summary>
            Provides type conversions for <see cref="T:C1.C1PreviewClient.UnitPoint"/> values.
            </summary>
        </member>
        <member name="M:C1.C1PreviewClient.UnitPoint.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
            <summary>
            Converts a string to a <see cref="T:C1.C1PreviewClient.UnitPoint"/> value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="str">The string to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.UnitPoint.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="o">The object to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:C1.C1PreviewClient.Utils">
            <summary>
            Contains common functions.
            </summary>
            <summary>
            Contains common functions.
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.MmPerInch">
            <summary>Millimeters per inch as double.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.DocumentUnitsPerInch">
            <summary>Document units per inch as double.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.PointsPerInch">
            <summary>Points per inch as double.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.TwipsPerInch">
            <summary>Twips per inch as double.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.PicaPerInch">
            <summary>Picas per inch as double.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.CmPerInch">
            <summary>Centimeters per inch as double.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.DisplayPerInch">
            <summary>Display units per inch as double.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.MmPerInchF">
            <summary>Millimeters per inch as float.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.DocumentUnitsPerInchF">
            <summary>Document units per inch as float.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.PointsPerInchF">
            <summary>Points per inch as float.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.TwipsPerInchF">
            <summary>Twips per inch as float.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.PicaPerInchF">
            <summary>Picas per inch as float.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.CmPerInchF">
            <summary>Centimeters per inch as float.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.DisplayPerInchF">
            <summary>Display units per inch as float.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.FloatFormatInfo">
            <summary>
            The special NumberFormatInfo object used to convert numbers
            in C1PrintDocument, its fields are initialized as:
            NumberDecimalSeparator is "."
            CurrencyDecimalSeparator is "."
            </summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.TransparentColor">
            <summary> For internal use only.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.WhiteColor">
            <summary> For internal use only.</summary>
        </member>
        <member name="F:C1.C1PreviewClient.Utils.BlackColor">
            <summary> For internal use only.</summary>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.ColorArrayToString(System.Drawing.Color[])">
            <summary>
            <para>For internal use only.</para>
            Converts an array of colors to a string.
            </summary>
            <param name="a">The array to convert.</param>
            <returns>The ";"-delimited string representing the color array.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.ColorArrayFromString(System.String)">
            <summary>
            <para>For internal use only.</para>
            Converts a ";"-delimited string to an array of colors.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The array of converted colors, or <b>null</b> if s is <b>null</b>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.FloatArrayToString(System.Single[])">
            <summary>
            <para>For internal use only.</para>
            Converts an array of float values to a ","-delimited string.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.FloatArrayToString(System.Single[],System.Char)">
            <summary>
            <para>For internal use only.</para>
            Converts the array of floats to string.
            </summary>
            <param name="a">Array to convert.</param>
            <param name="delimiter">Specifies the delimiter between numbers in string (should not be a [.]).</param>
            <returns>Returns the string representing a float array.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.FloatArrayFromString(System.String)">
            <summary>
            <para>For internal use only.</para>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.FloatArrayFromString(System.String,System.Char)">
            <summary>
            <para>For internal use only.</para>
            Converts a string to array of floats.
            </summary>
            <param name="s">String to process.</param>
            <param name="delimiter">Specifies the delimiter between numbers in string (should not be a [.]).</param>
            <returns>Array of floats or null if s is null.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.IsArraysEqual(System.Single[],System.Single[])">
            <summary>
            <para>For internal use only.</para>
            Compares two array of floats.
            </summary>
            <param name="a1">First array of float values.</param>
            <param name="a2">Second array of float values.</param>
            <returns>Returns true if arrays equals.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.ColorToString(System.Drawing.Color,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Converts color to string, use this method instead of Color.Name.
            </summary>
            <param name="color">Color structure to convert.</param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>The string representing a color.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.ColorFromString(System.String,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Converts string to color, use this method instead of Color.FromName(),
            because the Color.FromName() works incorrectly sometimes.
            </summary>
            <param name="s">String to convert.</param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.IndexInArray(System.String[],System.String)">
            <summary>
            Performs a case-sensitive search of a string in a string array.
            </summary>
            <param name="a">The string array to search.</param>
            <param name="s">The string to search for.</param>
            <returns>Index of <paramref name="s"/> in <paramref name="a"/>, or <b>-1</b> if the string was not found.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.TryParseInt(System.String,System.Int32@)">
            <summary>
            Converts a string to a 32-bit signed integer,
            using <see cref="F:C1.C1PreviewClient.Utils.FloatFormatInfo"/> as the format provider.
            <para>The return value indicates whether the operation succeeded.</para>
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: on return, the converted 32-bit signed integer, or zero if conversion failed.</param>
            <returns><b>true</b> if <paramref name="s"/> was converted successfully, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.TryParseDouble(System.String,System.Double@)">
            <summary>
            Converts a string to a double-precision floating-point number,
            using <see cref="F:C1.C1PreviewClient.Utils.FloatFormatInfo"/> as the format provider.
            <para>The return value indicates whether the operation succeeded.</para>
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: on return, the converted double-precision floating-point number, or zero if conversion failed.</param>
            <returns><b>true</b> if <paramref name="s"/> was converted successfully, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.ToWpfColor(System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.FromWpfColor(System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.EncodeTypeName(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.DecodeTypeName(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.FindType(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.Round(System.Single)">
            <summary>
            <para>For internal use only.</para>
            Rounds a float value to the nearest integer.
            </summary>
            <param name="value">The float value.</param>
            <returns>The rounded integer.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.Round(System.Double)">
            <summary>
            <para>For internal use only.</para>
            Rounds a double value to the nearest integer.
            </summary>
            <param name="value">The double value.</param>
            <returns>The rounded integer.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.IsC1PrintDocument(System.Object)">
            <summary>
            Tests whether an object is a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
            <param name="o">The object to test.</param>
            <returns><b>true</b> if the object is a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.AsC1PrintDocument(System.Object)">
            <summary>
            Gets the <see cref="T:C1.C1PreviewClient.C1PrintDocument"/> represending the passed object,
            or <b>null</b> if <paramref name="o"/> is not a <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
            <param name="o">A document to test/convert.</param>
            <returns><see cref="T:C1.C1PreviewClient.C1PrintDocument"/> representing the passed object, or <b>null</b>.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.IsC1PrintDocumentType(System.Type)">
            <summary>
            Tests whether the specified type is, or derived from, <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>.
            </summary>
            <param name="o">The type to test.</param>
            <returns><b>true</b> if the type is <see cref="T:C1.C1PreviewClient.C1PrintDocument"/>,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.C1PreviewClient.Utils.ConvertUnits(System.Double,C1.C1PreviewClient.UnitTypeEnum,C1.C1PreviewClient.UnitTypeEnum,System.Single,System.Single)">
            <summary>
            Converts a value from one unit of measurement to another.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="from">The source unit of measurement.</param>
            <param name="to">The target unit of measurement.</param>
            <param name="fromDpi">The source DPI (used if <paramref name="from"/> is <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>).</param>
            <param name="toDpi">The target DPI (used if <paramref name="to"/> is <see cref="F:C1.C1PreviewClient.UnitTypeEnum.Pixel"/>).</param>
            <returns><paramref name="value"/> converted to <paramref name="to"/> units.</returns>
        </member>
        <member name="F:C1.Design.ColorPickerControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Design.ColorPickerControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Design.ColorPickerControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Design.C1InputMaskPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Design.C1InputMaskPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Design.C1InputMaskPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Design.C1InputMaskPickerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Design.C1InputMaskPickerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Design.C1InputMaskPickerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Design.C1InputMaskPickerForm.EditMask">
            <summary>
            Gets or sets the mask
            </summary>
        </member>
        <member name="P:C1.Design.C1InputMaskPickerForm.UpdateWithLiterals">
            <summary>
            Gets or sets a value indicating whether the underlying datasource should be updated with the literals in the mask.
            </summary>
        </member>
        <member name="T:C1.Design.C1InputMaskUITypeEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.C1InputMaskUITypeEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.C1InputMaskUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Design.C1InputMaskUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.FindTypeByName">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.FindTypeByName.Find(System.String)">
            <summary>
            Finds the specified type name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.UIStringsItemEventHandler">
            <summary>
            Represents a handler for an <see cref="T:C1.Win.C1TrueDBGrid.UIStrings"/> item related event.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.UIStringsItemEventArgs">
            <summary>
            Provides data for an <see cref="T:C1.Win.C1TrueDBGrid.UIStrings"/> item related event.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStringsItemEventArgs.Key">
            <summary>
            Gets key of the item being added or changed.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStringsItemEventArgs.Value">
            <summary>
            Gets the string value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStringsItemEventArgs.IsDefault">
            <summary>
            Gets a value indicating whether this instance is default.
            </summary>
            <value>
            	<c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStringsItemEventArgs.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.UIStrings">
            <summary>
            Represents a collection of end user visible UI strings.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.Add(System.Object,System.Int32,System.String,System.String)">
            <summary>
            Adds a string to the collection, specifying the ordinal.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="ordinal">The ordinal of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.Add(System.Object,System.String,System.String)">
            <summary>
            Adds a string to the collection in alphabetical order.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.AddInOrder(System.Object,System.String,System.String)">
            <summary>
            Adds a string to the collection, preserving the order.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.Reset">
            <summary>
            Sets all strings in collection to their default values.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.ShouldSerialize">
            <summary>
            Indicates whether any of the strings in the current collection
            have non-default values.
            </summary>
            <returns><c>true</c> if any of the strings have non-default values, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.IsDefault(System.Object)">
            <summary>
            Tests whether a string in the collection has default value.
            </summary>
            <param name="key">The key of the string to test.</param>
            <returns><c>true</c> if the string has default value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.GetDescription(System.Object)">
            <summary>
            Returns the description of a string.
            </summary>
            <param name="key">The key of the string to get the description of.</param>
            <returns>The string's description</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.Reset(System.Object)">
            <summary>
            Resets a string to its default value.
            </summary>
            <param name="key">The key of the string to reset.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.ConvertFromStr(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.ConvertToStr(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.GetKeyAt(System.Int32)">
            <summary>
            Returns the key of an item with the specified index.
            </summary>
            <param name="index">The item index.</param>
            <returns>The item's key.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.GetValueAt(System.Int32)">
            <summary>
            Gets the string by its index.
            </summary>
            <param name="index">The string index.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.SetValueAt(System.Int32,System.String)">
            <summary>
            Sets the value of a string with the specified index.
            </summary>
            <param name="index">The string index.</param>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.SaveValuesToStringArray">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.RestoreValuesFromStringArray(System.String[])">
            <summary>
            For internal use.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.OnItemAdded(C1.Win.C1TrueDBGrid.UIStringsItemEventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1TrueDBGrid.UIStrings.ItemAdded"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.OnItemChanged(C1.Win.C1TrueDBGrid.UIStringsItemEventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1TrueDBGrid.UIStrings.ItemChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.OnCollectionChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1TrueDBGrid.UIStrings.CollectionChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStrings.Item(System.Object)">
            <summary>
            Gets or sets the string value for the specified key.
            </summary>
            <param name="key">The key of the string.</param>
            <returns>The string corresponding to the specified key.</returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStrings.Content">
            <summary>
            Used for serialization of strings.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStrings.Description">
            <summary>
            Gets or sets the description shown in Properties window in the IDE.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStrings.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStrings.Items">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStrings.Sorter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.UIStrings.ItemAdded">
            <summary>
            Occurs when a new item is added to the collection.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.UIStrings.ItemChanged">
            <summary>
            Occurs when an item in the collection is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1TrueDBGrid.UIStrings.CollectionChanged">
            <summary>
            Occurs when the collection has been changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter">
            <summary>
            Provides type conversion for the <see cref="T:C1.Win.C1TrueDBGrid.UIStrings"/> type.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attrFilter"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor.#ctor(System.String,System.Attribute[],System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            For internal use.
            </summary>
            <param name="name"></param>
            <param name="attributes"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor.GetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor.IsReadOnly">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.UIStrings.TypeConverter.StringPropertyDescriptor.DesignTimeOnly">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Util.Win.AmbientPropertyMonitor">
            <summary>
            A helper class for implementing an ambient property on a control.
            </summary>
            <remarks>
            Usage:
            An instance of AmbientPropertyMonitor must be created by the host control with the reference
            to that host as the parameter.
            The AmbientPropertyMonitor subscribes to the following events:
            <list type="bullet">
            <item>ParentChanged on the host and the whole parents' chain;
            </item>
            <item>(ambient property name)Changed or INotifyPropertyChanged on the host and all parents in the chain.
            NOTE: For the AmbientPropertyMonitor to work correctly, all controls that have the target property declared
            must also provide either a property changed event, or implement INotifyPropertyChanged and fire
            it at appropriate moments.
            </item>
            </list>
            <para>The AmbientPropertyMonitor monitors changes of the ambient property value on the host and all parents,
            and if a change occurs applies the value of the ambient property on the closest parent
            to that property on the host control, unless it has been changed independently of the AmbientPropertyMonitor
            (AmbientPropertyMonitor assumes that when it is created, the ambient property on the host has default,
            unchanged value).
            </para>
            <para>It is recommended that all controls declaring the target property also provide
            the Reset(property) and ShouldSerialize(property) methods, calling the
            <see cref="M:C1.Util.Win.AmbientPropertyMonitor.ResetValue"/> and <see cref="P:C1.Util.Win.AmbientPropertyMonitor.IsValueAmbient"/> methods as needed.
            </para>
            </remarks>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._pName">
            <summary>
            The target property name.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._parentChain">
            <summary>
            At all times, should contain the up-to-date parent chain,
            starting with the host itself. Needed to keep track of
            parent changes, and changes of ambient property on the parents.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._internalChange">
            <summary>
            Prevents raising the _propertySetByUser while we adjust the
            property ourselves.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._propertySetByUser">
            <summary>
            If true, we consider the property to have a value explicitly set
            ty the user, so we do not update it anymore until reset.
            </summary>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
            Initializes a new instance of the AmbientPropertyMonitor class.
            </summary>
            <param name="host">Control on which the ambient property will be monitored.</param>
            <param name="propertyName">The name of the monitored property.
            The type of the property MUST be an enumeration.</param>
            <remarks>
            An instance of this class must be created in the constructor 
            of the host control.
            It is assumed that the value of the ambient property that will be monitored
            by the AmbientPropertyMonitor has not been set yet (i.e. has the default value)
            at the time the AmbientPropertyMonitor is constructed.
            </remarks>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.Dispose">
            <summary>
            Clears the all references.
            </summary>
            <remarks>
            Call Dispose() in the Dispose method 
            of the host control.
            
            An instance of the AmbientPropertyMonitor class holds references to the 
            host in private variables and event handles.
            Host holds reference to the instance of the AmbientPropertyMonitor.
            
            If not to clear the refs then the host control and the all referenced objects (Form, etc.) may be never released to GC.
            This cause a memory leak.
            </remarks>
            <example>
            public class C1OutBar...
            {
             public C1OutBar()
             {
               ...
               _ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
             }
            
             protected override void Dispose(bool disposing)
             {
              if (disposing)
              {
                // To prevent the memory leak
                if (_ambientVisualStyleMonitor != null)
                {
                    _ambientVisualStyleMonitor.Dispose();
                    _ambientVisualStyleMonitor = null;
                }
                ...
                base.Dispose(disposing);
              }
            ...
            }
            </example>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.ResetValue">
            <summary>
            Notifies the AmbientPropertyMonitor that the value of the monitored property
            has been reset. If the host control is currently parented to a container
            which itself defines the monitored property, the value from that parent
            is assigned to the property on the host.
            </summary>
            <remarks>
            It is recommended that the host defines a Reset method for the target
            property, and calls this method from that. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected void ResetVisualStyle() {
                ...
                __ambientVisualStyleMonitor.ResetValue();
            }
            </code>
            </remarks>
        </member>
        <member name="P:C1.Util.Win.AmbientPropertyMonitor.IsValueAmbient">
            <summary>
            Gets the value indicating whether the monitored property
            currently has the ambient value, i.e. the value has been set
            (by the AmbientPropertyMonitor) based on the value of a parent of the host.
            </summary>
            <remarks>
            It is recommended that the host defines a ShouldSerialize method for the target
            property, tests IsValueAmbient in that method, and returns false if IsValueAmbient
            returns true. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected bool ShouldSerializeVisualStyle() {
                if (__ambientVisualStyleMonitor.IsValueAmbient)
                    return false;
                ...
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.AssocQueryString(System.Int32,System.Int32,System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Gets file-association string from the registry.
            </summary>
            <param name="flags">Use <see cref="T:C1.Util.Win.Win32.ASSOCF"/> constants.</param>
            <param name="str">Use <see cref="T:C1.Util.Win.Win32.ASSOCSTR"/> constants.</param>
            <param name="pszAssoc"></param>
            <param name="pszExtra"></param>
            <param name="pszOut"></param>
            <param name="pcchOut"></param>
            <returns>An <see cref="T:C1.Util.Win.Win32.OLE"/> success/error code.</returns>
            <remarks>
            To get associated exe's length/exe:
            <code>
            uint assocLen = 0;
            AssocQueryString(ASSOCF.ASSOCF_INIT_DEFAULTTOSTAR,ASSOCSTR.ASSOCSTR_EXECUTABLE,Path.GetExtension(OutputFileName),"open",null,ref assocLen);
            </code>
            For existing files, another option is FindExecutable.
            </remarks>
        </member>
        <member name="T:C1.Util.Win.Win32.DM">
            <summary>
            Fiels of DEVMODE structure.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GetDeviceCapsConsts">
            <summary>
            GetDeviceCaps() constants
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SORT">
            <summary>
            Sorting IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LANG">
            <summary>
            Primary language IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SUBLANG">
             <summary>
              Sublanguage IDs.
            
              The name immediately following SUBLANG_ dictates which primary
              language ID that sublanguage ID can be combined with to form a
              valid language ID.
             </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LOCALE">
            <summary>
            Locale Types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.FixFpu">
            <summary>
            usage:
             using (FixFpu ff = new FixFpu())
             { do printer stuff }
            or
             do printer stuff
             FixFpu.Doit();
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.C1PdfAcrofieldType.None">
            <summary>A field type invalid or not found.</summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SC">
            <summary>
            System Menu Command Values
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SWP">
            <summary>
            SetWindowPos flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CDS">
            <summary>
            Flags for ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DISP">
            <summary>
            Return values of the ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WM">
            <summary>
            Windows messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.EM">
            <summary>
            EditControl window messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SB">
            <summary>
            WM_HSCROLL and WM_VSCROLL notifications codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BST">
            <summary>
            BM_GETSTATE flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BM">
            <summary>
            BM_XXX flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODT">
            <summary>
            DRAWITEMSTRUCT control types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODA">
            <summary>
            DRAWITEMSTRUCT drawing actions.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODS">
            <summary>
            DRAWITEMSTRUCT visual states.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.C1">
            <summary>
            ComponentOne constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOperationCodes">
            <summary>
            Specifies a raster-operation code, used by BitBlt function and other.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SW">
            <summary>
            ShowWindow() function codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PRF">
            <summary>
            WM_PRINT drawing options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SF">
            <summary>
            Rich edit data format types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SFF">
            <summary>
            Rich edit data format replacement options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SCF">
            <summary>
            EM_SETCHARFORMAT / EM_GETCHARFORMAT flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFM">
            <summary>
            CHARFORMAT mask values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFE">
            <summary>
            CHARFORMAT effects.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TO">
            <summary>
            EM_SETTYPOGRAPHYOPTIONS flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TA">
            <summary>
            Text Alignment Options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DCX">
            <summary>
            GetDCEx() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GW">
            <summary>
            GetWindow() Constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GA">
            <summary>
            GetAncestor() constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ETO">
            <summary>
            ExtTextOut() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SetBkModeConsts">
            <summary>
            SetBkMode modes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OBJ">
            <summary>
            GetObjectType() returning values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TMPF">
            <summary>
            TEXTMETRIC tmPitchAndFamily flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OLE">
            <summary>
            OLE constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS">
            <summary>
            CreateWindow() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS_EX">
            <summary>
            Extended Window Styles
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ES">
            <summary>
            CreateWindow() flags for edit controls.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFC">
            <summary>
            DrawFrameControl(), type of frame control to draw.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFCS">
            <summary>
            DrawFrameControl(), state of control.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PS">
            <summary>
            CreatePen() flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GWL">
            <summary>
            SetWindowLong() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GR">
            <summary>
            GetGuiResources() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RGN">
            <summary>
            ExtSelectClipRgn() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ScrollWindowFlags">
            <summary>
            ScrollWindowEx flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.MA">
            <summary>
            WM_MOUSEACTIVATE Return Codes
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOp">
            <summary>
            Constants for SetROP2
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ASSOCF">
            <summary>
            Defines ASSOCF values for AssocQueryString method's first parameter (flags).
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ASSOCSTR">
            <summary>
            Defines ASSOCSTR values for AssocQueryString method's second parameter (str).
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.AtomName">
            <summary>
            Name of Atom create by GDI+ for current thread.
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.IsShutdown">
            <summary>
            Gets true if GDI+ currently shutdown.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Full">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Expired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductSupportAttribute">
            <summary>
            Attribute used to attach support information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            Localization tables and methods for looking up localized strings.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="T:C1.C1Zip.C1CryptStream">
            <summary>
            C1CryptStream
            reads and decrypts data from an encrypted zip base stream, or
            encrypts and writes data to an encrypted zip base stream
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckCRC32">
            <summary>
            Calculates a checksum value for the entry and compares it to the checksum that
            was stored when the entry was created.
            </summary>
            <returns>True if the checksum values match, false otherwise.</returns>
            <remarks>
            This method is used to check the integrity of the entries in the zip file. If the
            calculated checksum does not match the stored checksum, then either the zip file is
            corrupted or the program used to create the zip file is incompatible with 
            <b>C1Zip</b>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckPassword">
            <summary>
            Checks whether this <see cref="T:C1.C1Zip.C1ZipEntry"/> can be read with the currently set password.
            </summary>
            <returns>True if the entry can be read with the current password, or if the entry is not
            encrypted.</returns>
            <remarks>
            This method is more efficient than using a try/catch block and trying to open the entry
            to determine whether the current password is valid for the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.OpenReader">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> that can be used to read the content of the entry without
            extracting it to a disk file.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> that can be used to read the data in the entry.</returns>
            <remarks>
            The <see cref="T:System.IO.Stream"/> returned is a <see cref="T:C1.C1Zip.C1ZStreamReader"/>, which 
            decompresses the data as it is read from the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.Extract(System.String)">
            <summary>
            Extracts this entry to a file.
            </summary>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.Remove">
            <summary>
            Removes this entry from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.FileName">
            <summary>
            Gets the entry name. This is usually a file name, optionally including a path.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressed">
            <summary>
            Gets the original (uncompressed) size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressed">
            <summary>
            Gets the compressed size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.CRC32">
            <summary>
            Gets the checksum calculated when the entry was compressed.
            </summary>
            <remarks>
            This value can be used to check the integrity of the entry when it is decompressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Date">
            <summary>
            Gets the date and time when the file used to create the entry was last modified.
            </summary>
            <remarks>
            This value can be used to check whether an entry needs to be updated because the
            source file was modified since it was last compressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Comment">
            <summary>
            Gets or sets a comment associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Attributes">
            <summary>
            Gets the file attributes associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.IsEncrypted">
            <summary>
            Gets a value that determines whether the entry is encrypted.
            </summary>
            <remarks>
            Encrypted entries can only be extracted if the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property
            on the containing <see cref="T:C1.C1Zip.C1ZipFile"/> object is set to the password that was used
            when the file was added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an Array, starting at a 
            particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <b>ICollection</b>. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an entry with a given name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>True if the collection contains an entry with the given name, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(C1.C1Zip.C1ZipEntry)">
            <summary>
            Determines whether the collection contains an entry.
            </summary>
            <param name="entry">Entry of the entry to look for.</param>
            <returns>True if the collection contains the entry, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the entry with the specified name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(C1.C1Zip.C1ZipEntry)">
            <summary>
            Gets the index of an entry in the collection.
            </summary>
            <param name="entry"><see cref="T:C1.C1Zip.C1ZipEntry"/> to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <remarks>
            By default, the directory name is not stored in the zip file. To store a specific
            part of the directory name in the zip file, use the overloaded version of the 
            <b>Add</b> method with a <b>pathLevels</b> parameter.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String[])">
            <summary>
            Adds a list of entries to the current zip file.
            </summary>
            <param name="fileNames">Array containing the file names of the entries to be added to the zip file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.Int32)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="pathLevels">The number of path levels to be stored as the entry name.</param>
            <remarks>
            <para>By default, path names are not stored in the zip file. For example, adding
            the file "c:\temp\samples\readme.txt" to the zip file will create an entry called
            "readme.txt".</para>
            <para>The <paramref name="pathLevels"/> parameter allows you to store one or more levels of the path in the entry name.
            For example, adding the file "c:\temp\samples\readme.txt" to the zip file with <paramref name="pathLevels"/>=1 
            will create an entry called "samples\readme.txt".</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="entryName">Name of the new entry as stored in the zip file.</param>
            <remarks>
            By default, entries in the zip file have the same name as the original (uncompressed)
            file. This method allows you to specify a different name, including a path for example.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String)">
            <summary>
            Adds a stream to the current zip file.
            </summary>
            <param name="stream">Stream that contains data for the new entry.</param>
            <param name="entryName">Name to be used for the new entry.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <remarks>
            This method adds all files and sub folders to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <remarks>
            If the folder contains sub folders, those are also added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String,System.Boolean)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <param name="includeSubfolders">True to include sub folders, false to include only files at the root level.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.ExtractFolder(System.String)">
            <summary>
            Extracts the contents of the zip file into a specified path.
            </summary>
            <param name="path">Destination path for the unzipped files.</param>
            <remarks>
            If the zip file contains compressed folders, new folders will be created
            under the destination path to preserve the hierarchical structure of the
            archive.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="index">Index of the entry to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="fileName">Name of the entry to remove (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="indices">Array containing the indices of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="entryNames">Array containing the names of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.Boolean)">
            <summary>
            Opens a stream for writing an entry into the zip file.
            </summary>
            <param name="entryName">The name of the new entry.</param>
            <param name="useMemory">Whether to use a memory stream or temporary file.</param>
            <returns>
            A stream that can be used to write data into the zip file. The entry
            is not added until the stream is closed.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value that indicates whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <b>ICollection</b>.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Count">
            <summary>
            Gets the number of entries in the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> at the specified index.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> with the given name (returns null if the entry cannot be found).
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and creates or opens
            a zip file associated with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open or create.</param>
            <param name="create">True to create a new zip file, false to open an existing file.</param>
            <remarks>
            <para>If <paramref name="create"/> is true and the zip file already exists, it is overwritten
            with a new empty file.</para>
            <para>If <paramref name="create"/> is false and the zip file already exists, the existing file 
            is opened.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip file associated 
            with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open.</param>
            <remarks>
            If the file does not exist, a new empty file is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
            <param name="create">Whether to initialize the stream with an empty zip header or open an existing
            zip file in the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.String)">
            <summary>
            Opens an existing zip file.
            </summary>
            <param name="fileName">The name of an existing zip file, including the path.</param>
            <remarks>
            <para>This method checks that the zip file exists and is a valid zip file, then
            reads the zip file directory into the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection.
            The zip file is then closed, and can be used by other applications. There is no
            need to close the zip file explicitly.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.String)">
            <summary>
            Creates an empty zip file on disk.
            </summary>
            <param name="fileName">The name of the zip file to create, including the path.</param>
            <remarks>
            If a file by the same name already exists, it is deleted before the new one
            is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.IO.Stream)">
            <summary>
            Opens an existing zip file stored in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains a zip file.</param>
            <remarks>
            <para>This method allows you to open and work with a zip file stored in a stream
            instead of in an actual file.</para>
            <para>Typical usage scenarios for this are zip files stored as application resources 
            or in binary database fields.</para>
            </remarks>
            <example>
            <para>The example below loads information from a zip file stored in an embedded resource. 
            To embed a zip file in an application, follow these steps:</para>
            <para>1) Right-click the project node in Visual Studio, select the <b>Add | Add Existing Item...</b> menu option.</para>
            <para>2) Select a zip file to add to the project as an embedded resource.</para>
            <para>3) Select the newly added file and make sure the <b>Build Action</b> property is set to "Embedded Resource".</para>
            <code>
            // get Stream from application resources
            System.Reflection.Assembly a = this.GetType().Assembly;
            using (Stream stream = a.GetManifestResourceStream("MyApp.test.zip"))
            {
              // open C1ZipFile on the stream
              zip.Open(stream);
            
              // enumerate the entries in the zip file,
              foreach (C1ZipEntry ze in zip.Entries)
              {
                // show entries that have a 'txt' extension.
                if (ze.FileName.ToLower().EndsWith(".txt"))
                {
                  using (StreamReader sr = new StreamReader(ze.OpenReader()))
                  {
                    MessageBox.Show(sr.ReadToEnd(), ze.FileName);
                  }
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.IO.Stream)">
            <summary>
            Creates a new zip file in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that will contain the new zip file.</param>
            <example>
            The code below creates a new <see cref="T:C1.C1Zip.C1ZipFile"/> on a memory stream, then adds
            several files to it. Finally, the code gets the zipped data out as an array of bytes,
            which could be stored in a database for example.
            <code>
            // create zip on a stream
            MemoryStream msZip = new MemoryStream();
            C1ZipFile zip = new C1ZipFile(msZip, true);
            
            // add some entries to it
            foreach (string f in Directory.GetFiles(@"c:\WINDOWS\Web\Wallpaper"))
            {
              zip.Entries.Add(f);
            }
            
            // get zipped data out as a byte array
            byte[] zipData = msZip.ToArray();
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Close">
            <summary>
            Resets all data members of the <see cref="T:C1.C1Zip.C1ZipFile"/> object.
            </summary>
            <remarks>
            Disk files are automatically closed by <b>C1Zip</b>. You only need to use this
            method if you want to break the connection between a <see cref="T:C1.C1Zip.C1ZipFile"/> class 
            and a physical zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Refresh">
            <summary>
            Refreshes all data members by re-opening the current zip file.
            </summary>
            <remarks>
            This method is useful in instances where other applications may have changed
            the zip file and you want to make sure the information in the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/>
            collection is up to date.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.String)">
            <summary>
            Tests whether a file is a valid zip file.
            </summary>
            <param name="fileName">Name of the file to test.</param>
            <returns>True if the file exists and is a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.IO.Stream)">
            <summary>
            Tests whether a stream contains a valid zip file.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to test.</param>
            <returns>True if <paramref name="stream"/> contains a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.OpenBatch">
            <summary>
            Opens the zip file for multiple operations.
            </summary>
            <remarks>
            <para>By default, <see cref="T:C1.C1Zip.C1ZipFile"/> opens and closes the zip file 
            automatically whenever entries are added or removed.</para>
            <para>This can cause delays in systems that have certain types of anti-virus
            software installed, or in situations where you want to add a large number of 
            relatively small entries. In these cases, use the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> and 
            <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> methods to keep the zip file open until the entire 
            operation is concluded.</para>
            <para>Use a finally clause to ensure that the <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> 
            method is called even if an exception occurs.</para>
            </remarks>
            <example>
            The code below opens a zip file, adds several entries to it, then closes 
            the file:
            <code>
            C1ZipFile zip = new C1ZipFile();
            zip.Open(myzipfile);
            try
            {
            	zip.OpenBatch();
            	foreach (string fileName in Directory.GetFiles(path, "*.*"))
            		zip.Entries.Add(fileName);
            }
            finally
            {
            	zip.CloseBatch();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.CloseBatch">
            <summary>
            Closes a zip file after it was opened with a call to the 
            <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method.
            </summary>
            <remarks>
            See the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method for a complete description 
            and a sample.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.FileName">
            <summary>
            Gets the name of the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Password">
            <summary>
            Gets or sets the password to use when adding or retrieving entries from the 
            zip file.
            </summary>
            <remarks>
            <para>If the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property is set to a non-empty string, any entries 
            added to the zip file will be encrypted and protected by the password. To extract these 
            entries later, the same password must be used.</para>
            <para>The password applies to all entries from the moment it is set. If you set the 
            password to a non-empty string and then add several entries to the zip file, all
            entries will use the same password.</para>
            <para>Although <b>C1Zip</b> supports Unicode characters in passwords, several popular zip 
            utilities do not. To ensure your encrypted zip files can be opened with third-party
            utilities, use passwords that consist of ASCII characters only.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Comment">
            <summary>
            Gets or sets a comment associated with the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.CompressionLevel">
            <summary>
            Gets or sets the compression level to use when adding entries to the zip file.
            </summary>
            <remarks>
            Higher compression settings create smaller files, but take longer to process. The
            default setting (<see cref="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression"/>) provides 
            a good trade-off between compression and speed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Entries">
            <summary>
            Gets a <see cref="T:C1.C1Zip.C1ZipEntryCollection"/> that contains the entries in the zip file.
            </summary>
            <remarks>
            The <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection is used to enumerate the entries in the zip file,
            and also to add, remove, and expand entries.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteReadOnly">
            <summary>
            Determines whether the component should overwrite read-only files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteHidden">
            <summary>
            Determines whether the component should overwrite hidden files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteSystem">
            <summary>
            Determines whether the component should overwrite system files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.MemoryThreshold">
            <summary>
            Gets or sets the size of the largest stream to be compressed in memory.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> compresses entries into temporary streams before
            adding them to the zip file.</para>
            <para>Entries with fewer than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary memory stream.</para>
            <para>Entries with more than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary file. You can control the location of the temporary file using
            the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.TempFileName">
            <summary>
            Gets or sets the name of the temporary file to use when adding entries to the zip file.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> creates temporary streams while adding entries to a zip file.
            These temporary streams can be memory-based or disk-based, depending on the size of the
            entry and on the setting of the <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> property.</para>
            If a temporary file is used, <see cref="T:C1.C1Zip.C1ZipFile"/> you can control its location by 
            setting the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property. If you don't select a path for the 
            temporary file, <see cref="T:C1.C1Zip.C1ZipFile"/> will create one automatically using the 
            <see cref="M:System.IO.Path.GetTempFileName"/> method.
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZipEncoding">
            <summary>
            Encoding used for entry names and comments
            
            NOTE: this is culture-dependent, which is a really bad idea, but most zip packers
            use the default OEM code page to encode file names, so we have to go along with it...
            
            Note that Encoding.Default seems like a logical choice but doesn't really work for
            international locales. Instead, we need to create an encoding using the current
            OEMCodePage. That allows accents and international characters to be used in file
            names (like the zip built into Windows, allows names such as "Åland.txt", "Äiti.txt", 
            "Würth.txt", etc.).
            
            This has nothing to do with compression, it's just used to encode and decode entry 
            names and comments.
            
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipFileException">
            <summary>
            Exception thrown when trying to open an invalid Zip file.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
            <param name="filename">Name of the file that caused the exception.</param>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
            <param name="filename">Name of the file that caused the exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <remarks>
            The <paramref name="sizeCompressed"/> parameter is needed only when a single stream contains
            several compressed streams (in zip files for example). If this parameter is not 
            specified, it is assumed that the stream contains a single stream of compressed data.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="header">Specifies whether the compressed stream contains header information (should be False for streams in zip files).</param>
            <param name="crc32">Specifies whether the compressed stream contains a CRC32 checksum (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
            <summary>
            Sets the number of compressed bytes to read from the underlying stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying compressed stream, decompressing them into
            a buffer, then advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buf">An array of bytes. When this method returns, <paramref name="buff"/> contains the specified byte array with the values between <paramref name="offset"/>and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the uncompressed data read from the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buff"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of (decompressed) bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is overridden and is not supported by the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream 
            by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at 
            the end of the stream.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
            <summary>
            Gets the underlying stream that contains the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamReader.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Length">
            <summary>
            Gets the length of the compressed stream if it is known (or -1 if the
            length of the compressed stream is unknown).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
            <summary>
            No Compression.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
            <summary>
            Low compression, highest speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
            <summary>
            Highest compression, low speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
            <summary>
            High compression, high speed.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
            <remarks>
            <para>Streams in zip files are different from regular zlib streams in two aspects:</para>
            <para>(1) zip streams do not contain any local header information (the information is stored in the zip file headers instead) and</para>
            <para>(2) zip streams use a CRC32 checksum instead of the adler32 checksum used by zlib streams.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
            <param name="buf">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buf"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>
            The data is compressed as it is written into the stream. Writing <paramref name="count"/> bytes
            into the stream will usually advance the position by a number smaller than <paramref name="count"/>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">Value to be written to the stream.</param>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that receives the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
            <summary>
            Gets the checksum value used to check the integrity of the stream.
            </summary>
            <remarks>
            The checksum used may be an Adler or crc32 value depending on how
            the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> was created.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
            <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter"/>.
            </summary>
            <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common applications.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
            <summary>
            Returns the length of the underlying stream, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="T:C1.C1Zip.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipEntryStreamWriter">
            <summary>
            ZipEntryStreamWriter
            Extends C1ZStreamWriter to provide the following:
            1) Creates a memory or temporary storage stream.
            2) Keeps track of the parent zip file.
            3) Overrides Close to add the compressed stream to the zip file.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.IChecksum">
            <summary>
            Interface ICheckSum
            implemented by the Adler32 and CRC32 objects.
            Adler32 is a faster checksum used by the native ZLib
            CRC32   is the default checksum used in ZIP files
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.CRC32">
            <summary>
            Summary description for CRC32.
            methods are called Adler to keep zlib source code
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Deflate">
            <summary>
            Summary description for Deflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfBlocks">
            <summary>
            Summary description for InfBlocks.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfCodes">
            <summary>
            Summary description for InfCodes.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Inflate">
            <summary>
            Summary description for Inflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfTree">
            <summary>
            Summary description for InfTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.StaticTree">
            <summary>
            Summary description for StaticTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Tree">
            <summary>
            Summary description for Tree.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
            <summary>
            End of stream detected.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
            <summary>
            A preset dictionary is needed at this point.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
            <summary>
            File error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
            <summary>
            Stream structure is inconsistent (input/output buffers are null for example).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
            <summary>
            Input data is corrupted (wrong format or checksum).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
            <summary>
            Not enough memory.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
            <summary>
            No progress possible or no room in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
            <summary>
            Incompatible ZLIB version.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
            <summary>
            Input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
            <summary>
            Position of cursor into input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
            <summary>
            Number of bytes available in the input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
            <summary>
            Total number of input bytes read so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
            <summary>
            Output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
            <summary>
            Position of cursor into the output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
            <summary>
            Number of free bytes remaining in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
            <summary>
            Total number of bytes output so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.msg">
            <summary>
            Description of the last error (null if no errors).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.adler">
            <summary>
            Current checksum value (Adler or CRC32).
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class using an Adler checksum.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class.
            </summary>
            <param name="crc32"><b>True</b> to use a CRC32 checksum, <b>False</b> to use an Adler checksum.</param>
            <remarks>
            CRC32 checksums are the standard used in zip files. Adler checksums are the default
            used by ZLIB. Adler checksums are faster to calculate, but are not compatible with the zip format.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>The fields <see cref="F:C1.C1Zip.ZLib.ZStream.next_in"/> and <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in"/> must be 
            initialized before by the caller.</para>
            <para><b>inflateInit</b> does not perform any decompression apart from reading the 
            zlib header if present: data decompression is done by the <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            method. Therefore, the <b>next_in</b> and <b>avail_in</b> may be modified, but 
            <b>next_out</b> and <b>avail_out</b> are unchanged.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
            <summary>
            Decompresses as much data as possible until the input buffer is exhausted or 
            the output buffer is full.
            </summary>
            <param name="flush">How to flush data into the output buffer (default value is 2).</param>
            <returns>
            <b>Z_OK</b> if some progress has been made (more input processed or more output produced), 
            <b>Z_STREAM_END</b> if the end of the compressed data has been reached and all 
            uncompressed output has been produced, 
            <b>Z_NEED_DICT</b> if a preset dictionary is needed at this point, 
            <b>Z_DATA_ERROR</b> if the input data was corrupted (input stream not conforming to 
            the zlib format or incorrect checksum), 
            <b>Z_STREAM_ERROR</b> if the stream structure was inconsistent (for example if 
            <b>next_in</b> or <b>next_out</b> was null), 
            <b>Z_MEM_ERROR</b> if there was not enough memory,
            <b>Z_BUF_ERROR</b> if no progress is possible or if there was not enough room in the 
            output buffer when <b>Z_FINISH</b> is used.
            </returns>
            <remarks>
            <para><b>inflate</b> performs one or both of the following actions:</para>
            
            <para>1. Decompress more input starting at <b>next_in</b> and update <b>next_in</b>
            and <b>avail_in</b> accordingly. If not all input can be processed (because there 
            is not enough room in the output buffer), <b>next_in</b> is updated and processing 
            will resume at this point for the next call to inflate.</para>
            
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b>
            and <b>avail_out</b> accordingly. <b>inflate</b> provides as much output as 
            possible, until there is no more input data or no more space in the output buffer.</para>
            
            <para>Before the call to inflate, the application should ensure that at least one of the 
            actions is possible, by providing more input and/or consuming more output, and 
            updating the <b>next_*</b> and <b>avail_*</b> values accordingly.</para>
            
            <para>If <b>inflate</b> returns Zero and <b>avail_out</b> == 0, it must be called again 
            after making room in the output buffer because there might be more output pending.</para>
            
            <para>The application can consume the uncompressed output when it wants, for example when 
            the output buffer is full (<b>avail_out</b> == 0), or after each call of <b>inflate</b>.</para>
            
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
            <summary>
            Skips invalid compressed data until a full flush point is found, 
            or until all available input is skipped. No output is provided.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after a call of <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            if this call returned <b>Z_NEED_DICT</b>. The dictionary chosen by the compressor 
            can be determined from the <b>Adler32</b> value returned by this call to <b>inflate</b>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see the <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"/> method).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
            <summary>
            Compresses as much data as possible, and stops when the input buffer becomes empty or the 
            output buffer becomes full.
            </summary>
            <param name="flush">Non-zero to force some data to be flushed into the output buffer.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para><b>deflate</b> performs one or both of the following actions:</para>
            <para>1. Compress more input starting at <b>next_in</b> and update <b>next_in</b> and 
            <b>avail_in</b> accordingly. If not all input can be processed (because there is not 
            enough room in the output buffer), <b>next_in</b> and <b>avail_in</b> are updated and 
            processing will resume at this point for the next call to <b>deflate</b>.</para>
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b> and 
            <b>avail_out</b> accordingly. This action is forced if the parameter <paramref name="flush"/> is 
            non zero. Forcing flush frequently degrades the compression ratio, so this parameter 
            should be set only when necessary (in interactive applications). Some output may be 
            provided even if flush is not set</para>
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            <para>If <b>deflate</b> returns with <b>avail_out</b> == 0, this method must be called 
            again with the same value of the <paramref name="flush"/> parameter and more output space 
            until the flush is complete (<b>deflate</b> returns with <b>avail_out</b> != 0).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
            <summary>
            Dynamically updates the compression level and compression strategy.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="strategy">Compression strategy (0-2).</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the compression dictionary from the given byte sequence without 
            producing any compressed output.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)"/>,
            before any call to <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)"/>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>).</para>
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZLib.ZStreamException">
            <summary>
            The exception that is thrown when reading or writing to a compressed stream fails.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.Borders.Border">
            <summary>
            Border is a basic border object, used by StyleContext for rendering
            and measuring elements.
            It provides a solid border with a single color and arbitrary widths 
            on each side.
            Border is designed to be extended so you can easily implement
            3-D effects, compound borders, etc.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.Borders.BorderEmpty">
            <summary>
            BorderEmpty 
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.Borders.BorderCompound">
            <summary>
            BorderCompound combines two borders. These may in turn be compound,
            so we get a lot of flexibility (got this idea from Java).
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.Borders.BorderRaised">
            <summary>
            BorderRaised draws a 1-pixel wide raised border.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.Borders.BorderInset">
            <summary>
            BorderInset draws a 1-pixel wide inset border.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.Borders.BorderGroove">
            <summary>
            BorderGroove draws a 2-pixel wide groove border.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.Borders.BorderFillet">
            <summary>
            BorderFillet draws a 2-pixel wide fillet border.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.MergedRangeDictionary">
            <summary>
            This is a specialized dictionary that does _very_ efficient range
            lookups based on Point keys (much faster than a Hashtable or SortedList).
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.DragImage.#ctor(System.Drawing.Bitmap,System.Drawing.Point,System.Windows.Forms.Control)">
            <summary>
            constructs a dragimage class
            </summary>
            <param name="bmp">bitmap that you want to drag around</param>
            <param name="p">initial starting position (in screen coordinates)</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.DragImage.Drag(System.Drawing.Point)">
            <summary>
            Drags the immage around the screen
            </summary>
            <param name="p">Mouse position in screen coordinates</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.DragImage.EndDrag(System.Drawing.Point)">
            <summary>
            Ends the drag operation.  Final paint and some cleanup.
            </summary>
            <param name="p">Current cursor position in screen coordinates</param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.DragImage._saveBackground">
            <summary>
            saves the area of the display that will be painted on when dragging a bitmap 
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.DragImage._createBackgroundBMP">
            <summary>
            Creates the memory dc that will contain the background obscured by
            the image being dragged.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.DragImage._displayBackground">
            <summary>
            redraws the portion of the display that was painted on by the bitmap being dragged
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.SBar">
            <summary>
            Base class for the grid's scrollbars
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.SBar.#ctor(C1.Win.C1TrueDBGrid.BaseGrid.View,System.Windows.Forms.ScrollBar)">
            <summary>
            Initializes a new instance of the SBar class
            </summary>
            <param name="owner"></param>
            <param name="sbar"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.SBar.Dispose(System.Boolean)">
            <summary>
            Overloaded. Releases the resources used by the class.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.SBar.OnScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Occurs when the scroll box has been moved by either a mouse or keyboard action. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.SBar.OnMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.SBar.Style">
            <summary>
            Gets or sets the visibility of the scrollbars.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.SBar.Visible">
            <summary>
            Gets or sets a value indicating whether the scrollbar is displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.SBar.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.VBar">
            <summary>
            Represents a vertical scrollbar.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.VBar.#ctor(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            Initializes a new instance of the VBar class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.VBar.OnScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Overloaded. Occurs when the scroll box has been moved by either a mouse or keyboard action.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.VBar.ToString">
            <summary>
            Returns a string the represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.VBar.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.VBar.Width">
            <summary>
            Gets or sets the width of the vertical scrollbar.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.HBar">
            <summary>
            Represents a horizontal scrollbar.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.HBar.#ctor(C1.Win.C1TrueDBGrid.BaseGrid.View)">
            <summary>
            Initializes a new instance of the VBar class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.HBar.OnScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Overloaded. Occurs when the scroll box has been moved by either a mouse or keyboard action.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.Util.HBar.ToString">
            <summary>
            Returns a string the represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1TrueDBGrid.Util.HBar.Height">
            <summary>
            Gets or sets the height of the horizontal scrollbar.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.DrawCellFlags">
            <summary>
            Specifies which elements of the cell should be drawn by the grid.
            </summary>
            <remarks>
            <para>This enumeration is used when rendering owner-drawn cells.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Styles.DrawCellFlags.None">
            <summary>
            Draw nothing.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Styles.DrawCellFlags.Background">
            <summary>
            Draw the cell background.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Styles.DrawCellFlags.Border">
            <summary>
            Draw the cell border.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Styles.DrawCellFlags.Content">
            <summary>
            Draw the cell content (text, images, checkboxes, etc).
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.Styles.DrawCellFlags.All">
            <summary>
            Draw all cell elements (background, border, and contents).
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.StyleContext">
            <summary>
            StyleContext contains a base Style definition and a list of
            named Styles. It provides the following services:
            - Style management (create, edit, and remove Styles)
            - Style inheritance mechanism
            - Rendering and measuring methods
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Styles.BaseStyle">
            <summary>
            Style contains a collection of arbitrary attributes, 
            represented by a name/object entry, a reference to a parent
            Style, and a reference to the containing StyleContext.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.Util.Types">
            <summary>
            Summary description for Types.
            </summary>
        </member>
        <member name="T:C1.Win.VisualStyles.Office2007ColorScheme">
            <summary>
            Determines the Office 2007 color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.VisualStyles.Office2007ColorScheme.Blue">
            <summary>
            MS Office 2007 blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.VisualStyles.Office2007ColorScheme.Black">
            <summary>
            MS Office 2007 black color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.VisualStyles.Office2007ColorScheme.Silver">
            <summary>
            MS Office 2007 silver color scheme.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.VisualStyle">
            <summary>
            Specifies a visual style to use when rendering the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.VisualStyle.Custom">
            <summary>
            Do not use any visual styles. Render the control using the styles and properties only.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.VisualStyle.System">
            <summary>
            Render the control with an appearance based on the current system settings.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.VisualStyle.Office2007Blue">
            <summary>
            Render the control with an appearance based on the Office 2007 Blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.VisualStyle.Office2007Silver">
            <summary>
            Render the control with an appearance based on the Office 2007 Silver color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.VisualStyle.Office2007Black">
            <summary>
            Render the control with an appearance based on the Office 2007 Black color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.VisualStyle.Office2010Blue">
            <summary>
            Render the control with an appearance based on the Office 2010 Blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.VisualStyle.Office2010Silver">
            <summary>
            Render the control with an appearance based on the Office 2010 Silver color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.VisualStyle.Office2010Black">
            <summary>
            Render the control with an appearance based on the Office 2010 Black color scheme.
            </summary>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GridRenderer">
            <summary>
            Base class for the grid renderers.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.GridRenderer"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridRenderer.OnDrawCell(C1.Win.C1TrueDBGrid.BaseGrid.Frame,C1.Win.C1TrueDBGrid.OwnerDrawCellEventArgs,C1.Win.C1TrueDBGrid.GridRenderer.CellType)">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridRenderer.GetBackgroundBrush(C1.Win.C1TrueDBGrid.BaseGrid.Frame,C1.Win.C1TrueDBGrid.GridRenderer.CellType,System.Drawing.Rectangle)">
            <summary>
            Gets the background brush.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cellType">Type of the cell.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridRenderer.GetBorderPen(C1.Win.C1TrueDBGrid.GridRenderer.CellType)">
            <summary>
            Gets the border pen.
            </summary>
            <param name="cellType">Type of the cell.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridRenderer.StyleHasCustomBackground(C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Styles the has custom background.
            </summary>
            <param name="style">The style.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridRenderer.StyleHasCustomBorder(C1.Win.C1TrueDBGrid.Style)">
            <summary>
            Styles the has custom border.
            </summary>
            <param name="style">The style.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1TrueDBGrid.GridRenderer.CellType">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.Caption">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.ColumnHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.ColumnHeaderSelected">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.ColumnHeaderHot">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.ColumnFooter">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.ColumnFooterSelected">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.ColumnFooterHot">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.RecordSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.RecordSelectorSelected">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.RecordSelectorHot">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1TrueDBGrid.GridRenderer.CellType.Highlight">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1TrueDBGrid.GridRendererOffice2007.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1TrueDBGrid.GridRendererOffice2007"/> class.
            </summary>
        </member>
    </members>
</doc>
